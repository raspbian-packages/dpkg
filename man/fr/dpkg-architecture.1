.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "dpkg-architecture 1"
.TH dpkg-architecture 1 "2020-08-02" "1.20.5" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NOM"
.IX Header "NOM"
dpkg-architecture \- Fixer et d\('eterminer l'architecture pour la construction
d'un paquet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBdpkg-architecture\fR [\fIoption\fR...] [\fIcommande\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBdpkg-architecture\fR aide \(`a d\('eterminer et \(`a fixer l'architecture de
construction et l'architecture h\(^ote pour la cr\('eation d'un paquet.
.PP
L'architecture de construction est toujours d\('etermin\('ee par un appel externe
\(`a \fBdpkg\fR(1). Elle ne peut pas \(^etre sp\('ecifi\('ee en ligne de commande.
.PP
Vous pouvez sp\('ecifier une architecture h\(^ote en utilisant une des options
\&\fB\-\-host\-arch\fR et \fB\-\-host\-type\fR (ou les deux). Par d\('efaut, la valeur est
d\('etermin\('ee par un appel \(`a \fBgcc\fR(1), ou en utilisant l'architecture de
construction si \fB\s-1CC\s0\fR ou gcc ne sont pas disponibles. Utiliser une seule des
options \fB\-\-host\-arch\fR et \fB\-\-host\-type\fR est suffisant, la valeur de l'une
est utilis\('ee comme valeur par d\('efaut de l'autre. Bien s\(^ur, il est pr\('ef\('erable
de n'en pr\('eciser qu'une seule, puisque \fBdpkg-architecture\fR affichera un
avertissement si le choix ne correspond pas \(`a la valeur par d\('efaut.
.SH "COMMANDES"
.IX Header "COMMANDES"
.IP "\fB\-l\fR, \fB\-\-list\fR" 4
.IX Item "-l, --list"
Affiche les variables d'environnement, une par ligne, en utilisant le format
\&\fIVARIABLE=valeur\fR. C'est l'action par d\('efaut.
.IP "\fB\-e\fR, \fB\-\-equal\fR \fIarchitecture\fR" 4
.IX Item "-e, --equal architecture"
V\('erifie l'\('egalit\('e d'architectures (depuis dpkg 1.13.13). Cela compare
l'architecture Debian en cours (ou celle sp\('ecifi\('ee) \(`a \fIarchitecture\fR afin
de v\('erifier leur \('egalit\('e. Cette action ne g\(`ere pas les architectures
joker. La commande quitte avec un code de retour de \fB0\fR si l'architecture
correspond et de \fB1\fR dans le cas contraire.
.IP "\fB\-i\fR, \fB\-\-is\fR \fIarchitecture-joker\fR" 4
.IX Item "-i, --is architecture-joker"
V\('erifie l'identit\('e des architectures (depuis dpkg 1.13.13). Cela compare
l'architecture Debian en cours (ou celle sp\('ecifi\('ee) \(`a \fIarchitecture-joker\fR
(apr\(`es expansion de celle-ci) afin de v\('erifier leur correspondance. La
commande quitte avec un code de retour de \fB0\fR si l'architecture correspond
et de \fB1\fR dans le cas contraire.
.IP "\fB\-q\fR, \fB\-\-query\fR \fInom-de-variable\fR" 4
.IX Item "-q, --query nom-de-variable"
Affiche la valeur d'une seule variable.
.IP "\fB\-s\fR, \fB\-\-print\-set\fR" 4
.IX Item "-s, --print-set"
Print an export command. This can be used to set the environment variables
using the \s-1POSIX\s0 shell \fBeval\fR.
.IP "\fB\-u\fR, \fB\-\-print\-unset\fR" 4
.IX Item "-u, --print-unset"
Affiche une commande similaire \(`a celle produite par \fB\-\-print\-unset\fR, mais
pour supprimer toutes les variables.
.IP "\fB\-c\fR, \fB\-\-command\fR \fIcha\(^ine\-de\-commande\fR" 4
.IX Item "-c, --command cha\(^ine-de-commande"
Ex\('ecute une \fIcha\(^ine\-de\-commande\fR dans un environnement o\(`u toutes les
variables sont positionn\('ees aux valeurs sp\('ecifi\('ees.
.IP "\fB\-L\fR, \fB\-\-list\-known\fR" 4
.IX Item "-L, --list-known"
Affiche une liste des architectures valables. Elle peut \(^etre restreinte par
une ou plusieurs des options correspondantes \fB\-\-match\-wildcard\fR,
\&\fB\-\-match\-bits\fR ou \fB\-\-match\-endian\fR (depuis dpkg 1.17.14).
.IP "\fB\-?\fR, \fB\-\-help\fR" 4
.IX Item "-?, --help"
Affiche un message d'aide puis quitte.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Affiche le num\('ero de version puis quitte.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a\fR, \fB\-\-host\-arch\fR \fIarchitecture\fR" 4
.IX Item "-a, --host-arch architecture"
D\('efinit l'architecture Debian en cours.
.IP "\fB\-t\fR, \fB\-\-host\-type\fR \fItype\-de\-syst\(`eme\-gnu\fR" 4
.IX Item "-t, --host-type type-de-syst\(`eme-gnu"
D\('efinit le type de syst\(`eme \s-1GNU\s0 en cours.
.IP "\fB\-A\fR, \fB\-\-target\-arch\fR \fIarchitecture\fR" 4
.IX Item "-A, --target-arch architecture"
D\('efinit l'architecture Debian de la cible (depuis dpkg 1.17.14).
.IP "\fB\-T\fR, \fB\-\-target\-type\fR \fItype\-de\-syst\(`eme\-gnu\fR" 4
.IX Item "-T, --target-type type-de-syst\(`eme-gnu"
D\('efinit le type de syst\(`eme \s-1GNU\s0 de la cible (depuis dpkg 1.17.14).
.IP "\fB\-W\fR, \fB\-\-match\-wildcard\fR \fIarchitecture-joker\fR" 4
.IX Item "-W, --match-wildcard architecture-joker"
Restreindre les architectures list\('ees par \fB\-\-list\-known\fR \(`a celles
correspondant \(`a l'architecture-joker (depuis dpkg 1.17.14).
.IP "\fB\-B\fR, \fB\-\-match\-bits\fR \fIbits-de-l'architecture\fR" 4
.IX Item "-B, --match-bits bits-de-l'architecture"
Restreindre les architectures list\('ees par \fB\-\-list\-known\fR \(`a celles employant
un \s-1CPU\s0 disposant du nombre de bits indiqu\('es (depuis dpkg 1.17.14). Soit
\&\fB32\fR, soit \fB64\fR.
.IP "\fB\-E\fR, \fB\-\-match\-endian\fR \fIboutisme-d'architecture\fR" 4
.IX Item "-E, --match-endian boutisme-d'architecture"
Restreindre les architectures list\('ees par \fB\-\-list\-known\fR \(`a celles
correspondant au boutisme sp\('ecifi\('e (depuis dpkg 1.17.14). Soit \fBlittle\fR,
soit \fBbig\fR.
.IP "\fB\-f\fR, \fB\-\-force\fR" 4
.IX Item "-f, --force"
Les valeurs positionn\('ees par les variables d'environnement ayant le m\(^eme nom
que celles utilis\('ees par les scripts sont prises en compte (c'est\-\(`a\-dire
utilis\('ees par \fBdpkg-architecture\fR), sauf si cette option est pr\('esente. Cela
permet \(`a un utilisateur de surcharger une valeur m\(^eme lorsque l'appel \(`a
\&\fBdpkg-architecture\fR est inclus dans un autre script (par exemple
\&\fBdpkg-buildpackage\fR(1)).
.SH "TERMINOLOGIE"
.IX Header "TERMINOLOGIE"
.IP "Machine de construction" 4
.IX Item "Machine de construction"
Machine sur laquelle le paquet est construit.
.IP "Machine h\(^ote" 4
.IX Item "Machine h\(^ote"
Machine pour laquelle le paquet est construit.
.IP "Machine cible" 4
.IX Item "Machine cible"
La machine pour laquelle le compilateur construit. Cela est n\('ecessaire
uniquement lors de la construction d'une cha\(^ine d'outils de compilation
crois\('ee qui sera construite sur l'architecture de construction, pour \(^etre
ex\('ecut\('ee sur l'architecture h\(^ote, afin de construire du code pour
l'architecture cible.
.IP "Architecture Debian" 4
.IX Item "Architecture Debian"
Cha\(^ine de caract\(`eres de l'architecture Debian qui sp\('ecifie l'emplacement
dans l'archive \s-1FTP.\s0 Par exemple : i386, sparc, hurd\-i386.
.IP "N\-uplet d'architecture Debian" 4
.IX Item "N-uplet d'architecture Debian"
Un n\-uplet d'architecture Debian est l'architecture pleinement qualifi\('ee
avec tous ses composants \('enonc\('es. C'est diff\('erent des architectures Debian
en ce que le composant \fIprocesseur\fR n'int\(`egre pas l'\fI\s-1ABI\s0\fR. Le n\-uplet
actuel a la forme \fI\s-1ABI\s0\fR\-\fIlibc\fR\-\fIos\fR\-\fIprocesseur\fR. Exemples :
base\-gnu\-linux\-amd64, eabihf-musl-linux-arm.
.IP "Architecture Debian joker" 4
.IX Item "Architecture Debian joker"
Une architecture Debian joker est une architecture sp\('eciale qui correspond \(`a
toutes les architectures r\('eelles qui en font partie. Il est en g\('en\('eral de la
forme d'un n\-uplet d'architecture Debian avec quatre \('el\('ements ou moins dont
au moins l'un deux est \fBany\fR. Les \('el\('ements manquants du n\-uplet sont
pr\('efix\('es implicitement par \fBany\fR, et donc les paires suivantes sont
\('equivalentes.
.RS 4
.IP "\fBany\fR\-\fBany\fR\-\fBany\fR\-\fBany\fR = \fBany\fR" 4
.IX Item "any-any-any-any = any"
.PD 0
.IP "\fBany\fR\-\fBany\fR\-\fIos\fR\-\fBany\fR = \fIos\fR\-\fBany\fR" 4
.IX Item "any-any-os-any = os-any"
.IP "\fBany\fR\-\fIlibc\fR\-\fBany\fR\-\fBany\fR = \fIlibc\fR\-\fBany\fR\-\fBany\fR" 4
.IX Item "any-libc-any-any = libc-any-any"
.RE
.RS 4
.PD
.Sp
Exemples : linux-any, any\-i386, hurd-any, eabi-any-any-arm, musl-any-any.
.RE
.IP "Type de syst\(`eme \s-1GNU\s0" 4
.IX Item "Type de syst\(`eme GNU"
Cha\(^ine de caract\(`eres d\('efinissant l'architecture et constitu\('ee de deux
parties s\('epar\('ees par un tiret : processeur et syst\(`eme. Par exemple :
i586\-linux\-gnu, sparc-linux-gnu, i386\-gnu, x86_64\-netbsd.
.IP "n\-uplet multiarchitecture" 4
.IX Item "n-uplet multiarchitecture"
Type en clair de syst\(`eme \s-1GNU,\s0 utilis\('e pour les chemins du syst\(`eme de
fichiers. Ce n\-uplet ne change pas m\(^eme quand l'\s-1ISA\s0 de base est incr\('ement\('ee,
de sorte que les chemins r\('esultants sont stables dans la dur\('ee. La seule
diff\('erence actuelle avec le type du syst\(`eme \s-1GNU\s0 est que la partie processeur
pour les syst\(`emes bas\('es sur l'i386 est toujours i386. Exemples :
i386\-linux\-gnu, x86_64\-linux\-gnu. Exemple de chemins :
/lib/powerpc64le\-linux\-gnu/, /usr/lib/i386\-kfreebsd\-gnu/.
.SH "VARIABLES D'ENVIRONNEMENT"
.IX Header "VARIABLES D'ENVIRONNEMENT"
Les variables suivantes sont positionn\('ees par \fBdpkg-architecture\fR (voir la
section \fB\s-1TERMS\s0\fR pour une description du sch\('ema de nommage) :
.IP "\fB\s-1DEB_BUILD_ARCH\s0\fR" 4
.IX Item "DEB_BUILD_ARCH"
Architecture Debian de la machine de construction.
.IP "\fB\s-1DEB_BUILD_ARCH_ABI\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_ABI"
Nom de l'\s-1ABI\s0 Debian de la machine de construction (depuis dpkg 1.18.11).
.IP "\fB\s-1DEB_BUILD_ARCH_LIBC\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_LIBC"
Nom de la libc Debian de la machine de construction (depuis dpkg 1.18.11).
.IP "\fB\s-1DEB_BUILD_ARCH_OS\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_OS"
Nom du syst\(`eme Debian de la machine de construction (depuis dpkg 1.13.2).
.IP "\fB\s-1DEB_BUILD_ARCH_CPU\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_CPU"
Nom de processeur Debian de la machine de construction (depuis dpkg 1.13.2).
.IP "\fB\s-1DEB_BUILD_ARCH_BITS\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_BITS"
Taille de pointeur de la machine de construction (en bits, depuis
dpkg 1.15.4).
.IP "\fB\s-1DEB_BUILD_ARCH_ENDIAN\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_ENDIAN"
Boutisme de la machine de construction (petit ou gros, depuis dpkg 1.15.4).
.IP "\fB\s-1DEB_BUILD_GNU_CPU\s0\fR" 4
.IX Item "DEB_BUILD_GNU_CPU"
Partie \s-1CPU\s0 de \fB\s-1DEB_BUILD_GNU_TYPE\s0\fR.
.IP "\fB\s-1DEB_BUILD_GNU_SYSTEM\s0\fR" 4
.IX Item "DEB_BUILD_GNU_SYSTEM"
Partie \(Fo syst\(`eme \(Fc de \fB\s-1DEB_BUILD_GNU_TYPE\s0\fR.
.IP "\fB\s-1DEB_BUILD_GNU_TYPE\s0\fR" 4
.IX Item "DEB_BUILD_GNU_TYPE"
Type de syst\(`eme \s-1GNU\s0 de la machine de construction.
.IP "\fB\s-1DEB_BUILD_MULTIARCH\s0\fR" 4
.IX Item "DEB_BUILD_MULTIARCH"
Le type en clair de syst\(`eme \s-1GNU\s0 de la machine de construction, utilis\('e pour
les chemins du syst\(`eme de fichiers (depuis dpkg 1.16.0).
.IP "\fB\s-1DEB_HOST_ARCH\s0\fR" 4
.IX Item "DEB_HOST_ARCH"
Architecture Debian de la machine h\(^ote.
.IP "\fB\s-1DEB_HOST_ARCH_ABI\s0\fR" 4
.IX Item "DEB_HOST_ARCH_ABI"
Nom de l'\s-1ABI\s0 Debian de la machine h\(^ote (depuis dpkg 1.18.11).
.IP "\fB\s-1DEB_HOST_ARCH_LIBC\s0\fR" 4
.IX Item "DEB_HOST_ARCH_LIBC"
Nom de la libc Debian de la machine h\(^ote (depuis dpkg 1.18.11).
.IP "\fB\s-1DEB_HOST_ARCH_OS\s0\fR" 4
.IX Item "DEB_HOST_ARCH_OS"
Nom du syst\(`eme Debian de la machine h\(^ote (depuis dpkg 1.13.2).
.IP "\fB\s-1DEB_HOST_ARCH_CPU\s0\fR" 4
.IX Item "DEB_HOST_ARCH_CPU"
Nom du processeur Debian de la machine h\(^ote (depuis dpkg 1.13.2).
.IP "\fB\s-1DEB_HOST_ARCH_BITS\s0\fR" 4
.IX Item "DEB_HOST_ARCH_BITS"
Taille de pointeur de la machine h\(^ote (en bits, depuis dpkg 1.15.4).
.IP "\fB\s-1DEB_HOST_ARCH_ENDIAN\s0\fR" 4
.IX Item "DEB_HOST_ARCH_ENDIAN"
Boutisme de la machine h\(^ote (petit ou gros, depuis dpkg 1.15.4).
.IP "\fB\s-1DEB_HOST_GNU_CPU\s0\fR" 4
.IX Item "DEB_HOST_GNU_CPU"
Partie \(Fo processeur \(Fc de \fB\s-1DEB_HOST_GNU_TYPE\s0\fR.
.IP "\fB\s-1DEB_HOST_GNU_SYSTEM\s0\fR" 4
.IX Item "DEB_HOST_GNU_SYSTEM"
Partie \(Fo syst\(`eme \(Fc de \fB\s-1DEB_HOST_GNU_TYPE\s0\fR.
.IP "\fB\s-1DEB_HOST_GNU_TYPE\s0\fR" 4
.IX Item "DEB_HOST_GNU_TYPE"
Type de syst\(`eme \s-1GNU\s0 de la machine h\(^ote.
.IP "\fB\s-1DEB_HOST_MULTIARCH\s0\fR" 4
.IX Item "DEB_HOST_MULTIARCH"
Le type en clair de syst\(`eme \s-1GNU\s0 de la machine h\(^ote, utilis\('e pour les chemins
du syst\(`eme de fichiers (depuis dpkg 1.16.0).
.IP "\fB\s-1DEB_TARGET_ARCH\s0\fR" 4
.IX Item "DEB_TARGET_ARCH"
L'architecture Debian de la machine cible (depuis dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_ARCH_ABI\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_ABI"
Nom de l'\s-1ABI\s0 Debian de la machine cible (depuis dpkg 1.18.11).
.IP "\fB\s-1DEB_TARGET_ARCH_LIBC\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_LIBC"
Nom de la libc Debian de la machine cible (depuis dpkg 1.18.11).
.IP "\fB\s-1DEB_TARGET_ARCH_OS\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_OS"
Nom du syst\(`eme Debian de la machine cible (depuis dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_ARCH_CPU\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_CPU"
Nom du processeur Debian de la machine cible (depuis dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_ARCH_BITS\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_BITS"
Taille de pointeur de la machine cible (en bits, depuis dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_ARCH_ENDIAN\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_ENDIAN"
Boutisme de la machine cible (petit ou gros, depuis dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_GNU_CPU\s0\fR" 4
.IX Item "DEB_TARGET_GNU_CPU"
Partie \(Fo processeur \(Fc de \fB\s-1DEB_TARGET_GNU_TYPE\s0\fR (depuis dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_GNU_SYSTEM\s0\fR" 4
.IX Item "DEB_TARGET_GNU_SYSTEM"
Partie \(Fo syst\(`eme \(Fc de \fB\s-1DEB_TARGET_GNU_TYPE\s0\fR (depuis dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_GNU_TYPE\s0\fR" 4
.IX Item "DEB_TARGET_GNU_TYPE"
Type du syst\(`eme \s-1GNU\s0 de la machine cible (depuis dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_MULTIARCH\s0\fR" 4
.IX Item "DEB_TARGET_MULTIARCH"
Le type en clair du syst\(`eme \s-1GNU\s0 de la machine cible, utilis\('e pour les
chemins du syst\(`eme de fichiers (depuis dpkg 1.17.14).
.SH "FICHIERS"
.IX Header "FICHIERS"
.SS "Tables d'architectures"
.IX Subsection "Tables d'architectures"
Tous ces fichiers sont n\('ecessaires afin que \fBdpkg-architecture\fR puisse
fonctionner. Leurs emplacements peuvent \(^etre modifi\('es lors du traitement \(`a
l'aide de la variable d'environnement \fB\s-1DPKG_DATADIR\s0\fR. Ces tables
contiennent en premi\(`ere ligne un pseudo-champ de \fBVersion\fR de format pour
indiquer leur format de sorte que les analyseurs peuvent v\('erifier s'ils les
comprennent, tel que \(Fo # Version=1.0 \(Fc.
.IP "\fI\f(CI%PKGDATADIR\fI%/table\-processeur\fR" 4
.IX Item "/usr/share/dpkg/table-processeur"
Table des noms de processeurs connus et liaison avec leur nom
\&\s-1GNU.\s0 Version 1.0 de format (depuis dpkg 1.13.2).
.IP "\fI\f(CI%PKGDATADIR\fI%/table\-syst\(`eme\-exploitation\fR" 4
.IX Item "/usr/share/dpkg/table-syst\(`eme-exploitation"
Table des noms des syst\(`emes d'exploitation connus et liaison avec leurs noms
\&\s-1GNU.\s0 Version 2.0 de format (depuis dpkg 1.18.11).
.IP "\fI\f(CI%PKGDATADIR\fI%/table\-n\-uplet\fR" 4
.IX Item "/usr/share/dpkg/table-n-uplet"
Correspondances entre les n\-uplets de l'architecture Debian et les noms des
architectures Debian. Format version 1.0 (depuis dpkg 1.18.11).
.IP "\fI\f(CI%PKGDATADIR\fI%/table\-ABI\fR" 4
.IX Item "/usr/share/dpkg/table-ABI"
Table des substituts d'attributs d'\s-1ABI\s0 d'architecture Debian. Format
version 2.0 (depuis dpkg 1.18.11).
.SS "Gestion de l'empaquetage"
.IX Subsection "Gestion de l'empaquetage"
.IP "\fI\f(CI%PKGDATADIR\fI%/architecture.mk\fR" 4
.IX Item "/usr/share/dpkg/architecture.mk"
Un fragment de fichier Makefile qui d\('efinit correctement et exporte toutes
les variables que \fBdpkg-architecture\fR peut fournir (depuis dpkg 1.16.1).
.SH "EXEMPLES"
.IX Header "EXEMPLES"
\&\fBdpkg-buildpackage\fR accepte l'option \fB\-a\fR, et la passe \(`a
\&\fBdpkg-architecture\fR. Voici d'autres exemples :
.Sp
.Vb 1
\& CC=i386\-gnu\-gcc dpkg\-architecture \-c debian/rules build
\&
\& eval $(dpkg\-architecture \-u)
.Ve
.PP
V\('erifie si l'architecture en cours (ou celle sp\('ecifi\('ee) est identique \(`a une
architecture :
.Sp
.Vb 1
\& dpkg\-architecture \-elinux\-alpha
\&
\& dpkg\-architecture \-amips \-elinux\-mips
.Ve
.PP
V\('erifie si l'architecture en cours (ou celle sp\('ecifi\('ee) est un syst\(`eme
Linux :
.Sp
.Vb 1
\& dpkg\-architecture \-ilinux\-any
\&
\& dpkg\-architecture \-ai386 \-ilinux\-any
.Ve
.SS "Utilisation dans debian/rules"
.IX Subsection "Utilisation dans debian/rules"
Les variables d'environnement d\('efinies par \fBdpkg-architecture\fR sont
fournies \(`a \fIdebian/rules\fR comme variables pour make (consultez la
documentation de make). Cependant, vous ne devez pas compter l\(`a\-dessus
puisque cela emp\(^eche les appels manuels \(`a ce script. \(`A la place, vous devez
toujours les initialiser en utilisant \fBdpkg-architecture\fR avec l'option
\&\fB\-q\fR. Voici quelques exemples, qui indiquent aussi comment am\('eliorer la
gestion des compilations crois\('ees de votre paquet :
.PP
R\('ecup\('eration du type de syst\(`eme \s-1GNU\s0 et passage \(`a ./configure :
.Sp
.Vb 11
\& DEB_BUILD_GNU_TYPE ?= $(shell dpkg\-architecture \-qDEB_BUILD_GNU_TYPE)
\& DEB_HOST_GNU_TYPE ?= $(shell dpkg\-architecture \-qDEB_HOST_GNU_TYPE)
\& [...]
\& ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
\&  confflags += \-\-build=$(DEB_HOST_GNU_TYPE)
\& else
\&  confflags += \-\-build=$(DEB_BUILD_GNU_TYPE) \e
\&               \-\-host=$(DEB_HOST_GNU_TYPE)
\& endif
\& [...]
\& ./configure $(confflags)
.Ve
.PP
Effectuer une action pour une architecture sp\('ecifique :
.Sp
.Vb 1
\& DEB_HOST_ARCH ?= $(shell dpkg\-architecture \-qDEB_HOST_ARCH)
\&
\& ifeq ($(DEB_HOST_ARCH),alpha)
\&  [...]
\& endif
.Ve
.PP
Ou, si vous n'avez besoin que de v\('erifier le type du processeur et du
syst\(`eme, utilisez les variables \fB\s-1DEB_HOST_ARCH_CPU\s0\fR ou \fB\s-1DEB_HOST_ARCH_OS\s0\fR.
.PP
Veuillez noter qu'il est \('egalement possible d'utiliser un fragment externe
de fichier Makefile pour d\('efinir correctement toutes les variables que
\&\fBdpkg-architecture\fR peut fournir :
.Sp
.Vb 1
\& include /usr/share/dpkg/architecture.mk
\&
\& ifeq ($(DEB_HOST_ARCH),alpha)
\&  [...]
\& endif
.Ve
.PP
Dans tous les cas, il ne faut jamais utiliser \fBdpkg \-\-print\-architecture\fR
pour r\('ecup\('erer les informations relatives \(`a l'architecture pendant la
construction d'un paquet.
.SH "ENVIRONNEMENT"
.IX Header "ENVIRONNEMENT"
.IP "\fB\s-1DPKG_DATADIR\s0\fR" 4
.IX Item "DPKG_DATADIR"
Si cette variable est d\('efinie, elle sera utilis\('ee comme r\('epertoire de
donn\('ees de \fBdpkg\fR o\(`u sont plac\('ees les tables d'architecture (depuis
dpkg 1.14.17). Par d\('efaut \(Fo/usr/share/dpkg\(Fc.
.IP "\fB\s-1DPKG_COLORS\s0\fR" 4
.IX Item "DPKG_COLORS"
D\('efinit le mode de couleur (depuis dpkg 1.18.5). Les valeurs actuellement
accept\('ees sont \fBauto\fR (par d\('efaut), \fBalways\fR et \fBnever\fR.
.IP "\fB\s-1DPKG_NLS\s0\fR" 4
.IX Item "DPKG_NLS"
Si cette variable est d\('efinie, elle sera utilis\('ee pour d\('ecider l'activation
de la prise en charge des langues (\s-1NLS\s0 \(en Native Language Support), connu
aussi comme la gestion de l'internationalisation (ou i18n) (depuis
dpkg 1.19.0). Les valeurs permises sont : \fB0\fR et \fB1\fR (par d\('efaut).
.SH "NOTES"
.IX Header "NOTES"
Tous les noms de commandes et d'options longs ne sont disponibles qu'\(`a
partir de dpkg 1.17.17.
.SH "VOIR AUSSI"
.IX Header "VOIR AUSSI"
\&\fBdpkg-buildpackage\fR(1).
.SH "TRADUCTION"
.IX Header "TRADUCTION"
Ariel \s-1VARDI\s0 <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas Fran\(,cois, 2006.
Veuillez signaler toute erreur \(`a <debian\-l10n\-french@lists.debian.org>.
