
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOM

dpkg-buildpackage - Construire depuis les sources des paquets binaires ou sources

=head1 SYNOPSIS

B<dpkg-buildpackage> [I<option>...]

=head1 DESCRIPTION

B<dpkg-buildpackage> est un programme qui permet d'automatiser la construction d'un paquet Debian. Il comporte les étapes S<suivantes :>

=over 

=item B<1.>

Préparation de l'environnement de compilation par positionnement de diverses variables d'environnement (voir B<VARIABLES D'ENVIRONNEMENT>), exécution du point d'entrée B<init> et appel de B<dpkg-source --before-build> (sauf si B<-T> ou B<--target> ont été utilisés).

=item B<2.>

Contrôle des dépendances de construction et des conflits de construction (non effectué si B<-d> ou B<--no-check-builddeps> sont utilisés).

=item B<3.>

Si une ou plusieurs cibles particulières ont été indiquées avec les options B<-T> ou B<--target>, appel de ces cibles et arrêt. Dans le cas contraire, exécution du point d'entrée B<preclean> et appel de B<fakeroot debian/rules clean> pour nettoyage de l'arborescence source (sauf si B<-nc> ou B<--no-pre-clean> ont été utilisés).

=item B<4.>

Exécution du point d'entrée B<source> et appel de B<dpkg-source -b> pour créer le paquet source (si une construction B<source> a été demandée avec B<--build> ou des options équivalentes).

=item B<5.>

Exécution du point d'entrée B<build> et appel de B<debian/rules> I<build-target>, puis exécution du point d'entrée B<binary> suivie de B<fakeroot debian/rules> I<binary-target> (sauf si une construction source seule a été demandée avec B<--build=source> ou des options équivalentes). Noter que I<build-target> et I<binary-target> sont soit B<build> et B<binary> (cas par défaut, ou si une construction B<any> et B<all> a été demandée avec B<--build> ou des options équivalentes), soit B<build-arch> et B<binary-arch> (si une construction B<any> et pas B<all> a été demandée avec B<--build> ou des options équivalentes), soit B<build-indep> et B<binary-indep> (si une construction B<all> et pas B<any> a été demandée avec B<--build> ou des options équivalentes).

=item B<6.>

Exécution du point d'entrée B<buildinfo> et appel de B<dpkg-genbuildinfo> pour créer un fichier B<.buildinfo>. De nombreuses options de B<dpkg-buildpackage> sont passées à B<dpkg-genbuildinfo>.

=item B<7.>

Exécution du point d'entrée B<changes> et appel de B<dpkg-genchanges> pour créer un fichier B<.changes>. Le nom du fichier B<.changes> dépendra du type de construction et sera aussi spécifique que nécessaire mais pas plus ; pour une construction qui inclut B<any>, le nom sera I<nom-de-source>B<_>I<version-binaire>B<_>I<architecture>B<.changes>, ou pour une construction qui inclut B<all>, le nom sera I<nom-de-source>B<_>I<version-binaire>B<_>B<all.changes>, ou pour une construction qui inclut B<source>, le nom sera I<nom-de-source>B<_>I<version-source>B<_>B<sources.changes>. De nombreuses options de B<dpkg-buildpackage> sont passées à B<dpkg-genchanges>.

=item B<8.>

Exécution du point d'entrée B<postclean> et si B<-tc> ou B<--post-clean> sont utilisés, appel de B<fakeroot debian/rules clean> à nouveau.

=item B<9.>

Appel de B<dpkg-source --after-build>.

=item B<10.>

Exécution du point d'entrée B<check> et appel d'un contrôleur de paquet pour le fichier B<.changes> (dans le cas où une commande est spécifiée dans B<DEB_CHECK_COMMAND> ou avec B<--check-command>).

=item B<11.>

Exécution du point d'entrée B<sign> et signature avec le dorsal OpenPGP (à condition que ce ne soit pas une construction pour UNRELEASED, ou si B<--no-sign> est spécifié), pour signature des fichiers B<.dsc> (sauf si B<-us> ou si B<--unsigned-source> sont spécifiés), B<.buildinfo> (sauf si B<-ui>, B<--unsigned-buildinfo>, B<-uc> ou B<--unsigned-changes> sont spécifiés) et B<.changes> (sauf si B<-uc> ou B<--unsigned-changes> sont spécifiés).

=item B<12.>

Exécution du point d'entrée B<done>.

=back

=head1 OPTIONS

Toutes les options longues peuvent être spécifiées  à la fois sur la ligne de commande et dans les fichiers de configuration utilisateur et de système B<dpkg-buildpackage>. Chaque ligne du fichier de configuration est soit une option (identique à une option en ligne de commande mais sans tiret), soit un commentaire (si elle commence par S<« B<#> »).>

=over 

=item B<--build=>I<type>

Indique le I<type> de construction à partir d'une liste de composants séparés par des virgules (depuis S<dpkg 1.18.5).> Tous les composants indiqués sont combinés pour choisir l'unique type de construction à utiliser, ce qui implique qu'une seule construction est exécuté avec la génération d'un seul fichier F<.changes>. Passé à B<dpkg-genchanges>.

Les valeurs autorisées S<sont :>

=over 

=item B<source>

Construit le paquet source.

S<B<Note :>> quand cette valeur est utilisée toute seule et si ce que vous voulez est seulement (re)construire le paquet source à partir d'une arborescence des sources propre, l'utilisation directe de B<dpkg-source> est toujours une meilleure option dans la mesure où cela ne demande pas l'installation de dépendances de construction qui sont sinon nécessaires pour pouvoir appeler la cible B<clean>.

=item B<any>

Construit les paquets binaires spécifiques à l'architecture.

=item B<all>

Construit les paquets binaires indépendants de l'architecture.

=item B<binary>

Construit les paquets binaires particuliers et indépendants de l'architecture. C'est un alias de B<any,all>.

=item B<full>

Construction complète. C'est un alias de B<source,any,all>, et il est identique au cas par défaut où aucune option de construction n'est indiquée.

=back

=item B<-g>

Équivalent de B<--build=source,all> (depuis S<dpkg 1.17.11).>

=item B<-G>

Équivalent de B<--build=source,any> (depuis S<dpkg 1.17.11).>

=item B<-b>

Équivalent de B<--build=binary> ou B<--build=any,all>.

=item B<-B>

Équivalent de B<--build=any>

=item B<-A>

Équivalent de B<--build=all>.

=item B<-S>

Équivalent à B<--build=source>.

=item B<-F>

Équivalent de B<--build=full>, B<--build=source,binary> ou B<--build=source,any,all> (depuis S<dpkg 1.15.8).>

=item B<--target=>I<cible>[,...]

=item B<--target> I<cible>[,...]

=item B<-T>, B<--rules-target=>I<cible>[,...]

Appelle B<debian/rules> I<cible> une fois par cible spécifiée, après avoir mis en place l'environnement de construction (sauf pour appeler B<dpkg-source --before-build>), puis interrompt le processus de construction (depuis S<dpkg 1.15.0,> option longue depuis S<dpkg 1.18.8,> pris en charge de multiples cibles depuis S<dpkg 1.18.16).> Si B<--as-root> est également utilisé, la commande sera exécutée avec les privilèges du superutilisateur (voir B<--root-command>). Noter que les cibles connues dont l'exécution par root est imposée n'ont pas besoin de cette option (c'est-à-dire les cibles B<clean>, B<binary>, B<binary-arch> et B<binary-indep>).

=item B<--as-root>

N'est utile qu'avec B<--target> (depuis S<dpkg 1.15.0).> Impose d'exécuter la cible avec les privilèges du superutilisateur.

=item B<-si>

=item B<-sa>

=item B<-sd>

=item B<-v>I<version>

=item B<-C>I<description-des-changements>

=item B<-m>I<adresse-du-responsable>

=item B<-e>I<adresse-du-responsable>

Passé tel quel à B<dpkg-genchanges>. Voir sa page de manuel.

=item B<--build-by=>I<adresse-du-responsable>

=item B<--source-by=>I<adresse-du-responsable> (depuis S<dpkg 1.21.10)>

Passé comme B<-m> à B<dpkg-genchanges>. Voir sa page de manuel.

=item B<--release-by=>I<adresse-du-responsable>

=item B<--changed-by=>I<adresse-du-responsable> (depuis S<dpkg 1.21.10)>

Passé comme B<-e> à B<dpkg-genchanges>. Voir sa page de manuel.

=item B<-a>, B<--host-arch> I<architecture>

Précise l'architecture Debian pour laquelle on construit (option longue depuis S<dpkg 1.17.17).> L'architecture de la machine sur laquelle on construit est automatiquement déterminée ; c'est aussi l'architecture par défaut de la machine hôte.

=item B<-t>, B<--host-type> I<type-de-système-gnu>

Précise le type de système GNU pour lequel on construit (option longue depuis S<dpkg 1.17.17).> Il peut être utilisé à la place de B<--host-arch> ou en tant que complément afin de remplacer le type de système GNU par défaut de l'architecture Debian hôte.

=item B<--target-arch> I<architecture>

Précise l'architecture Debian pour laquelle les binaires compilés vont construire (depuis S<dpkg 1.17.17).> La valeur par défaut est l'architecture de la machine hôte.

=item B<--target-type> I<type-de-système-gnu>

Précise le type de système GNU pour lequel les binaires compilés vont construire (depuis S<dpkg 1.17.17).> Il peut être utilisé à la place de B<--target-arch> ou en tant que complément afin de remplacer le type de système GNU par défaut de l'architecture Debian cible.

=item B<-P>, B<--build-profiles=>I<profil>[B<,>...]

Précise le ou les profils que l'on construit, sous forme d'une liste séparée par des virgules (depuis S<dpkg 1.17.2,> option longue depuis S<dpkg 1.18.8).> Le comportement par défaut est de construire pour un profil non spécifique. Cela les définit également (sous la forme d'une liste séparée par des espaces) en tant que variable d'environnement B<DEB_BUILD_PROFILES>, ce qui permet, par exemple, au fichiers B<debian/rules> d'utiliser cette information pour des constructions conditionnelles.

=item B<-j>, B<--jobs>[I<tâches>|B<auto>]

Spécifier le nombre de processus simultanés qui peuvent être exécutés (option longue depuis S<dpkg 1.18.8).> Le nombre de tâches correspondant au nombre de processeurs en ligne si B<auto> est indiquée (depuis S<dpkg 1.17.10),> ou un nombre illimité si I<jobs> n'est pas indiqué. Le comportement par défaut est B<auto> S<(depuis dpkg> 1.18.11) en mode non forcé (depuis S<dpkg 1.21.10)> et, à ce titre, il est plus sûr de l'utiliser avec tous les paquets y compris ceux qui ne sont pas sécurisés pour une construction parallèle. Fixer le nombre de tâches à B<1> rétablira une exécution sérielle.

L'option ajoutera B<parallel=>I<tâches> ou B<parallel> à la variable d'environnement B<DEB_BUILD_OPTIONS> ce qui permet aux fichiers debian/rules de choisir d'utiliser cette information pour leurs propres besoins. La valeur I<jobs> remplacera les options B<parallel=>I<tâches> ou B<parallel> dans la variable d'environnement B<DEB_BUILD_OPTIONS>. Notez que la valeur B<auto> sera remplacée par le nombre réel de processeurs actuellement actifs, et par conséquent ne sera pas transmise à aucun processus enfant. Si le nombre de processeurs en ligne ne peut pas être déduit, alors le code utilisera par défaut une exécution sérielle (depuis S<dpkg 1.18.15),> même si cela ne devrait arriver que sur des systèmes exotiques et non pris en charge.

=item B<-J>, B<--jobs-try>[=I<tâches>|B<auto>]

Cette option (depuis S<dpkg 1.18.2,> option longue depuis S<dpkg 1.18.8)> est équivalente à l'option B<-j> ci-dessus.

Dans la mesure où le comportement de B<-j> a changé dans S<dpkg 1.21.10> pour le mode S<« opt-in »,> vous pouvez utiliser cette option à la place si vous devez garantir des sémantiques dans toutes les versions de dpkg.

=item B<--jobs-force>[=I<tâches>|B<auto>]

Cette option (depuis S<dpkg 1.21.10)> est équivalente à l'option B<--jobs> sauf qu'elle active le mode parallèle forcé en ajoutant l'option B<make> B<-j> avec le nombre calculé de tâches parallèles à la variable d'environnement B<MAKEFLAGS>.

Cela devrait faire que les invocations ultérieures de make héritent de cette option, forçant donc une configuration parallèle de l'empaquetage (et potentiellement le système de construction amont s'il utilise L<make(1)>), sans tenir compte de la prise en compte des constructions parallèles, ce qui pourrait provoquer des échecs de constructions.

S<Note :> tout Makefile qui n'est pas sécurisé pour une utilisation parallèle devrait être considéré comme bogué. Ils devraient être soit rendus sécurisés pour une utilisation parallèle ou marqué comme non sûrs avec L<make(1)> B<.NOTPARALLEL> cible.

=item B<-D>, B<--check-builddeps>

Vérification des dépendances de constructions et des conflits ; se termine en cas de problèmes (option longue depuis S<dpkg 1.18.8).> C'est le comportement par défaut.

=item B<-d>, B<--no-check-builddeps>

Pas de vérification des dépendances de constructions et des conflits (option longue depuis S<dpkg 1.18.8).>

=item B<--ignore-builtin-builddeps>

Pas de vérification des dépendances de constructions internes et des conflits (depuis S<dpkg 1.18.2).> Il s'agit des dépendances de construction implicites spécifiques à la distribution habituellement requises dans un environnement de construction, c'est l'ensemble de paquets appelé Build-Essential.

=item B<--rules-requires-root>

Pas de prise en compte du champ B<Rules-Requires-Root>, retour à l'ancienne valeur par défaut (depuis S<dpkg 1.19.1).>

=item B<-nc>, B<--no-pre-clean>

Pas de nettoyage de l'arborescence des sources avant la construction (option longue depuis S<dpkg 1.18.8).> Implique B<-b> si aucune des options B<-F>, B<-g>, B<-G>, B<-B>, B<-A> ou B<-S> n'est utilisée). Implique B<-d> avec B<-S> (depuis S<dpkg 1.18.0).>

=item B<--pre-clean>

Nettoyage de l'arborescence des sources avant la construction (depuis dpkg 1.18.8). C'est le comportement par défaut.

=item B<-tc>, B<--post-clean>

Nettoyage de l'arborescence des sources (en utilisant I<commande-pour-obtenir-privilèges-de-root> B<debian/rules clean>) après la construction du paquet (option longue depuis S<dpkg 1.18.8).>

=item B<--no-post-clean>

Pas de nettoyage de l'arborescence des sources après la construction du paquet (depuis S<dpkg 1.19.1).> C'est le comportement par défaut.

=item B<--sanitize-env>

Nettoyage de l'environnement de construction (depuis S<dpkg 1.20.0).> Cela remet à zéro ou supprime les variables d'environnement, umask et tous les autres attributs de processus qui pourrait autrement affecter défavorablement la construction des paquets. Parce que le point d'entrée officiel pour la construction des paquets est B<debian/rules>, les paquets ne peuvent pas dépendre du fait que ces réglages sont présents et donc devraient fonctionner même quand ils ne le sont pas. Ce qu'il faut nettoyer est propre au fabricant.

=item B<-r>, B<--root-command=>I<commande-pour-obtenir-privilèges-de-root>

Quand B<dpkg-buildpackage> doit exécuter une partie du processus de construction en tant que root, il préfixe la commande exécutée par I<commande-pour-obtenir-privilèges-de-root>, si une a été spécifiée (option longue depuis S<dpkg 1.18.8).> Si ce n'est pas le cas alors B<fakeroot> est utilisé par défaut. I<commande-pour-obtenir-privilèges-de-root> doit débuter par le nom d'un programme accessible depuis B<PATH> et avoir comme arguments le nom de la commande réelle avec les arguments qu'elle doit prendre. I<commande-pour-obtenir-privilèges-de-root> peut recevoir des paramètres (ils doivent être séparés par des espaces) mais aucun métacaractère de l'interpréteur de commandes. Classiquement I<commande-pour-obtenir-privilèges-de-root> devrait être B<fakeroot>, B<sudo>, B<super> ou B<really>. B<su> ne va pas, puisque ce programme peut uniquement utiliser l'interpréteur de commandes de l'utilisateur avec l'option B<-c> au lieu de passer directement les arguments à la commande qui doit être exécutée.

=item B<-R>, B<--rules-file=>I<fichier-rules>

Construire un paquet Debian implique généralement l'invocation de B<debian/rules> comme une commande avec de nombreux paramètres standard (depuis dpkg 1.14.17, option longue depuis S<dpkg 1.18.8).> Avec cette option, il est possible d'utiliser un autre programme à utiliser pour la construction de paquet (ainsi que ses paramètres séparés par des espaces). Une autre utilisation possible est d'exécuter le fichier rules standard avec un autre programme make (par exemple en utilisant B</usr/local/bin/make -f debian/rules> comme I<fichier-rules>).

=item B<--check-command=>I<commande-contrôleur>

Commande utilisée pour vérifier le fichier B<.changes> lui-même et tout objet construit référencé dans le fichier (depuis S<dpkg 1.17.6).> La commande peut recevoir comme argument le nom de chemin de B<.changes>. Cette commande est en général B<lintian>.

=item B<--check-option=>I<opt>

Passer l'option I<opt> à I<commande-contrôleur> indiquée par B<DEB_CHECK_COMMAND> ou B<--check-command> (depuis S<dpkg 1.17.6).> Peut être utilisé plusieurs fois.

=item B<--hook->I<nom-de-point-d'entrée>B<=>I<commande-de-point-d'entrée>

Définir le code spécifié de l'interpréteur de commandes I<commande-de-point-d'entrée> comme point d'entrée I<nom-de-point-d'entré> qui sera exécuté aux moments spécifiés par les étapes d'exécution (depuis S<dpkg 1.17.6).> Les points d'entrée seront toujours exécutés même si l'action suivante n'est pas effectuée (sauf pour le point d'entrée B<binary>). Tous les points d'entrée seront exécutés dans le répertoire source dépaqueté.

S<B<Note> :> les points d'entrée sont susceptibles d'affecter le processus de construction et provoquer des échecs de construction si leurs commandes échouent, donc attention aux conséquences inattendues.

Les I<nom-de-point-d'entrée> actuellement pris en charge S<sont :>

B<init preclean source build binary buildinfo changes postclean check sign done>

La I<commande-point-d'entrée> gère les chaînes de formatage de substitution suivantes, qui lui sont appliquées avant S<exécution :>

=over 

=item B<%%>

Un caractère % seul.

=item B<%a>

Une valeur booléenne (0 ou 1) qui indique si l'action suivante est effectuée.

=item B<%p>

Nom du paquet source.

=item B<%v>

La version du paquet source.

=item B<%s>

La version du paquet source (sans S<l'« epoch »).>

=item B<%u>

La version amont.

=back

=item B<--buildinfo-file=>I<fichier>

Définir le I<fichier> pour le fichier B<.buildinfo> généré (depuis S<dpkg 1.21.0).>

=item B<--buildinfo-option=>I<opt>

Passer l'option I<opt> à B<dpkg-genbuildinfo> (depuis S<dpkg 1.18.11).> Peut être utilisé plusieurs fois.

=item B<--sign-backend=>I<dorsal-de-signature>

Préciser une interface de dorsal OpenPGP à utiliser lors de l'invocation de la commande I<sign-command> (depuis S<dpkg 1.21.10).>

C'est B<auto> par défaut, où le meilleur dorsal présent disponible sera utilisé. Les dorsaux spécifiques à OpenPGP pris en charge sont par ordre de S<préférence :>

=over 2

=item B<sop> (toute implémentation conforme à Stateless OpenPGP)

=item B<sq> (de Sequoia-PGP)

=item B<gpg> (de GnuPG)

=back

=item B<-p>, B<--sign-command=>I<commande-de-signature>

Quand B<dpkg-buildpackage> doit exécuter une commande de dorsal OpenPGP pour signer un fichier source de contrôle (B<.dsc>) ou un fichier B<.changes>, il exécute I<commande-de-signature> (recherchée dans B<PATH> si nécessaire) au lieu de la commande de dorsal par défaut ou détectée automatiquement (option longue depuis S<dpkg 1.18.1).> I<Commande-de-signature> reçoit tous les paramètres définis par le B<--sign-backend>. I<commande-de-signature> ne devra pas contenir d'espace ni aucun métacaractère de l'interpréteur de commandes.

=item B<-k>, B<--sign-keyid=>I<identifiant-clé>

=item B<--sign-key=>I<identifiant-clé>

Préciser un identifiant de clé OpenPGP (soit une empreinte soit un identifiant d'utilisateur) pour la clé secrète à utiliser lors de la signature des paquets (B<--sign-key> depuis S<dpkg 1.18.8,> B<--sign-keyid> depuis S<dpkg 1.21.10).>

=item B<--sign-key=>I<fichier-de-clé>

Préciser un I<fichier-de-clé> OpenPGP contenant la clé secrète à utiliser pour la signature des paquets (depuis S<dpkg 1.21.10).>

S<Note :> pour des raisons de sécurité, il est préférable que le I<fichier-de-clé> soit verrouillé par un mot de passe.

=item B<-us>, B<--unsigned-source>

Ne pas signer le paquet source (option longue depuis S<dpkg 1.18.8).>

=item B<-ui>, B<--unsigned-buildinfo>

Ne pas signer le fichier B<.buildinfo> (depuis S<dpkg 1.18.19).>

=item B<-uc>, B<--unsigned-changes>

Ne signer ni le fichier B<.buildinfo>, ni le fichier B<.changes> (option longue depuis S<dpkg 1.18.8).>

=item B<--no-sign>

Aucune signature de fichier, y compris du paquet source, du fichier B<.buildinfo> et du fichier B<.changes> (depuis S<dpkg 1.18.20).>

=item B<--force-sign>

Forcer la signature des fichiers produits (depuis S<dpkg 1.17.0)> indépendamment de B<-us>, B<--unsigned-source>, B<-ui>, B<--unsigned-buildinfo>, B<-uc>, B<--unsigned-changes> ou d'autres heuristiques internes.

=item B<-sn>

=item B<-ss>

=item B<-sA>

=item B<-sk>

=item B<-su>

=item B<-sr>

=item B<-sK>

=item B<-sU>

=item B<-sR>

=item B<-i>, B<--diff-ignore>[=I<expression-rationnelle>]

=item B<-I>, B<--tar-ignore>[=I<motif>]

=item B<-z>, B<--compression-level>=I<niveau>

=item B<-Z>, B<--compression>=I<compression>

Chaîne passée telle quelle à B<dpkg-source>. Voir la page de manuel correspondante.

=item B<--source-option=>I<opt>

Passer l'option I<opt> à B<dpkg-source> (depuis S<dpkg 1.15.6).> Peut être utilisé plusieurs fois.

=item B<--changes-file=>I<fichier>

Définir le I<fichier> pour le fichier B<.changes> généré (depuis S<dpkg 1.21.0).>

=item B<--changes-option=>I<opt>

Passer l'option I<opt> à B<dpkg-genchanges> (depuis S<dpkg 1.15.6).> Peut être utilisé plusieurs fois.

=item B<--admindir>=I<répertoire>

=item B<--admindir> I<rép>

Changer l'endroit où se trouve la base de données de B<dpkg> (depuis dpkg 1.14.0). Par défaut, c'est I<%ADMINDIR%>.

=item B<-?>, B<--help>

Afficher un message d'aide puis quitter.

=item B<--version>

Afficher le numéro de version puis quitter.

=back

=head1 ENVIRONNEMENT

=head2 Environnement externe

=over 

=item B<DEB_CHECK_COMMAND>

Si cette option est utilisée, elle le sera comme commande pour contrôler le fichier B<.changes> (depuis S<dpkg 1.17.6).> Remplacée par l'option B<--check-command>.

=item B<DEB_SIGN_KEYID>

Si cette option est utilisée, elle le sera pour la signature des fichiers B<.changes>, B<.buildinfo> et B<.dsc> (depuis S<dpkg 1.17.2).> Remplacée par l'option B<--sign-key>.

=item B<DEB_SIGN_KEYFILE>

Si cette option est utilisée, elle le sera pour la signature des fichiers B<.changes>, B<.buildinfo> et B<.dsc> (depuis S<dpkg 1.21.10).> Remplacée par l'option B<--sign-keyfile>.

=item B<DEB_BUILD_OPTIONS>

Si cette option est utilisée, elle contiendra une liste séparée par des espaces d'options qui pourraient affecter le processus de construction dans I<debian/rules> et le comportement de certaines commandes de dpkg.

La variable B<DEB_CHECK_COMMAND> sera ignorée avec B<nocheck>. Avec B<parallel=>I<N> les tâches parallèles seront fixées à I<N>, remplacée par l'option B<--jobs-try>.

=item B<DEB_BUILD_PROFILES>

Si cette option est utilisée, elle sera utilisée comme profil(s) de construction actif(s) pour le paquet à construire (depuis S<dpkg 1.17.2).> C'est une liste séparée par des espaces de noms de profil. Cette option est outrepassée par l'option B<-P>.

=item B<DPKG_COLORS>

Définit le mode de couleur (depuis S<dpkg 1.18.5).> Les valeurs actuellement acceptées sont B<auto> (par défaut), B<always> et B<never>.

=item B<DPKG_NLS>

Si cette variable est définie, elle sera utilisée pour décider l'activation de la prise en charge des langues (NLS – Native Language Support), connu aussi comme la gestion de l'internationalisation (ou i18n) (depuis S<dpkg 1.19.0).> Les valeurs permises S<sont :> B<0> et B<1> (par défaut).

=back

=head2 Environnement interne

Même si B<dpkg-buildpackage> exporte certaines variables, B<debian/rules> ne doit pas dépendre de leur présence, mais doit préférablement utiliser l'interface correspondante pour retrouver les valeurs nécessaires, parce que ce fichier est le point d'entrée principal pour la construction des paquets et son exécution autonome devrait être prise en charge.

=over 

=item B<DEB_BUILD_*>

=item B<DEB_HOST_*>

=item B<DEB_TARGET_*>

B<dpkg-architecture> est lancé avec les paramètres de B<-a> et B<-t>. Toute variable retournée par l'option B<-s> est intégrée dans l'environnement de construction.

=item B<DEB_RULES_REQUIRES_ROOT>

Cette variable est fixée à la valeur obtenue du champ B<Rules-Requires-Root> ou de la ligne de commande. Lorsqu'elle est configurée, ce sera une valeur valable pour le champ B<Rules-Requires-Root>. Elle est utilisée pour indiquer à B<debian/rules> si la spécification B<rootless-builds.txt> est prise en charge.

=item B<DEB_GAIN_ROOT_CMD>

Cette valeur est fixée à I<commande-pour-obtenir-privilèges-de-root> si le champ B<Rules-Requires-Root> est fixé à une valeur différente de B<no> ou B<binary-targets>.

=item B<SOURCE_DATE_EPOCH>

Cette valeur est fixée à l'horodatage d'Unix depuis S<« l'epoch »> de la dernière entrée de I<debian/changelog>, si elle n'a pas déjà été définie.

=back

=head1 FICHIERS

=over 

=item I<%PKGCONFDIR%/buildpackage.conf>

Fichier de configuration pour l'ensemble du système

=item I<$XDG_CONFIG_HOME/dpkg/buildpackage.conf> ou

=item I<$HOME/.config/dpkg/buildpackage.conf>

Fichier de configuration propre à l'utilisateur

=back

=head1 NOTES

=head2 Les drapeaux de compilation ne sont plus exportés.

Entre les versions 1.14.17 et 1.16.1, B<dpkg-buildpackage> exportait les drapeaux de compilation (B<CFLAGS>, B<CXXFLAGS>, B<FFLAGS>, B<CPPFLAGS> et B<LDFLAGS>) avec les valeurs que renvoyait B<dpkg-buildflags>. Cela n'est plus le cas.

=head2 Cibles construites par défaut

B<dpkg-buildpackage> utilise les cibles B<build-arch> et B<build-indep> depuis S<dpkg 1.16.2.> Ces cibles sont donc obligatoires. Cependant, pour éviter de casser les paquets existants et faciliter la transition, si le paquet source ne construit pas à la fois les paquets binaires indépendants et dépendants de l'architecture (depuis S<dpkg 1.18.8),> la cible B<build> sera utilisée par défaut si B<make -f debian/rules -qn> I<build-target> renvoie B<2> comme code de retour.

=head1 BOGUES

On devrait pouvoir mettre des espaces et des métacaractères du shell et les arguments initiaux de I<commande-pour-obtenir-privilèges-de-root> et I<commande-de-signature>.

=head1 VOIR AUSSI

I<%PKGDOCDIR%/spec/rootless-builds.txt>, B<dpkg-source>(1), B<dpkg-architecture>(1), B<dpkg-buildflags>(1), B<dpkg-genbuildinfo>(1), B<dpkg-genchanges>(1), B<fakeroot>(1), B<lintian>(1), L<https://datatracker.ietf.org/doc/draft-dkg-openpgp-stateless-cli/>, B<sq>(1), B<gpg>(1).


=head1 TRADUCTION

Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian-l10n-french@lists.debian.org>.
