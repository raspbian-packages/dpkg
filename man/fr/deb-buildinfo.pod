
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOM

deb-buildinfo - Format des fichiers d'informations de construction de Debian

=head1 SYNOPSIS

I<nom-du-fichier>B<.buildinfo>

=head1 DESCRIPTION

Chaque construction de paquet source Debian peut enregistrer les informations de construction dans un fichier de contrôle B<.buildinfo> qui contient un certain nombre de champs au format L<deb822(5)>.

Chaque champ commence par une étiquette, telle que B<Source> ou B<Binary> (la casse n'importe pas), suivie d'un S<« : »> et du contenu du champ (sensible à la casse à moins que cela ne soit stipulé autrement). Les champs sont séparés seulement par des étiquettes de champ. En d'autres termes, le contenu d'un champ peut s'étendre sur plusieurs lignes, mais les outils d'installation joindront en général les lignes pendant le traitement du contenu du champ (sauf dans le cas des champs à lignes multiples B<Binary-Only-Changes>, B<Installed-Build-Depends>, B<Environment>, B<Checksums-Md5>, B<Checksums-Sha1> et B<Checksums-Sha256>, voir ci-dessous).

Les données de contrôle pourraient être incluses dans une signature OpenPGP S<« ASCII> S<Armored »,> comme spécifié dans la RFC4880.

The name of the B<.buildinfo> file will depend on the type of build and will be as specific as necessary but not more; the name will be:

=over 

=item I<source-name>B<_>I<binary-version>B<_>I<arch>B<.buildinfo>

for a build that includes B<any>

=item I<source-name>B<_>I<binary-version>B<_>B<all.buildinfo>

otherwise for a build that includes B<all>

=item I<source-name>B<_>I<source-version>B<_>B<source.buildinfo>

otherwise for a build that includes B<source>

=back

=head1 LES CHAMPS

=over 

=item B<Format:> I<version-format> (requis)

La valeur de ce champ déclare la version du format du fichier. La syntaxe de la valeur du champ est un numéro de version avec un composant majeur et mineur. Les modifications incompatibles avec les versions précédentes du format incrémenteront la version majeure, tandis que les modifications compatibles (telles que les ajouts de champ) incrémenteront la version mineure. La version de format actuelle est B<1.0>.

=item B<Source:> I<nom-source> [B<(>I<version-source>B<)>] (requis)

Le nom du paquet source. Si la version du source diffère de la version binaire, alors le I<nom-source> sera suivi par une I<version-source> entre parenthèses. Cela peut arriver quand la construction concerne un envoi seulement binaire NMU S<(« non-maintainer> S<upload »).>

=item B<Binary:> I<liste-paquets-binaires> (requis selon le contexte)

Ce champ coupé est une liste de paquets binaires construits séparés par des espaces. Si la construction ne concerne que les sources, le champ est omis (depuis S<dpkg 1.20.0).>

=item B<Architecture:> I<liste-architectures> (requis)

Ce champ, séparé par des espaces, liste les architectures des fichiers actuellement en construction. Voici quelques architectures S<habituelles :> B<amd64>, B<armel>, B<i386>, etc. Remarquez que l'option B<all> signifie que le paquet est indépendant de toute architecture. Si le source du paquet est aussi en construction, l'entrée spéciale B<source> est aussi présente. Les architectures joker ne doivent jamais être présentes dans la liste.

=item B<Version:> I<chaîne-de-la-version> (requis)

C'est classiquement le numéro de version du paquet d'origine dans la forme choisie par l'auteur du programme. Il peut y avoir aussi un numéro de révision Debian (pour les paquets non natifs). Le format exact et l'algorithme de tri sont décrits dans B<deb-version>(7).

=item B<Binary-Only-Changes:>

=item S< >I<entrées-du-changelog>

Ce champ à lignes multiples contient le texte concaténé des entrées de changelog pour un envoi seulement binaire (binNMU), si c'est le cas. Pour faire de ce champ un champ à lignes multiples valable, les lignes vides sont remplacées par un point S<« B<.> »> et toutes les lignes sont indentées par une seule espace. Le contenu exact dépend du format du changelog.

=item B<Checksums-Md5:> (requis)

=item B<Checksums-Sha1:> (requis)

=item B<Checksums-Sha256:> (requis)

=item S< >I<somme-de-contrôle> I<taille> I<nom-du-fichier>

Ces champs à lignes multiples contiennent la liste des fichiers avec la somme de contrôle et la taille de chacun. Ces champs ont la même syntaxe et ne diffèrent que par l'algorithme de somme de contrôle S<utilisé :> MD5 pour B<Checksums-Md5>, SHA-1 pour B<Checksums-Sha1> et SHA-256 pour B<Checksums-Sha256>.

La première ligne de la valeur du champ (la partie sur la même ligne que le nom du champ suivi par deux-points) est toujours vide. Le contenu du champ est exprimé par des lignes de continuation, une ligne par fichier. Chaque ligne consiste en des entrées séparées par des espaces décrivant le S<fichier :la> somme de contrôle, la taille du fichier et le nom du fichier.

Ces champs listent tous les fichiers qui composent la construction.

=item B<Build-Origin:> I<nom>

Nom de la distribution dont ce paquet provient.

=item B<Build-Architecture:> I<arch> (requis)

L'architecture Debian pour l'installation des paquets en construction. Les architectures habituelles sont B<amd64>, B<armel>, B<i386>, etc.

=item B<Build-Date:> I<date-construction>

La date à laquelle le paquet a été construit. Elle peut être au même format que la date dans les entrées de B<deb-changelog>(5).

=item B<Build-Kernel-Version:> I<version-du-noyau-de-construction>

La publication et la version (dans un format non spécifié) du noyau exécuté dans le système de construction. Ce champ va seulement être présent si le constructeur l'a demandé explicitement, pour éviter de révéler des informations potentiellement sensibles.

=item B<Build-Path:> I<chemin-de-construction>

Le chemin de construction absolu qui correspond à l'arborescence des sources dépaquetée. Ce champ va seulement être présent si le distributeur l'a autorisé grâce à une recherche de motif pour éviter de révéler des informations potentiellement sensibles.

Dans Debian et ses dérivés, seuls les chemins de construction débutant par I</build/> émettront ce champ.

=item B<Build-Tainted-By:>

=item S< >I<liste-des-raisons-de-souillure>

Ce champ coupé est une liste, séparée par des espaces, non exhaustive des étiquettes de raison (formées de caractères alphanumériques et de tirets) qui définissent pourquoi la construction actuelle a été souillée (depuis S<dpkg 1.19.5).>

Dans Debian et ses dérivées, les étiquettes de raisons suivantes peuvent être émises.

=over 

=item B<merged-usr-via-aliased-dirs>

Le système possède un I</usr> fusionné au moyen de répertoires alias (anciennement connus sous le nom de B<merged-usr-via-symlinks> - fusionné au moyen de liens symboliques). Cela peut tromper B<dpkg-query>, B<dpkg-statoverride>, B<dpkg-trigger>, B<update-alternatives> et tous les autres outils qui utilisent les noms de chemin comme clés de leurs bases de données, parce que cela crée des problèmes d'alias du système de fichiers, et perturbe la compréhension du système de fichiers que B<dpkg> a enregistré dans sa base de données. Pour des systèmes construits qui codent en dur les noms de chemin vers des binaires ou des bibliothèques particuliers sur les objets produits, cela peut aussi produire des paquets qui seront incompatibles avec des systèmes de fichiers sans I</usr> fusionné.

=item B<usr-local-has-configs>

Le système a des fichiers de configuration dans I</usr/local/etc>.

=item B<usr-local-has-includes>

Le système a des fichiers d'en-tête dans I</usr/local/include>.

=item B<usr-local-has-programs>

Le système a des programmes dans I</usr/local/bin> ou I</usr/local/sbin>.

=item B<usr-local-has-libraries>

Le système a des bibliothèques statiques ou partagées dans I</usr/local/lib>.

=item B<can-execute-cross-built-programs>

Le système peut exécuter des programmes de construction croisée soit directement, soit au moyen d'une couche d'émulation.

depuis S<dpkg 1.21.10).>

=back

=item B<Installed-Build-Depends:> (requis)

=item S< >I<liste-paquets>

La liste des paquets installés et configurés que pourrait affecter le processus de construction du paquet.

La liste contient le nom de chaque paquet, éventuellement avec une qualification d'architecture pour celles différentes, avec une restriction de version précise, séparés par des virgules.

La liste inclut tous les paquets essentiels, les paquets listés dans les champs de contrôle des sources B<Build-Depends>, B<Build-Depends-Arch>, B<Build-Depends-Indep>, chaque dépendance interne spécifique au distributeur, et toutes leurs dépendances récursives. Dans Debian et ses dérivés, une dépendance interne est B<build-essential>.

Pour les dépendances provenant des champs de contrôle des sources, toutes les alternatives de dépendance et tous les fournisseurs de paquets virtuels dépendants seront inclus.

=item B<Environment:>

=item S< >I<liste-de-variables>

La liste des variables d'environnement qui sont connues pour affecter le processus de construction du paquet. Chaque variable d'environnement est suivie d'un signe égal S<(« = »)> et de la valeur de la variable protégée avec des guillemets doubles S<(« " »)> et des barres obliques inverses S<(« \\ »).>

=back

=head1 VOIR AUSSI

L<deb822(5)>, B<deb-changes>(5), B<deb-version>(7), B<dpkg-genbuildinfo>(1).


=head1 TRADUCTION

Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian-l10n-french@lists.debian.org>.
