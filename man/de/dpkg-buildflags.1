.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "dpkg-buildflags 1"
.TH dpkg-buildflags 1 "2020-08-02" "1.20.5" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "BEZEICHNUNG"
.IX Header "BEZEICHNUNG"
dpkg-buildflags \- liefert Bauschalter zum Einsatz beim Paketbau
.SH "\(:UBERSICHT"
.IX Header "\(:UBERSICHT"
\&\fBdpkg-buildflags\fR [\fIOption\fR â€¦] [\fIBefehl\fR]
.SH "BESCHREIBUNG"
.IX Header "BESCHREIBUNG"
\&\fBdpkg-buildflags\fR ist ein Werkzeug, das zum Abfragen der zu verwendenden
Kompilierungsschalter f\(:ur den Bau von Debian-Paketen eingesetzt wird.
.PP
Die Standardschalter werden vom Lieferanten definiert, sie k\(:onnen auf
mehrere Arten erweitert/\(:uberschrieben werden:
.IP "1." 4
systemweit mit \fB\f(CB%PKGCONFDIR\fB%/buildflags.conf\fR
.IP "2." 4
f\(:ur den aktuellen Benutzer mit \fB\f(CB$XDG_CONFIG_HOME\fB/dpkg/buildflags.conf\fR,
wobei \fB\f(CB$XDG_CONFIG_HOME\fB\fR standardm\(:a\(ssig auf \fB\f(CB$HOME\fB/.config\fR gesetzt ist
.IP "3." 4
tempor\(:ar durch den Benutzer mittels Umgebungsvariablen (siehe Abschnitt
\&\fB\s-1UMGEBUNG\s0\fR)
.IP "4." 4
dynamisch durch den Paketverwalter mittels Umgebungsvariablen, die \(:uber
\&\fBdebian/rules\fR gesetzt wurden (siehe Abschnitt \fB\s-1UMGEBUNG\s0\fR)
.PP
Die Konfigurationsdateien k\(:onnen vier Arten von Direktiven enthalten:
.IP "\fB\s-1SET\s0\fR \fISchalter Wert\fR" 4
.IX Item "SET Schalter Wert"
\(:Uberschreibt den Schalter namens \fISchalter\fR, um den Wert \fIWert\fR zu
erhalten.
.IP "\fB\s-1STRIP\s0\fR \fISchalter Wert\fR" 4
.IX Item "STRIP Schalter Wert"
Aus dem Schalter namens \fISchalter\fR alle in \fIWert\fR aufgef\(:uhrten Bauschalter
entfernen
.IP "\fB\s-1APPEND\s0\fR \fISchalter Wert\fR" 4
.IX Item "APPEND Schalter Wert"
Erweitert den Schalter namens \fISchalter\fR durch Anh\(:angen der in \fIWert\fR
angegebenen Optionen. Ein Leerzeichen wird dem angeh\(:angten Wert
vorangestellt, falls der derzeitige Wert nicht leer ist.
.IP "\fB\s-1PREPEND\s0\fR \fISchalter Wert\fR" 4
.IX Item "PREPEND Schalter Wert"
Erweitert den Schalter namens \fISchalter\fR durch Voranstellen der in \fIWert\fR
angegebenen Optionen. Ein Leerzeichen wird dem vorangestellten Wert
angeh\(:angt, falls der derzeitige Wert nicht leer ist.
.PP
Die Konfigurationsdateien k\(:onnen Kommentare in Zeilen enthalten, die mit
einer Raute (#) beginnen. Leere Zeilen werden auch ignoriert.
.SH "BEFEHLE"
.IX Header "BEFEHLE"
.IP "\fB\-\-dump\fR" 4
.IX Item "--dump"
Gibt auf der Standardausgabe alle Kompilierschalter und ihre Werte aus. Es
wird ein Schalter pro Zeile ausgegeben, wobei der Wert durch ein
Gleichheitszeichen (\(Bq\fISchalter\fR=\fIWert\fR\(lq) abgetrennt wird. Dies ist die
Standardaktion.
.IP "\fB\-\-list\fR" 4
.IX Item "--list"
Gibt die Liste der vom aktuellen Lieferanten unterst\(:utzten Schalter (einen
pro Zeile) aus. Lesen Sie den Abschnitt \fBUNTERST\(:UTZTE \s-1SCHALTER\s0\fR f\(:ur weitere
Informationen \(:uber sie.
.IP "\fB\-\-status\fR" 4
.IX Item "--status"
Zeigt alle Informationen an, die zum Verst\(:andnis des Verhaltens von
\&\fBdpkg-buildflags\fR n\(:utzlich sein k\(:onnen (seit Dpkg 1.16.5): relevante
Umgebungsvariablen, aktueller Lieferant, Zustand der Funktionsschalter. Auch
die entstehenden Compiler-Schalter mit ihrem Ursprung werden ausgegeben.
.Sp
Dies ist zur Ausf\(:uhrung in \fBdebian/rules\fR gedacht, so dass das Bauprotokoll
einen klaren Nachweis der verwandten Bauschalter enth\(:alt. Dies kann zur
Diagnose von Problemen in Zusammenhang mit diesen n\(:utzlich sein.
.IP "\fB\-\-export=\fR\fIFormat\fR" 4
.IX Item "--export=Format"
Gibt auf der Standardausgabe Befehle aus, die dazu verwandt werden k\(:onnen,
alle Kompilierschalter f\(:ur bestimmte Werkzeuge zu exportieren. Falls der
Wert von \fIFormat\fR nicht angegeben wird, wird \fBsh\fR angenommen. Nur
Kompilierschalter, die mit einem Gro\(ssbuchstaben beginnen, werden
aufgenommen. Bei allen anderen wird angenommen, dass sie f\(:ur die Umgebung
nicht geeignet sind. Unterst\(:utzte Formate:
.RS 4
.IP "\fBsh\fR" 4
.IX Item "sh"
Shell-Befehle, um alle Kompilierungsschalter in der Umgebung zu setzen und
zu exportieren. Die Schalterwerte werden maskiert, so dass die Ausgabe f\(:ur
Auswertung durch eine Shell bereit ist.
.IP "\fBcmdline\fR" 4
.IX Item "cmdline"
Argumente, die an die Befehlszeile eines Bauprogrammes \(:ubergeben werden, um
alle \(:Ubersetzungsschalter zu verwenden (seit Dpkg 1.17.0). Die Schalterwerte
werden in Shell-Syntax maskiert.
.IP "\fBconfigure\fR (konfiguriert)" 4
.IX Item "configure (konfiguriert)"
Dies ist ein historischer Alias f\(:ur \fBcmdline\fR.
.IP "\fBmake\fR" 4
.IX Item "make"
Make-Direktiven, um alle Kompilierungsschalter in der Umgebung zu setzen und
zu exportieren. Die Ausgabe kann in ein Make-Steuerdateifragment geschrieben
und mit einer \fBinclude\fR\-Direktive ausgewertet werden.
.RE
.RS 4
.RE
.IP "\fB\-\-get\fR \fISchalter\fR" 4
.IX Item "--get Schalter"
Gibt den Wert des Schalters auf der Standardausgabe aus. Beendet sich mit 0,
falls der Schalter bekannt ist, andernfalls mit 1.
.IP "\fB\-\-origin\fR \fISchalter\fR" 4
.IX Item "--origin Schalter"
Gibt den Ursprung des von \fB\-\-get\fR gelieferten Werts aus. Beendet sich mit
0, falls der Schalter bekannt ist, andernfalls mit 1. Der Ursprung kann
einer der folgenden Werte sein:
.RS 4
.IP "\fBvendor\fR" 4
.IX Item "vendor"
der urspr\(:unglich vom Lieferanten gesetzte Schalter wird zur\(:uckgeliefert
.IP "\fBsystem\fR" 4
.IX Item "system"
der Schalter wurde durch eine systemweite Konfiguration gesetzt/ver\(:andert
.IP "\fBuser\fR" 4
.IX Item "user"
der Schalter wurde durch eine benutzerspezifische Konfiguration
gesetzt/ver\(:andert
.IP "\fBenv\fR" 4
.IX Item "env"
der Schalter wurde durch eine umgebungsspezifische Konfiguration
gesetzt/ver\(:andert
.RE
.RS 4
.RE
.IP "\fB\-\-query\fR" 4
.IX Item "--query"
Alle Informationen anzeigen, die zur Erkl\(:arung des Verhaltens des Programms
hilfreich sein k\(:onnten: aktueller Lieferant, relevante Umgebungsvariablen,
Funktionalit\(:atsbereiche, Zustand der Funktionsschalter und die
Compiler-Schalter mit ihrem Ursprung (seit Dpkg 1.19.0).
.Sp
Zum Beispiel:
.Sp
.Vb 3
\& Vendor: Debian
\& Environment:
\&  DEB_CFLAGS_SET=\-O0 \-Wall
\&
\& Area: qa
\& Features:
\&  bug=no
\&  canary=no
\&
\& Area: reproducible
\& Features:
\&  timeless=no
\&
\& Flag: CFLAGS
\& Value: \-O0 \-Wall
\& Origin: env
\&
\& Flag: CPPFLAGS
\& Value: \-D_FORTIFY_SOURCE=2
\& Origin: vendor
.Ve
.IP "\fB\-\-query\-features\fR \fIBereich\fR" 4
.IX Item "--query-features Bereich"
Gibt die Funktionalit\(:aten, die f\(:ur den \(:ubergebenen Bereich aktiviert sind,
aus (seit Dpkg 1.16.2). Die einzigen unter Debian und abgeleiteten
Distributionen derzeit erkannten Bereiche sind \fBfuture\fR, \fBqa\fR,
\&\fBreproducible\fR, \fBsanitize\fR und \fBhardening\fR. Lesen Sie den Abschnitt
\&\fBFUNKTIONALIT\(:ATSBEREICHE\fR f\(:ur weitere Details. Beendet sich mit 0, falls
der Bereich bekannt ist, andernfalls mit 1.
.Sp
Die Ausgabe ist im RFC822\-Format, mit einem Abschnitt pro
Funktionalit\(:at. Beispiel:
.Sp
.Vb 2
\& Feature: pie
\& Enabled: yes
\&
\& Feature: stackprotector
\& Enabled: yes
.Ve
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Zeigt einen Hinweis zum Aufruf und beendet das Programm.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Gibt die Version aus und beendet das Programm.
.SH "UNTERST\(:UTZTE SCHALTER"
.IX Header "UNTERST\(:UTZTE SCHALTER"
.IP "\fB\s-1CFLAGS\s0\fR" 4
.IX Item "CFLAGS"
Optionen f\(:ur den C\-Compiler. Der vom Lieferanten gesetzte Standardwert
enth\(:alt \fI\-g\fR und die Standard-Optimierungsstufe (normalerweise \fI\-O2\fR oder
\&\fB\-O0\fR, falls die Umgebungsvariable \fB\s-1DEB_BUILD_OPTIONS\s0\fR \fInoopt\fR
definiert).
.IP "\fB\s-1CPPFLAGS\s0\fR" 4
.IX Item "CPPFLAGS"
Optionen f\(:ur den C\-Pr\(:aprozessor. Standardwert: leer.
.IP "\fB\s-1CXXFLAGS\s0\fR" 4
.IX Item "CXXFLAGS"
Optionen f\(:ur den \*(C+\-Compiler. Identisch zu \fB\s-1CFLAGS\s0\fR.
.IP "\fB\s-1OBJCFLAGS\s0\fR" 4
.IX Item "OBJCFLAGS"
Optionen f\(:ur den Objective-C-Compiler. Identisch zu \fB\s-1CFLAGS\s0\fR.
.IP "\fB\s-1OBJCXXFLAGS\s0\fR" 4
.IX Item "OBJCXXFLAGS"
Optionen f\(:ur den Objective\-\*(C+\-Compiler. Identisch zu \fB\s-1CXXFLAGS\s0\fR.
.IP "\fB\s-1GCJFLAGS\s0\fR" 4
.IX Item "GCJFLAGS"
Optionen f\(:ur den GNU-Java-Compiler (gcj). Eine Untermenge von \fB\s-1CFLAGS\s0\fR.
.IP "\fB\s-1FFLAGS\s0\fR" 4
.IX Item "FFLAGS"
Optionen f\(:ur den Fortran\-77\-Compiler. Eine Untermenge von \fB\s-1CFLAGS\s0\fR.
.IP "\fB\s-1FCFLAGS\s0\fR" 4
.IX Item "FCFLAGS"
Optionen f\(:ur den Fortran\-9x\-Compiler. Identisch zu \fB\s-1FFLAGS\s0\fR.
.IP "\fB\s-1LDFLAGS\s0\fR" 4
.IX Item "LDFLAGS"
Optionen, die beim Linken von Programmen oder Laufzeitbibliotheken an den
Compiler weitergegeben werden (falls der Linker direkt aufgerufen wird,
m\(:ussen \fB\-Wl\fR und \fB,\fR aus diesen Optionen entfernt werden). Standardm\(:a\(ssig
leer.
.PP
Neue Schalter k\(:onnen in Zukunft hinzugef\(:ugt werden, falls die Notwendigkeit
aufkommt (beispielsweise, um weitere Sprachen zu unterst\(:utzen).
.SH "FUNKTIONALIT\(:ATSBEREICHE"
.IX Header "FUNKTIONALIT\(:ATSBEREICHE"
Jede Bereichsfunktionalit\(:at kann durch den entsprechenden Bereichswert in
den Umgebungsvariablen \fB\s-1DEB_BUILD_OPTIONS\s0\fR und \fB\s-1DEB_BUILD_MAINT_OPTIONS\s0\fR
mit den \(bq\fB+\fR\(cq\- und \(bq\fB\-\fR\(cq\-Schaltern aktiviert und deaktiviert werden. Soll
beispielsweise f\(:ur \fBhardening\fR die \(Bqpie\(lq\-Funktionalit\(:at aktiviert und die
\(Bqfortify\(lq\-Funktionalit\(:at deaktiviert werden, k\(:onnen Sie Folgendes in
\&\fBdebian/rules\fR verwenden:
.PP
.Vb 1
\&    export DEB_BUILD_MAINT_OPTIONS=hardening=+pie,\-fortify
.Ve
.PP
Die spezielle Funktionalit\(:at \fBall\fR (in allen Bereichen g\(:ultig) kann dazu
verwandt werden, alle Bereichsfunktionalit\(:aten auf einmal zu aktivieren oder
zu deaktivieren. Um daher alles im Bereich \fBhardening\fR zu deaktivieren und
nur \(Bqformat\(lq und \(Bqfortify\(lq zu aktiveren, kann Folgendes eingesetzt werden:
.PP
.Vb 1
\&    export DEB_BUILD_MAINT_OPTIONS=hardening=\-all,+format,+fortify
.Ve
.SS "future (Zukunft)"
.IX Subsection "future (Zukunft)"
Mehrere Optionen zur Kompilierung (Details weiter unten) k\(:onnen verwandt
werden, um Funktionen zu aktivieren, die standardm\(:a\(ssig aktiviert sein
sollten, dies aber aus R\(:uckw\(:artskompatibilit\(:atsgr\(:unden nicht sein k\(:onnen.
.IP "\fBlfs\fR" 4
.IX Item "lfs"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) aktiviert die Unterst\(:utzung
f\(:ur gro\(sse Dateien auf 32\-Bit\-Architekturen, bei denen ihre \s-1ABI\s0 diese
Unterst\(:utzung nicht standardm\(:a\(ssig aktiviert, indem \fB\-D_LARGEFILE_SOURCE
\&\-D_FILE_OFFSET_BITS=64\fR zu \fB\s-1CPPFLAGS\s0\fR hinzugef\(:ugt wird.
.SS "qa (\s-1QS\s0)"
.IX Subsection "qa (QS)"
Mehrere Optionen zur Kompilierung (Details weiter unten) k\(:onnen verwandt
werden, um Probleme im Quellcode oder im Bausystem zu erkennen.
.IP "\fBbug\fR" 4
.IX Item "bug"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) f\(:ugt Warnoptionen hinzu, die
zuverl\(:assig problematischen Quellcode erkennen. Diese Warnungen sind
fatal. Die einzigen derzeit unterst\(:utzten Schalter sind \fB\s-1CFLAGS\s0\fR und
\&\fB\s-1CXXFLAGS\s0\fR, wobei die Schalter auf \fB\-Werror=array\-bounds\fR,
\&\fB\-Werror=clobbered\fR, \fB\-Werror=implicit\-function\-declaration\fR und
\&\fB\-Werror=volatile\-register\-var\fR gesetzt werden.
.IP "\fBcanary\fR" 4
.IX Item "canary"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) f\(:ugt
Pseudo-Zufallsbarrieren-Optionen zu den Bauschaltern hinzu, so dass die
Bauprotokolle \(:uberpr\(:uft werden k\(:onnen, wie die Bauschalter weitergereicht
werden. Dies erlaubt, Auslassungen in den normalen Bauschaltereinstellungen
zu finden. Derzeit werden nur die Schalter \fB\s-1CPPFLAGS\s0\fR, \fB\s-1CFLAGS\s0\fR,
\&\fB\s-1OBJCFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR und \fB\s-1OBJCXXFLAGS\s0\fR unterst\(:utzt, wobei die Schalter
auf \fB\-D_\|_DEB_CANARY_\fR\fISchalter\fR_\fIZufallskennung\fR\fB_\|_\fR gesetzt werden, und
\&\fB\s-1LDFLAGS\s0\fR, das auf \fB\-Wl,\-z,deb\-canary\-\fR\fIZufallskennung\fR gesetzt wird.
.SS "sanitize (Bereinigung)"
.IX Subsection "sanitize (Bereinigung)"
Mehrere Kompilierzeit-Optionen (nachfolgend beschrieben) k\(:onnen dazu
verwandt werden, ein erstelltes Programm vor Speicherverf\(:alschungsangriffen
Speicherlecks, Verwendung nach Freigabe, Daten\-Zugriffswettl\(:aufen (\(Bqraces\(lq)
in Threads und Fehlern durch undefiniertes Verhalten zu
bereinigen. \fBHinweis\fR: Diese Optionen sollten \fBnicht\fR beim Bauen im
Produktivbetrieb benutzt werden, da sie die Zuverl\(:assigkeit von
spezifikationsgetreuem Code, die Sicherheit oder sogar die Funktionalit\(:at
reduzieren bzw. negativ beeinflussen k\(:onnen.
.IP "\fBaddress\fR" 4
.IX Item "address"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) f\(:ugt \fB\-fsanitize=address\fR zu
\&\fB\s-1LDFLAGS\s0\fR und \fB\-fsanitize=address \-fno\-omit\-frame\-pointer\fR zu \fB\s-1CFLAGS\s0\fR
und \fB\s-1CXXFLAGS\s0\fR hinzu.
.IP "\fBthread\fR" 4
.IX Item "thread"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) f\(:ugt \fB\-fsanitize=thread\fR zu
\&\fB\s-1CFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR und \fB\s-1LDFLAGS\s0\fR hinzu.
.IP "\fBleak\fR" 4
.IX Item "leak"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) f\(:ugt \fB\-fsanitize=leak\fR zu
\&\fB\s-1LDFLAGS\s0\fR hinzu. Sie wird automatisch deaktiviert, falls entweder die
Funktionalit\(:aten \fBaddress\fR oder \fBthread\fR aktiviert werden, da diese sie
einschlie\(ssen.
.IP "\fBundefined\fR" 4
.IX Item "undefined"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) f\(:ugt \fB\-fsanitize=undefined\fR
zu \fB\s-1CFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR und \fB\s-1LDFLAGS\s0\fR hinzu.
.SS "hardening (H\(:artung)"
.IX Subsection "hardening (H\(:artung)"
Mehrere Kompilierzeit-Optionen (nachfolgend beschrieben) k\(:onnen dazu
verwandt werden, ein erstelltes Programm gegen Speicherverf\(:alschungsangriffe
zu h\(:arten, oder zus\(:atzliche Warnungsmeldungen w\(:ahrend der \(:Ubersetzung
auszugeben. Sie werden f\(:ur Architekturen, die diese unterst\(:utzen,
standardm\(:a\(ssig aktiviert; die Ausnahmen sind unten angegeben.
.IP "\fBformat\fR" 4
.IX Item "format"
Diese Einstellung (standardm\(:a\(ssig aktiviert) f\(:ugt \fB\-Wformat
\&\-Werror=format\-security\fR zu \fB\s-1CFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR \fB\s-1CXXFLAGS\s0\fR, \fB\s-1OBJCFLAGS\s0\fR
und \fB\s-1OBJCXXFLAGS\s0\fR hinzu. Damit erhalten Sie Warnungen bei inkorrekter
Verwendung von Formatzeichenketten. Es wird zu einem Fehler f\(:uhren, wenn
Formatfunktionen deart verwandt werden, dass daraus ein m\(:ogliches
Sicherheitsproblem werden k\(:onnte. Derzeit warnt dies bei Aufrufen von
\&\fBprintf\fR\- und \fBscanf\fR\-Funktionen, bei denen die Formatzeichenkette nicht
eine reine Zeichenkette ist und es keine Formatargumente gibt, wie in
\&\fBprintf(foo);\fR statt \fBprintf(\*(L"%s\*(R", foo);\fR. Dies k\(:onnte ein
Sicherheitsproblem sein, falls die Formatzeichenkette aus einer
unvertrauensw\(:urdigen Eingabe stammt und \(bq%n\(cq enth\(:alt.
.IP "\fBfortify\fR" 4
.IX Item "fortify"
Diese Einstellung (standardm\(:a\(ssig aktiviert) f\(:ugt \fB\-D_FORTIFY_SOURCE=2\fR zu
\&\fB\s-1CPPFLAGS\s0\fR hinzu. W\(:ahrend der Code-Erstellung hat der Compiler umfangreiche
Informationen \(:uber Puffergr\(:o\(ssen (wo m\(:oglich) und versucht, unsichere
unbegrenzte Pufferfunktionsaufrufe durch l\(:angenbegrenzte zu ersetzen. Das
ist besonders f\(:ur alten, verkramten Code n\(:utzlich. Zus\(:atzlich werden
Formatzeichenketten in schreibbarem Speicher, die \(bq%n\(cq enthalten,
blockiert. Falls eine Anwendung von solchen Formatzeichenketten abh\(:angt,
m\(:ussen daf\(:ur andere L\(:osungsm\(:oglichkeiten gefunden werden.
.Sp
Beachten Sie, dass die Quellen auch mit \fB\-O1\fR oder h\(:oher \(:ubersetzt werden
m\(:ussen, damit diese Option einen Effekt hat. Falls die Umgebungsvariable
\&\fB\s-1DEB_BUILD_OPTIONS\s0\fR \fInoopt\fR enth\(:alt, dann wird die Unterst\(:utzung von
\&\fBfortify\fR aufgrund neuer Warnungen von Glibc 2.16 und neuer deaktiviert.
.IP "\fBstackprotector\fR" 4
.IX Item "stackprotector"
Diese Einstellung (standardm\(:a\(ssig aktiviert falls \(Bqstackprotectorstrong\(lq
nicht verwandt wird) f\(:ugt \fB\-fstack\-protector \-\-param=ssp\-buffer\-size=4\fR zu
\&\fB\s-1CFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR, \fB\s-1OBJCFLAGS\s0\fR, \fB\s-1OBJCXXFLAGS\s0\fR, \fB\s-1GCJFLAGS\s0\fR, \fB\s-1FFLAGS\s0\fR
und \fB\s-1FCFLAGS\s0\fR hinzu. Dies f\(:ugt Sicherheitspr\(:ufungen gegen die
\(:Uberschreibung des Stapelspeichers (Stacks) hinzu. Damit werden viele
m\(:ogliche Code\-Einf\(:ugeangriffe zu Abbruchsituationen. Im besten Fall werden
damit Code\-Einf\(:ugungsangriffe zu Diensteverweigerungsangriffen oder zu
keinen Problemen (abh\(:angig von der Anwendung).
.Sp
Diese Funktionalit\(:at ben\(:otigt das Linken mit Glibc (oder einem anderen
Anbieter von \fB_\|_stack_chk_fail\fR). Sie muss daher deaktiviert werden, wenn
mit \fB\-nostdlib\fR oder \fB\-ffreestanding\fR oder \(:Ahnlichem gebaut wird.
.IP "\fBstackprotectorstrong\fR" 4
.IX Item "stackprotectorstrong"
Diese Einstellung (standardm\(:a\(ssig aktiviert) f\(:ugt \fB\-fstack\-protector\-strong\fR
zu \fB\s-1CFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR, \fB\s-1OBJCFLAGS\s0\fR, \fB\s-1OBJCXXFLAGS\s0\fR, \fB\s-1GCJFLAGS\s0\fR,
\&\fB\s-1FFLAGS\s0\fR und \fB\s-1FCFLAGS\s0\fR hinzu. Dies ist eine st\(:arkere Variante von
\&\fBstackprotector\fR, allerdings ohne signifikante Einbu\(ssen bei der Leistung.
.Sp
Deaktivierung von \fBstackprotector\fR deaktiviert auch diese Einstellung.
.Sp
Diese Funktionalit\(:at stellt die gleichen Anforderungen wie \fBstackprotector\fR
und ben\(:otigt zus\(:atzlich \s-1GCC 4.9\s0 oder neuer.
.IP "\fBrelro\fR" 4
.IX Item "relro"
Diese Einstellung (standardm\(:a\(ssig aktiviert) f\(:ugt \fB\-Wl,\-z,relro\fR zu
\&\fB\s-1LDFLAGS\s0\fR hinzu. W\(:ahrend des Ladens des Programms m\(:ussen mehrere
ELF-Speicherabschnitte vom Binder (Linker) geschrieben werden. Diese
Einstellung signalisiert dem Ladeprogramm, diese Abschnitte in
nur-Lese-Zugriff zu \(:andern, bevor die Steuerung an das Programm \(:ubergeben
wird. Insbesondere verhindert dies GOT\-\(:Uberschreibeangriffe. Falls diese
Option deaktiviert ist, wird auch \fBbindnow\fR deaktiviert.
.IP "\fBbindnow\fR" 4
.IX Item "bindnow"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) f\(:ugt \fB\-Wl,\-z,now\fR zu
\&\fB\s-1LDFLAGS\s0\fR hinzu. W\(:ahrend des Ladens des Programms werden alle dynamischen
Symbole aufgel\(:ost, womit das gesamte \s-1PLT\s0 nur-lesend markiert werden kann
(aufgrund von \fBrelro\fR oben). Diese Option kann nicht aktiviert werden,
falls \fBrelro\fR nicht aktiviert ist.
.IP "\fBpie\fR" 4
.IX Item "pie"
Diese Einstellung (seit Dpkg 1.18.23 ohne globale Vorgabe, da sie jetzt
standardm\(:a\(ssig durch \s-1GCC\s0 auf den Debian-Architekturen Amd64, Arm64, Armel,
Armhf, Hurd\-i386, I386, Kfreebsd\-amd64, Kfreebsd\-i386, Mips, Mipsel,
Mips64el, Powerpc, \s-1PPC64,\s0 PPC64el, Riscv64, S390x, Sparc und Sparc64
aktiviert ist) f\(:ugt, falls ben\(:otigt, die ben\(:otigten Optionen, um \s-1PIE\s0 zu
aktivieren oder zu deaktivieren, \(:uber GCC-Spezifikationsdateien hinzu,
abh\(:angig davon, ob \s-1GCC\s0 auf diesen Architekturen die Schalter selbst
einspeist oder nicht. Wenn die Einstellung aktiviert ist und \s-1GCC\s0 den
Schalter einspeist, f\(:ugt dies nichts hinzu. Wenn die Einstellung aktiviert
ist und \s-1GCC\s0 den Schalter nicht einspeist, dann f\(:ugt es \fB\-fPIE\fR (mittels
\&\fI\f(CI%PKGDATADIR\fI%/pie\-compiler.specs\fR) zu \fB\s-1CFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR, \fB\s-1OBJCFLAGS\s0\fR,
\&\fB\s-1OBJCXXFLAGS\s0\fR, \fB\s-1GCJFLAGS\s0\fR, \fB\s-1FFLAGS\s0\fR und \fB\s-1FCFLAGS\s0\fR und \fB\-fPIE \-pie\fR
(mittels \fI\f(CI%PKGDATADIR\fI%/pie\-link.specs\fR) zu \fB\s-1LDFLAGS\s0\fR hinzu.  Wenn die
Einstellung deaktiviert ist und \s-1GCC\s0 den Schalter einspeist, dann f\(:ugt es
\&\fB\-fno\-PIE\fR (mittels \fI\f(CI%PKGDATADIR\fI%/no\-pie\-compile.specs\fR) zu \fB\s-1CFLAGS\s0\fR,
\&\fB\s-1CXXFLAGS\s0\fR, \fB\s-1OBJCFLAGS\s0\fR, \fB\s-1OBJCXXFLAGS\s0\fR, \fB\s-1GCJFLAGS\s0\fR, \fB\s-1FFLAGS\s0\fR und
\&\fB\s-1FCFLAGS\s0\fR und \fB\-fno\-PIE \-no\-pie\fR (mittels
\&\fI\f(CI%PKGDATADIR\fI%/no\-pie\-link.specs\fR) zu \fB\s-1LDFLAGS\s0\fR hinzu.
.Sp
\(BqPosition Independent Executable\(lq (positionsunabh\(:angige Programme) werden
ben\(:otigt, um \(BqAddress Space Layout Randomization\(lq (Bereitstellung eines
zuf\(:alligen Adressbereichlayouts) auszunutzen, der von einigen
Kernelversionen bereitgestellt wird. W\(:ahrend \s-1ASLR\s0 bereits f\(:ur Datenbereiche
auf dem Stapel (Stack) und Heap erzwungen werden kann (brk und mmap), m\(:ussen
die Codebereiche positionsunabh\(:angig \(:ubersetzt werden. Laufzeitbibliotheken
machen dies bereits (\fB\-fPIC\fR), so dass sie \s-1ASLR\s0 automatisch erhalten, aber
Programm\-.text\-Regionen m\(:ussen mit \s-1PIE\s0 gebaut werden, um \s-1ASLR\s0 zu
erhalten. Wenn dies passiert, sind \s-1ROP\-\s0 (Return Oriented Programming)
Angriffe sehr viel schwerer durchzuf\(:uhren, da es keine statischen Orte mehr
gibt, zu denen w\(:ahrend eines Speicherverf\(:alschungsangriffs hingesprungen
werden k\(:onnte.
.Sp
\&\s-1PIE\s0 ist nicht zu \fB\-fPIC\fR kompatibel, daher m\(:ussen Sie beim Bau von
Laufzeitbibliotheksobjekten im Allgemeinen Vorsicht walten lassen. Da aber
der ausgegebene PIE-Schalter mittels GCC-Spezifikationsdateien hinzugef\(:ugt
wird, sollte es immer sicher sein, sie bedingungslos zu setzen, unabh\(:angig
von dem Objekttyp, der \(:ubersetzt oder gelinkt wird.
.Sp
Statische Bibliotheken k\(:onnen von jedem Programm und anderen statischen
Bibliotheken benutzt werden. Abh\(:angig von den zum Kompilieren aller Objekte
innerhalb einer statischen Bibliothek verwandten Schaltern k\(:onnen diese
Bibliotheken von verschiedenen Gruppen von Objekten verwandt werden:
.RS 4
.IP "keine" 4
.IX Item "keine"
Kann weder in ein PIE-Programm noch in eine Laufzeitbibliothek gelinkt
werden.
.IP "\fB\-fPIE\fR" 4
.IX Item "-fPIE"
Kann in jedes Programm, aber nicht in eine Laufzeitbibliothek gelinkt werden
(empfohlen).
.IP "\fB\-fPIC\fR" 4
.IX Item "-fPIC"
Kann in jedes Programm und jede Laufzeitbibliothek gelinkt werden.
.RE
.RS 4
.Sp
Falls es notwendig ist, diese Schalter manuell zu setzen und die
GCC\-Spezifikations\-Hinzuf\(:ugung zu umgehen, m\(:ussen mehrere Dinge beachtet
werden. Die bedingungslose und explizite \(:Ubergabe von \fB\-fPIE\fR, \fB\-fpie\fR
oder \fB\-pie\fR an das Bausystem mit Libtool ist sicher, da diese Schalter
entfernt werden, wenn Laufzeit-Bibliotheken gebaut werden. Andernfalls
k\(:onnte es bei Projekten, die sowohl Programme wie auch Laufzeit-Bibliotheken
bauen, notwendig sein, dass Sie beim Bau der Laufzeit-Bibliotheken
sicherstellen, dass \fB\-fPIC\fR immer als Letztes an die Kompilierungsschalter
wie \fB\s-1CFLAGS\s0\fR \(:ubergeben wird (so dass es jedes fr\(:uhere \fB\-PIE\fR au\(sser Kraft
setzen kann) und \fB\-shared\fR als Letztes an Link-Schalter wie \fB\s-1LDFLAGS\s0\fR
\(:ubergeben wird (so dass es jedes fr\(:uhere \fB\-pie\fR au\(sser Kraft setzen
kann). \fBHinweis\fR: Das sollte mit der Vorgabe-GCC-Spezifikationsmaschinerie
nicht notwendig sein.
.Sp
Zus\(:atzlich k\(:onnen auf einigen Architekturen mit sehr wenigen Registern (dazu
geh\(:ort aber i386 nicht mehr, seitdem in \s-1GCC\s0 >= 5 Optimierungen
erfolgten) Leistungsverluste von bis zu 15% in sehr text-Segment-lastigen
Anwendungsf\(:allen auftreten, da \s-1PIE\s0 \(:uber allgemeine Register implementiert
ist; in den meisten Anwendungsf\(:allen sind dies weniger als 1%. Architekturen
mit mehr allgemeinen Registern (z.B. Amd64) erfahren nicht diese
Schlimmstfall-Strafe.
.RE
.SS "reproducible (Reproduzierbarkeit)"
.IX Subsection "reproducible (Reproduzierbarkeit)"
Die Kompilierzeit-Optionen (nachfolgend beschrieben) k\(:onnen dazu verwandt
werden, die Reproduzierbarkeit zu verbessern oder zus\(:atzliche
Warnungsmeldungen w\(:ahrend der \(:Ubersetzung auszugeben. Sie werden f\(:ur
Architekturen, die diese unterst\(:utzen, standardm\(:a\(ssig aktiviert; die
Ausnahmen sind unten angegeben.
.IP "\fBtimeless\fR" 4
.IX Item "timeless"
Diese (standardm\(:a\(ssig aktivierte) Einstellung f\(:ugt \fB\-Wdate\-time\fR zu
\&\fB\s-1CPPFLAGS\s0\fR hinzu. Dies f\(:uhrt zu Warnungen, wenn die Makros \fB_\|_TIME_\|_\fR,
\&\fB_\|_DATE_\|_\fR und \fB_\|_TIMESTAMP_\|_\fR verwandt werden.
.IP "\fBfixfilepath\fR" 4
.IX Item "fixfilepath"
Diese Einstellung (standardm\(:a\(ssig deaktiviert) f\(:ugt
\&\fB\-ffile\-prefix\-map=\fR\fI\s-1BUILDPATH\s0\fR\fB=.\fR zu \fB\s-1CFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR,
\&\fB\s-1OBJCFLAGS\s0\fR, \fB\s-1OBJCXXFLAGS\s0\fR, \fB\s-1GCJFLAGS\s0\fR, \fB\s-1FFLAGS\s0\fR und \fB\s-1FCFLAGS\s0\fR hinzu,
wobei \fB\s-1BUILDPATH\s0\fR auf das oberste Verzeichnis des bauenden Pakets gesetzt
wird. Dies f\(:uhrt dazu, dass der Baupfad aus allen erstellten Dateien
entfernt wird.
.Sp
Falls sowohl \fBfixdebugpath\fR als auch \fBfixfilepath\fR gesetzt sind, hat diese
Option Vorrang, da sie eine Obermenge erster ist.
.IP "\fBfixdebugpath\fR" 4
.IX Item "fixdebugpath"
Diese Einstellung (standardm\(:a\(ssig aktiviert) f\(:ugt
\&\fB\-fdebug\-prefix\-map=\fR\fI\s-1BUILDPATH\s0\fR\fB=.\fR zu \fB\s-1CFLAGS\s0\fR, \fB\s-1CXXFLAGS\s0\fR,
\&\fB\s-1OBJCFLAGS\s0\fR, \fB\s-1OBJCXXFLAGS\s0\fR, \fB\s-1GCJFLAGS\s0\fR, \fB\s-1FFLAGS\s0\fR und \fB\s-1FCFLAGS\s0\fR hinzu,
wobei \fB\s-1BUILDPATH\s0\fR auf das oberste Verzeichnis des bauenden Pakets gesetzt
wird. Dies f\(:uhrt dazu, dass der Baupfad aus allen erstellten Debug-Symbolen
entfernt wird.
.SH "UMGEBUNG"
.IX Header "UMGEBUNG"
Es gibt zwei Gruppen von Umgebungsvariablen, die den gleichen Vorgang
durchf\(:uhren. Der erste (\s-1DEB_\s0\fISchalter\fR_\fIVorg\fR) sollte niemals innerhalb
von \fBdebian/rules\fR verwandt werden. Er ist f\(:ur Benutzer gedacht, die das
Quellpaket mit anderen Bauschaltern erneut bauen m\(:ochten. Der zweite Satz
(\s-1DEB_\s0\fISchalter\fR_MAINT_\fIVorg\fR) sollte nur durch Paketbetreuer in
\&\fBdebian/rules\fR verwandt werden, um die entstehenden Bauschalter zu \(:andern.
.IP "\fB\s-1DEB_\s0\fR\fISchalter\fR\fB_SET\fR" 4
.IX Item "DEB_Schalter_SET"
.PD 0
.IP "\fB\s-1DEB_\s0\fR\fISchalter\fR\fB_MAINT_SET\fR" 4
.IX Item "DEB_Schalter_MAINT_SET"
.PD
Diese Variable kann zum Erzwingen des f\(:ur \fISchalter\fR zur\(:uckgegebenen Werts
verwandt werden.
.IP "\fB\s-1DEB_\s0\fR\fISchalter\fR\fB_STRIP\fR" 4
.IX Item "DEB_Schalter_STRIP"
.PD 0
.IP "\fB\s-1DEB_\s0\fR\fISchalter\fR\fB_MAINT_STRIP\fR" 4
.IX Item "DEB_Schalter_MAINT_STRIP"
.PD
Diese Variable kann zum Bereitstellen einer durch Leerzeichen getrennten
Liste von Optionen verwandt werden, die aus dem Satz von \fISchalter\fR
zur\(:uckgelieferten Schaltern entfernt werden.
.IP "\fB\s-1DEB_\s0\fR\fISchalter\fR\fB_APPEND\fR" 4
.IX Item "DEB_Schalter_APPEND"
.PD 0
.IP "\fB\s-1DEB_\s0\fR\fISchalter\fR\fB_MAINT_APPEND\fR" 4
.IX Item "DEB_Schalter_MAINT_APPEND"
.PD
Diese Variable kann zum Anh\(:angen erg\(:anzender Optionen zum Wert, der von
\&\fISchalter\fR zur\(:uckgegeben wird, verwandt werden.
.IP "\fB\s-1DEB_\s0\fR\fISchalter\fR\fB_PREPEND\fR" 4
.IX Item "DEB_Schalter_PREPEND"
.PD 0
.IP "\fB\s-1DEB_\s0\fR\fISchalter\fR\fB_MAINT_PREPEND\fR" 4
.IX Item "DEB_Schalter_MAINT_PREPEND"
.PD
Diese Variable kann zum Voranstellen erg\(:anzender Optionen zum Wert, der von
\&\fISchalter\fR zur\(:uckgegeben wird, verwandt werden.
.IP "\fB\s-1DEB_BUILD_OPTIONS\s0\fR" 4
.IX Item "DEB_BUILD_OPTIONS"
.PD 0
.IP "\fB\s-1DEB_BUILD_MAINT_OPTIONS\s0\fR" 4
.IX Item "DEB_BUILD_MAINT_OPTIONS"
.PD
Diese Variablen k\(:onnen von Benutzern oder Betreuern zum Deaktivieren oder
Aktivieren verschiedener Bereichsfunktionalit\(:aten benutzt werden, die
Bauschalter beeinflussen. Die Variable \fB\s-1DEB_BUILD_MAINT_OPTIONS\s0\fR setzt jede
Einstellung in den Funktionalit\(:atsbereichen \fB\s-1DEB_BUILD_OPTIONS\s0\fR au\(sser
Kraft. Lesen Sie den Abschnitt \fBFUNKTIONALIT\(:ATSBEREICHE\fR f\(:ur weitere
Details.
.IP "\fB\s-1DEB_VENDOR\s0\fR" 4
.IX Item "DEB_VENDOR"
Diese Einstellung definiert den aktuellen Lieferanten. Falls nicht gesetzt,
wird er aus \fB\f(CB%PKGCONFDIR\fB%/origins/default\fR ermittelt.
.IP "\fB\s-1DEB_BUILD_PATH\s0\fR" 4
.IX Item "DEB_BUILD_PATH"
Diese Variable setzt den Baupfad (seit Dpkg 1.18.8), der in Funktionalit\(:aten
wie \fBfixdebugpath\fR verwandt wird, so dass sie durch den Aufrufenden
gesteuert werden k\(:onnen. Diese Variable ist derzeit spezifisch f\(:ur Debian
und Derivative.
.IP "\fB\s-1DPKG_COLORS\s0\fR" 4
.IX Item "DPKG_COLORS"
Setzt den Farbmodus (seit Dpkg 1.18.5). Die derzeit unterst\(:utzten Werte
sind: \fBauto\fR (Vorgabe), \fBalways\fR und \fBnever\fR.
.IP "\fB\s-1DPKG_NLS\s0\fR" 4
.IX Item "DPKG_NLS"
Falls dies gesetzt ist, wird es zur Entscheidung, ob Native Language
Support, auch als Unterst\(:utzung f\(:ur Internationalisierung (oder i18n)
bekannt, aktiviert wird (seit Dpkg 1.19.0). Die akzeptierten Werte sind:
\&\fB0\fR und \fB1\fR (Vorgabe).
.SH "DATEIEN"
.IX Header "DATEIEN"
.SS "Konfigurationsdateien"
.IX Subsection "Konfigurationsdateien"
.IP "\fB\f(CB%PKGCONFDIR\fB%/buildflags.conf\fR" 4
.IX Item "/etc/dpkg/buildflags.conf"
Systemweite Konfigurationsdatei
.IP "\fB\f(CB$XDG_CONFIG_HOME\fB/dpkg/buildflags.conf\fR oder" 4
.IX Item "$XDG_CONFIG_HOME/dpkg/buildflags.conf oder"
.PD 0
.IP "\fB\f(CB$HOME\fB/.config/dpkg/buildflags.conf\fR" 4
.IX Item "$HOME/.config/dpkg/buildflags.conf"
.PD
Benutzerkonfigurationsdatei
.SS "Paketierungsunterst\(:utzung"
.IX Subsection "Paketierungsunterst\(:utzung"
.IP "\fB\f(CB%PKGDATADIR\fB%/buildflags.mk\fR" 4
.IX Item "/usr/share/dpkg/buildflags.mk"
Make-Steuerdateischnipsel, das alle von \fBdpkg-buildflags\fR unterst\(:utzten
Schalter in Variablen laden (und optional exportieren) wird. (seit Dpkg
1.16.1)
.SH "BEISPIELE"
.IX Header "BEISPIELE"
Um Bauschalter an einen Baubefehl in einer Make-Steuerdatei zu \(:ubergeben:
.Sp
.Vb 1
\& $(MAKE) $(shell dpkg\-buildflags \-\-export=cmdline)
\&
\& ./configure $(shell dpkg\-buildflags \-\-export=cmdline)
.Ve
.PP
Um Bauschalter in einem Shell-Skript oder Shell-Fragement zu setzen, kann
\&\fBeval\fR verwendet werden, um die Ausgabe zu interpretieren und die Schalter
in die Umgebung zu exportieren:
.Sp
.Vb 1
\& eval "$(dpkg\-buildflags \-\-export=sh)" && make
.Ve
.PP
Oder die Positionsparameter zu setzen, die an einen Befehl \(:ubergeben werden
sollen:
.Sp
.Vb 2
\& eval "set \-\- $(dpkg\-buildflags \-\-export=cmdline)"
\& for dir in a b c; do (cd $dir && ./configure "$@" && make); done
.Ve
.SS "Verwendung in debian/rules"
.IX Subsection "Verwendung in debian/rules"
Sie sollten \fBdpkg-buildflags\fR aufrufen oder \fBbuildflags.mk\fR in die Datei
\&\fBdebian/rules\fR einbinden, um die ben\(:otigten Bauschalter, die an das
Bausystem weitergegeben werden sollen, abzufragen. Beachten Sie, dass \(:altere
Versionen von \fBdpkg-buildpackage\fR (vor Dpkg 1.16.1) diese Variablen
automatisch exportierten. Allerdings sollten Sie sich nicht darauf
verlassen, da dies den manuellen Aufruf von \fBdebian/rules\fR nicht korrekt
erm\(:oglicht.
.PP
F\(:ur Pakete mit Autoconf-artigen Bausystemen k\(:onnen Sie die relevanten
Optionen direkt wie oben gezeigt an Configure oder \fBmake\fR(1) \(:ubergeben.
.PP
F\(:ur andere Bausysteme oder wenn Sie feingranularere Steuerung ben\(:otigen
(welcher Schalter wo weitergegeben wird), k\(:onnen Sie \fB\-\-get\fR
verwenden. Oder Sie k\(:onnen stattdessen \fBbuildflags.mk\fR einbinden, das sich
um den Aufruf von \fBdpkg-buildflags\fR k\(:ummert und die Bauschalter in
Make-Variablen speichert.
.PP
Falls Sie alle Bauschalter in die Umgebung exportieren m\(:ochten (wo sie dann
vom Bausystem eingelesen werden k\(:onnen):
.Sp
.Vb 2
\& DPKG_EXPORT_BUILDFLAGS = 1
\& include /usr/share/dpkg/buildflags.mk
.Ve
.PP
F\(:ur zus\(:atzliche Steuerung, was exportiert wird, k\(:onnen Sie die Variablen
manuell exportieren (da keine standardm\(:a\(ssig exportiert werden):
.Sp
.Vb 2
\& include /usr/share/dpkg/buildflags.mk
\& export CPPFLAGS CFLAGS LDFLAGS
.Ve
.PP
Und nat\(:urlich k\(:onnen Sie die Schalter manuell an Befehle weitergeben:
.Sp
.Vb 3
\& include /usr/share/dpkg/buildflags.mk
\& build\-arch:
\&        $(CC) \-o hello hello.c $(CPPFLAGS) $(CFLAGS) $(LDFLAGS)
.Ve
.SH "\(:UBERSETZUNG"
.IX Header "\(:UBERSETZUNG"
Die deutsche \(:Ubersetzung wurde 2004, 2006\-2020 von Helge Kreutzmann
<debian@helgefjell.de>, 2007 von Florian Rehnisch <eixman@gmx.de> und
2008 von Sven Joachim <svenjoac@gmx.de>
angefertigt. Diese \(:Ubersetzung ist Freie Dokumentation; lesen Sie die
\&\s-1GNU\s0 General Public License Version 2 oder neuer f\(:ur die Kopierbedingungen.
Es gibt \s-1KEINE HAFTUNG.\s0
