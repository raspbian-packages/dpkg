.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "dpkg-architecture 1"
.TH dpkg-architecture 1 "2020-08-02" "1.20.5" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "BEZEICHNUNG"
.IX Header "BEZEICHNUNG"
dpkg-architecture \- Architektur zum Paketbau setzen und bestimmen
.SH "\(:UBERSICHT"
.IX Header "\(:UBERSICHT"
\&\fBdpkg-architecture\fR [\fIOption\fR â€¦] [\fIBefehl\fR]
.SH "BESCHREIBUNG"
.IX Header "BESCHREIBUNG"
\&\fBdpkg-architecture\fR stellt eine M\(:oglichkeit bereit, die Rechner-Architektur
f\(:ur den Paketbau zu bestimmen und zu setzen.
.PP
Die Bau-Architektur wird immer \(:uber einen externen Aufruf an \fBdpkg\fR(1)
bestimmt und kann nicht auf der Befehlszeile gesetzt werden.
.PP
Sie k\(:onnen die Host-Architektur (Wirt-Architektur) spezifizieren, indem Sie
eine oder beide der Optionen \fB\-\-host\-arch\fR oder \fB\-\-host\-type\fR
verwenden. Der Standardwert wird \(:uber einen externen Aufruf an \fBgcc\fR(1)
ermittelt oder ist identisch mit der Bauarchitektur, falls sowohl \fB\s-1CC\s0\fR als
auch \s-1GCC\s0 nicht verf\(:ugbar sind. Einer von \fB\-\-host\-arch\fR oder \fB\-\-host\-type\fR
ist ausreichend, der Wert des anderen wird auf einen brauchbaren Wert
gesetzt. Tats\(:achlich ist es oft besser, nur einen der beiden anzugeben, da
\&\fBdpkg-architecture\fR Sie warnen wird, falls Ihre Wahl nicht mit dem
Standardwert \(:ubereinstimmt.
.SH "BEFEHLE"
.IX Header "BEFEHLE"
.IP "\fB\-l\fR, \fB\-\-list\fR" 4
.IX Item "-l, --list"
Zeigt die Umgebungsvariablen, eine pro Zeile, in dem Format
\&\fIVARIABLE=Wert\fR. Dies ist die Standardaktion.
.IP "\fB\-e\fR, \fB\-\-equal\fR \fIArchitektur\fR" 4
.IX Item "-e, --equal Architektur"
\(:Uberpr\(:uft auf Gleichheit der Architekturen (seit Dpkg 1.13.13). Es pr\(:uft die
aktuelle oder angegebene Debian-Host-Architektur mit \fIArchitektur\fR auf
Gleichheit. Diese Aktion expandiert nicht die Architektur-Platzhalter
(Wildcards). Der Befehl beendet sich mit einem Exit-Status von 0, falls eine
\(:Ubereinstimmung besteht, andernfalls mit 1.
.IP "\fB\-i\fR, \fB\-\-is\fR \fIArchitektur-Platzhalter\fR" 4
.IX Item "-i, --is Architektur-Platzhalter"
\(:Uberpr\(:uft auf Gleichheit der Architekturen (seit Dpkg 1.13.13). Es pr\(:uft die
aktuelle oder angegebene Debian-Host-Architektur mit
\&\fIArchitektur-Platzhalter\fR, nachdem dieser zu einem Architektur-Platzhalter
expandiert wurde und pr\(:uft, ob sie passen. Der Befehl beendet sich mit einem
Exit-Status von 0, falls eine \(:Ubereinstimmung besteht, andernfalls mit 1.
.IP "\fB\-q\fR, \fB\-\-query\fR \fIVariablenname\fR" 4
.IX Item "-q, --query Variablenname"
Zeigt den Wert einer einzelnen Variablen an.
.IP "\fB\-s\fR, \fB\-\-print\-set\fR" 4
.IX Item "-s, --print-set"
Zeigt einen Export-Befehl. Dies kann dazu verwendet werden, um
Umgebungsvariablen mittels \fBeval\fR der POSIX-Shell zu setzen.
.IP "\fB\-u\fR, \fB\-\-print\-unset\fR" 4
.IX Item "-u, --print-unset"
Gibt \(:ahnlich wie \fB\-\-print\-unset\fR einen Export-Befehl aus, der alle
Variablen l\(:oscht.
.IP "\fB\-c\fR, \fB\-\-command\fR \fIBefehlszeichenkette\fR" 4
.IX Item "-c, --command Befehlszeichenkette"
F\(:uhrt eine \fIBefehlszeichenkette\fR in einer Umgebung aus, in der alle
Variablen auf die festgelegten Werte gesetzt sind.
.IP "\fB\-L\fR, \fB\-\-list\-known\fR" 4
.IX Item "-L, --list-known"
Gibt eine Liste von g\(:ultigen Architekturnamen aus. M\(:oglicherweise durch eine
oder mehrere der Abgleich-Optionen \fB\-\-match\-wildcard\fR, \fB\-\-match\-bits\fR oder
\&\fB\-\-match\-endian\fR eingeschr\(:ankt (seit Dpkg 1.17.14).
.IP "\fB\-?\fR, \fB\-\-help\fR" 4
.IX Item "-?, --help"
Zeigt einen Hinweis zum Aufruf und beendet das Programm.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Gibt die Version aus und beendet das Programm.
.SH "OPTIONEN"
.IX Header "OPTIONEN"
.IP "\fB\-a\fR, \fB\-\-host\-arch\fR \fIArchitektur\fR" 4
.IX Item "-a, --host-arch Architektur"
Setzt die Debian-Host-Architektur.
.IP "\fB\-t\fR, \fB\-\-host\-type\fR \fIGNU-Systemtyp\fR" 4
.IX Item "-t, --host-type GNU-Systemtyp"
Setzt den Host-GNU-Systemtyp.
.IP "\fB\-A\fR, \fB\-\-target\-arch\fR \fIArchitektur\fR" 4
.IX Item "-A, --target-arch Architektur"
Setzt die Ziel-Debian-Architektur (seit Dpkg 1.17.14).
.IP "\fB\-T\fR, \fB\-\-target\-type\fR \fIGNU-Systemtyp\fR" 4
.IX Item "-T, --target-type GNU-Systemtyp"
Setzt den Ziel-GNU-Systemtyp (seit Dpkg 1.17.14).
.IP "\fB\-W\fR, \fB\-\-match\-wildcard\fR \fIArchitektur-Platzhalter\fR" 4
.IX Item "-W, --match-wildcard Architektur-Platzhalter"
Begrenzt die mit \fB\-\-list\-known\fR aufgef\(:uhrten Architekturen auf solche, die
auf den angegebenen Architektur-Platzhalter passen (seit Dpkg 1.17.14).
.IP "\fB\-B\fR, \fB\-\-match\-bits\fR \fIArchitektur-Bits\fR" 4
.IX Item "-B, --match-bits Architektur-Bits"
Begrenzt die mit \fB\-\-list\-known\fR aufgef\(:uhrten Architekturen auf solche mit
den angegebenen CPU-Bits (seit Dpkg 1.17.14). Entweder \fB32\fR oder \fB64\fR.
.IP "\fB\-E\fR, \fB\-\-match\-endian\fR \fIArchitektur-Bytereihenfolge\fR" 4
.IX Item "-E, --match-endian Architektur-Bytereihenfolge"
Begrenzt die mit \fB\-\-list\-known\fR aufgef\(:uhrten Architekturen auf solche mit
der angegebenen Bytereihenfolge (seit Dpkg 1.17.14). Entweder \fBlittle\fR oder
\&\fBbig\fR.
.IP "\fB\-f\fR, \fB\-\-force\fR" 4
.IX Item "-f, --force"
Existierende Umgebungsvariablen mit dem gleichen Namen wie vom Skript
verwendet werden nicht \(:uberschrieben (d.h. sie werden von
\&\fBdpkg-architecture\fR verwendet), es sei denn, die \(Bqforce\(lq\-Markierung ist
gesetzt. Dies erlaubt es dem Benutzer, einen Wert zu \(:uberschreiben, selbst
wenn der Aufruf von \fBdpkg-architecture\fR tief in einem anderen Skript
versteckt ist (beispielsweise \fBdpkg-buildpackage\fR(1)).
.SH "AUSDR\(:UCKE"
.IX Header "AUSDR\(:UCKE"
.IP "Baumaschine" 4
.IX Item "Baumaschine"
Die Maschine, auf der das Paket gebaut wird.
.IP "Host-Maschine" 4
.IX Item "Host-Maschine"
Die Maschine, f\(:ur die das Paket gebaut ist.
.IP "Ziel-Maschine" 4
.IX Item "Ziel-Maschine"
Die Maschine, f\(:ur die der Compiler baut. Dies wird nur beim Bau einer
Cross-Toolchain und zum Bau von Code f\(:ur die Ziel-Architektur ben\(:otigt. Die
Cross-Toolchain wird auf der Bauarchitektur gebaut und l\(:auft dann auf der
Host-Architektur.
.IP "Debian-Architektur" 4
.IX Item "Debian-Architektur"
Die Debian-Architektur-Zeichenkette, die den bin\(:aren Baum im FTP-Archiv
spezifiziert. Beispiele: i386, sparc, hurd\-i386.
.IP "Debian-Architekturtupel" 4
.IX Item "Debian-Architekturtupel"
Ein Debian-Architekturtupel ist eine vollqualifizierte Architektur mit allen
Komponenten ausgeschrieben. Dies unterscheidet sich von der
Debian-Architektur zumindest in der Weise, dass das \fI\s-1ABI\s0\fR nicht eingebettet
ist. Das aktuelle Tupel hat die Form \fI\s-1ABI\s0\fR\-\fILibc\fR\-\fI\s-1OS\s0\fR\-\fI\s-1CPU\s0\fR. Beispiele:
base\-gnu\-linux\-amd64, eabihf-musl-linux-arm.
.IP "Debian-Architektur-Platzhalter" 4
.IX Item "Debian-Architektur-Platzhalter"
Ein Debian-Architektur-Platzhalter ist eine spezielle
Architektur-Zeichenkette, die auf jede reale Architektur, die ein Teil davon
ist, passt. Die allgemeine Form ist ein Debian-Architektur-Tupel mit vier
oder weniger Elementen und bei dem mindestens eines \fBany\fR ist. Fehlende
Elemente des Tupels werden implizit als \fBany\fR vorangestellt und daher sind
die folgenden Tupel \(:aquivalent:
.RS 4
.IP "\fBany\fR\-\fBany\fR\-\fBany\fR\-\fBany\fR = \fBany\fR" 4
.IX Item "any-any-any-any = any"
.PD 0
.IP "\fBany\fR\-\fBany\fR\-\fIos\fR\-\fBany\fR = \fIos\fR\-\fBany\fR" 4
.IX Item "any-any-os-any = os-any"
.IP "\fBany\fR\-\fIlibc\fR\-\fBany\fR\-\fBany\fR = \fIlibc\fR\-\fBany\fR\-\fBany\fR" 4
.IX Item "any-libc-any-any = libc-any-any"
.RE
.RS 4
.PD
.Sp
Beispiele: linux-any, any\-i386, hurd-any, eabi-any-any-arm, musl-any-any.
.RE
.IP "GNU-Systemtyp" 4
.IX Item "GNU-Systemtyp"
Eine Architekturspezifikationszeichenkette besteht aus zwei, durch einen
Bindestrich getrennten Teilen: \s-1CPU\s0 und System. Beispiele: i586\-linux\-gnu,
sparc-linux-gnu, i686\-gnu, x86_64\-netbsd.
.IP "Multiarch-Tripel" 4
.IX Item "Multiarch-Tripel"
Der bereinigte GNU-Systemtyp; wird f\(:ur Dateipfade verwandt. Dieses Tripel
\(:andert sich auch nicht, wenn das zugrundeliegende \s-1ISA\s0 erh\(:oht wird, so dass
die daraus resultierenden Pfade dauerhaft stabil bleiben. Derzeit ist der
einzige Unterschied zum GNU-Sytemtyp, dass der CPU-Anteil f\(:ur i386\-basierte
Systeme immer \(Bqi386\(lq lautet. Beispiele: i386\-linux\-gnu,
x86_64\-linux\-gnu. Beispielpfade: /lib/powerpc64le\-linux\-gnu/,
/usr/lib/i386\-kfreebsd\-gnu/.
.SH "VARIABLEN"
.IX Header "VARIABLEN"
Die folgenden Variablen werden von \fBdpkg-architecture\fR gesetzt (siehe den
Abschnitt \fBAUSDR\(:UCKE\fR f\(:ur eine Beschreibung des Benennungsschemas):
.IP "\fB\s-1DEB_BUILD_ARCH\s0\fR" 4
.IX Item "DEB_BUILD_ARCH"
Die Debian-Architektur der Baumaschine.
.IP "\fB\s-1DEB_BUILD_ARCH_ABI\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_ABI"
Der Debian-ABI-Name der Baumaschine. (Seit Dpkg 1.18.11).
.IP "\fB\s-1DEB_BUILD_ARCH_LIBC\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_LIBC"
Der Debian-Libc-Name der Baumaschine. (Seit Dpkg 1.18.11).
.IP "\fB\s-1DEB_BUILD_ARCH_OS\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_OS"
Der Debian-Systemname der Baumaschine. (Seit Dpkg 1.13.2).
.IP "\fB\s-1DEB_BUILD_ARCH_CPU\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_CPU"
Der Debian-CPU-Name der Baumaschine. (Seit Dpkg 1.13.2).
.IP "\fB\s-1DEB_BUILD_ARCH_BITS\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_BITS"
Die Zeigergr\(:o\(sse der Baumaschine in Bits. (Seit Dpkg 1.15.4).
.IP "\fB\s-1DEB_BUILD_ARCH_ENDIAN\s0\fR" 4
.IX Item "DEB_BUILD_ARCH_ENDIAN"
Die Bytereihenfolge der Baumaschine (little/big; seit Dpkg 1.15.4).
.IP "\fB\s-1DEB_BUILD_GNU_CPU\s0\fR" 4
.IX Item "DEB_BUILD_GNU_CPU"
Der CPU-Teil von \fB\s-1DEB_BUILD_GNU_TYPE\s0\fR.
.IP "\fB\s-1DEB_BUILD_GNU_SYSTEM\s0\fR" 4
.IX Item "DEB_BUILD_GNU_SYSTEM"
Der System-Teil von \fB\s-1DEB_BUILD_GNU_TYPE\s0\fR.
.IP "\fB\s-1DEB_BUILD_GNU_TYPE\s0\fR" 4
.IX Item "DEB_BUILD_GNU_TYPE"
Der GNU-Systemtyp der Baumaschine.
.IP "\fB\s-1DEB_BUILD_MULTIARCH\s0\fR" 4
.IX Item "DEB_BUILD_MULTIARCH"
Der klargestellte GNU-Systemtyp der Baumaschine, der f\(:ur Dateisystempfade
benutzt wird.
.IP "\fB\s-1DEB_HOST_ARCH\s0\fR" 4
.IX Item "DEB_HOST_ARCH"
Die Debian-Architektur der Host-Maschine.
.IP "\fB\s-1DEB_HOST_ARCH_ABI\s0\fR" 4
.IX Item "DEB_HOST_ARCH_ABI"
Der Debian-ABI-Name der Host-Maschine. (Seit Dpkg 1.18.11).
.IP "\fB\s-1DEB_HOST_ARCH_LIBC\s0\fR" 4
.IX Item "DEB_HOST_ARCH_LIBC"
Der Debian-Libc-Name der Host-Maschine. (Seit Dpkg 1.18.11).
.IP "\fB\s-1DEB_HOST_ARCH_OS\s0\fR" 4
.IX Item "DEB_HOST_ARCH_OS"
Der Debian-Systemname der Host-Maschine. (Seit Dpkg 1.13.2).
.IP "\fB\s-1DEB_HOST_ARCH_CPU\s0\fR" 4
.IX Item "DEB_HOST_ARCH_CPU"
Der Debian-CPU-Name der Host-Maschine. (Seit Dpkg 1.13.2).
.IP "\fB\s-1DEB_HOST_ARCH_BITS\s0\fR" 4
.IX Item "DEB_HOST_ARCH_BITS"
Die Zeigergr\(:o\(sse der Host-Maschine in Bits. (Seit Dpkg 1.15.4).
.IP "\fB\s-1DEB_HOST_ARCH_ENDIAN\s0\fR" 4
.IX Item "DEB_HOST_ARCH_ENDIAN"
Die Bytereihenfolge der Host-Maschine (little/big; seit Dpkg 1.15.4).
.IP "\fB\s-1DEB_HOST_GNU_CPU\s0\fR" 4
.IX Item "DEB_HOST_GNU_CPU"
Der CPU-Teil von \fB\s-1DEB_HOST_GNU_TYPE\s0\fR.
.IP "\fB\s-1DEB_HOST_GNU_SYSTEM\s0\fR" 4
.IX Item "DEB_HOST_GNU_SYSTEM"
Der System-Teil von \fB\s-1DEB_HOST_GNU_TYPE\s0\fR.
.IP "\fB\s-1DEB_HOST_GNU_TYPE\s0\fR" 4
.IX Item "DEB_HOST_GNU_TYPE"
Der GNU-Systemtyp der Host-Maschine.
.IP "\fB\s-1DEB_HOST_MULTIARCH\s0\fR" 4
.IX Item "DEB_HOST_MULTIARCH"
Der klargestellte GNU-Systemtyp der Host-Maschine, wird f\(:ur Dateisystempfade
benutzt. (Seit Dpkg 1.16.0).
.IP "\fB\s-1DEB_TARGET_ARCH\s0\fR" 4
.IX Item "DEB_TARGET_ARCH"
Die Debian-Architektur der Ziel-Maschine (seit Dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_ARCH_ABI\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_ABI"
Der Debian-ABI-Name der Ziel-Maschine. (Seit Dpkg 1.18.11).
.IP "\fB\s-1DEB_TARGET_ARCH_LIBC\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_LIBC"
Der Debian-Libc-Name der Ziel-Maschine. (Seit Dpkg 1.18.11).
.IP "\fB\s-1DEB_TARGET_ARCH_OS\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_OS"
Der Debian-Systemname der Ziel-Maschine. (Seit Dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_ARCH_CPU\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_CPU"
Der Debian-CPU-Name der Ziel-Maschine. (Seit Dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_ARCH_BITS\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_BITS"
Die Zeigergr\(:o\(sse der Ziel-Maschine in Bits. (Seit Dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_ARCH_ENDIAN\s0\fR" 4
.IX Item "DEB_TARGET_ARCH_ENDIAN"
Die Bytereihenfolge der Ziel-Maschine (little/big; seit Dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_GNU_CPU\s0\fR" 4
.IX Item "DEB_TARGET_GNU_CPU"
Der CPU-Teil von \fB\s-1DEB_TARGET_GNU_TYPE\s0\fR. (Seit Dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_GNU_SYSTEM\s0\fR" 4
.IX Item "DEB_TARGET_GNU_SYSTEM"
Der System-Teil von \fB\s-1DEB_TARGET_GNU_TYPE\s0\fR. (Seit Dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_GNU_TYPE\s0\fR" 4
.IX Item "DEB_TARGET_GNU_TYPE"
Der GNU-Systemtyp der Ziel-Maschine. (Seit Dpkg 1.17.14).
.IP "\fB\s-1DEB_TARGET_MULTIARCH\s0\fR" 4
.IX Item "DEB_TARGET_MULTIARCH"
Der klargestellte GNU-Systemtyp der Ziel-Maschine, wird f\(:ur Dateisystempfade
benutzt. (Seit Dpkg 1.17.14).
.SH "DATEIEN"
.IX Header "DATEIEN"
.SS "Architekturtabellen"
.IX Subsection "Architekturtabellen"
Alle diese Dateien m\(:ussen vorhanden sein, damit \fBdpkg-architecture\fR
funktioniert. Ihr Ort kann zur Laufzeit mit der Umgebungsvariable
\&\fB\s-1DPKG_DATADIR\s0\fR \(:uberschrieben werden. Diese Tabellen enthalten in der ersten
Zeile ein Format\-\fBVersion\fRs\-Pseudofeld, um ihre Version zu kennzeichnen, so
dass Auswerteprogramme pr\(:ufen k\(:onnen, ob sie es verstehen. Beispiel: \(Bq#
Version=1.0\(lq.
.IP "\fI\f(CI%PKGDATADIR\fI%/cputable\fR" 4
.IX Item "/usr/share/dpkg/cputable"
Tabelle der bekannten CPU-Namen und Abbildungen auf ihre
GNU-Namen. Formatversion 1.0 (seit Dpkg 1.13.2).
.IP "\fI\f(CI%PKGDATADIR\fI%/ostable\fR" 4
.IX Item "/usr/share/dpkg/ostable"
Tabelle der bekannten Betriebssystemnamen und Abbildungen auf ihre
GNU-Namen. Formatversion 2.0 (seit Dpkg 1.18.11).
.IP "\fI\f(CI%PKGDATADIR\fI%/tupletable\fR" 4
.IX Item "/usr/share/dpkg/tupletable"
Abbildung zwischen den Debian-Architektur-Tupeln und den
Debian-Architekturnamen. Formatversion 1.0 (seit Dpkg 1.18.11).
.IP "\fI\f(CI%PKGDATADIR\fI%/abitable\fR" 4
.IX Item "/usr/share/dpkg/abitable"
Tabelle von Debian-Architektur-ABI-Attributs-Hinwegsetzung. Formatversion
2.0 (seit Dpkg 1.18.11).
.SS "Paketierungsunterst\(:utzung"
.IX Subsection "Paketierungsunterst\(:utzung"
.IP "\fI\f(CI%PKGDATADIR\fI%/architecture.mk\fR" 4
.IX Item "/usr/share/dpkg/architecture.mk"
Make-Steuerdateischnipsel, das alle Variablen, die \fBdpkg-architecture\fR
ausgibt, korrekt setzt und exportiert (seit Dpkg 1.16.1).
.SH "BEISPIELE"
.IX Header "BEISPIELE"
\&\fBdpkg-buildpackage\fR akzeptiert die Option \fB\-a\fR und gibt diese an
\&\fBdpkg-architecture\fR weiter. Weitere Beispiele:
.Sp
.Vb 1
\& CC=i386\-gnu\-gcc dpkg\-architecture \-c debian/rules build
\&
\& eval $(dpkg\-architecture \-u)
.Ve
.PP
\(:Uberpr\(:ufen, ob die aktuelle oder angegebene Host-Architektur identisch zu
einer Architektur ist:
.Sp
.Vb 1
\& dpkg\-architecture \-elinux\-alpha
\&
\& dpkg\-architecture \-amips \-elinux\-mips
.Ve
.PP
\(:Uberpr\(:ufen, ob die aktuelle oder angegebene Host-Architektur ein
Linux-System ist:
.Sp
.Vb 1
\& dpkg\-architecture \-ilinux\-any
\&
\& dpkg\-architecture \-ai386 \-ilinux\-any
.Ve
.SS "Verwendung in debian/rules"
.IX Subsection "Verwendung in debian/rules"
Die Umgebungsvariablen, die von \fBdpkg-architecture\fR gesetzt werden, werden
an \fIdebian/rules\fR als Make-Variablen weitergegeben (lesen Sie hierzu die
Make-Dokumentation). Allerdings sollten Sie sich nicht auf diese verlassen,
da damit der manuelle Aufruf des Skripts verhindert wird. Stattdessen
sollten Sie sie immer mittels \fBdpkg-architecture\fR mit der Option \fB\-q\fR
initialisieren. Hier sind einige Beispiele, die auch zeigen, wie Sie die
Cross\-Kompilierungs\-Unterst\(:utzung in Ihrem Paket verbessern k\(:onnen:
.PP
Ermitteln des GNU-Systemtyps und dessen Weiterleitung an ./configure:
.Sp
.Vb 11
\& DEB_BUILD_GNU_TYPE ?= $(shell dpkg\-architecture \-qDEB_BUILD_GNU_TYPE)
\& DEB_HOST_GNU_TYPE ?= $(shell dpkg\-architecture \-qDEB_HOST_GNU_TYPE)
\& [â€¦]
\& ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
\&  confflags += \-\-build=$(DEB_HOST_GNU_TYPE)
\& else
\&  confflags += \-\-build=$(DEB_BUILD_GNU_TYPE) \e
\&               \-\-host=$(DEB_HOST_GNU_TYPE)
\& endif
\& [â€¦]
\& ./configure $(confflags)
.Ve
.PP
Etwas nur f\(:ur eine bestimmte Architektur erledigen:
.Sp
.Vb 1
\& DEB_HOST_ARCH ?= $(shell dpkg\-architecture \-qDEB_HOST_ARCH)
\&
\& ifeq ($(DEB_HOST_ARCH),alpha)
\&  [â€¦]
\& endif
.Ve
.PP
oder, falls Sie nur den \s-1CPU\-\s0 oder OS-Typ \(:uberpr\(:ufen m\(:ussen, verwenden Sie
die Variablen \fB\s-1DEB_HOST_ARCH_CPU\s0\fR oder \fB\s-1DEB_HOST_ARCH_OS\s0\fR.
.PP
Um alle Variablen, die \fBdpkg-architecture\fR bereitstellen kann, korrekt zu
setzen, k\(:onnen Sie auch extern ein Make-Steuerdateischnipsel verwenden:
.Sp
.Vb 1
\& include /usr/share/dpkg/architecture.mk
\&
\& ifeq ($(DEB_HOST_ARCH),alpha)
\&  [â€¦]
\& endif
.Ve
.PP
Auf jeden Fall sollten Sie niemals \fBdpkg \-\-print\-architecture\fR verwenden,
um die Architekturinformationen w\(:ahrend eines Paketbaus zu erhalten.
.SH "UMGEBUNG"
.IX Header "UMGEBUNG"
.IP "\fB\s-1DPKG_DATADIR\s0\fR" 4
.IX Item "DPKG_DATADIR"
Falls dies gesetzt ist, wird es als Datenverzeichnis von \fBdpkg\fR verwandt,
in dem sich die Architekturtabellen befinden (seit Dpkg
1.14.17). Standardm\(:a\(ssig \(Bq/usr/share/dpkg\(lq.
.IP "\fB\s-1DPKG_COLORS\s0\fR" 4
.IX Item "DPKG_COLORS"
Setzt den Farbmodus (seit Dpkg 1.18.5). Die derzeit unterst\(:utzten Werte
sind: \fBauto\fR (Vorgabe), \fBalways\fR und \fBnever\fR.
.IP "\fB\s-1DPKG_NLS\s0\fR" 4
.IX Item "DPKG_NLS"
Falls dies gesetzt ist, wird es zur Entscheidung, ob Native Language
Support, auch als Unterst\(:utzung f\(:ur Internationalisierung (oder i18n)
bekannt, aktiviert wird (seit Dpkg 1.19.0). Die akzeptierten Werte sind:
\&\fB0\fR und \fB1\fR (Vorgabe).
.SH "BEMERKUNGEN"
.IX Header "BEMERKUNGEN"
Alle langen Befehle und Optionennamen sind seit Dpkg 1.17.17 verf\(:ugbar.
.SH "SIEHE AUCH"
.IX Header "SIEHE AUCH"
\&\fBdpkg-buildpackage\fR(1).
.SH "\(:UBERSETZUNG"
.IX Header "\(:UBERSETZUNG"
Die deutsche \(:Ubersetzung wurde 2004, 2006\-2020 von Helge Kreutzmann
<debian@helgefjell.de>, 2007 von Florian Rehnisch <eixman@gmx.de> und
2008 von Sven Joachim <svenjoac@gmx.de>
angefertigt. Diese \(:Ubersetzung ist Freie Dokumentation; lesen Sie die
\&\s-1GNU\s0 General Public License Version 2 oder neuer f\(:ur die Kopierbedingungen.
Es gibt \s-1KEINE HAFTUNG.\s0
