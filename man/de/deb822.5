.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "deb822 5"
.TH deb822 5 "2020-08-02" "1.20.5" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "BEZEICHNUNG"
.IX Header "BEZEICHNUNG"
deb \- Debian\-RFC822\-Steuerdatenformat
.SH "BESCHREIBUNG"
.IX Header "BESCHREIBUNG"
Die in einem gemeinsamen Format dargestellten Daten des
Paketverwaltungssystems, gespeichert in \fISteuerdateien\fR. Steuerdateien
werden f\(:ur Quellpakete, Bin\(:arpakete und die \fB.changes\fR\-Dateien, die die
Installation von hochgeladenen Dateien steuern, verwandt (die internen
Datenbanken von \fBdpkg\fR sind in einem \(:ahnlichen Format).
.SH "SYNTAX"
.IX Header "SYNTAX"
Eine Steuerdatei besteht aus einem oder mehreren Abs\(:atzen mit Feldern. Die
Abs\(:atze werden durch Leerzeilen getrennt. Auswertprogramme k\(:onnen Zeilen,
die nur aus U+0020 \fBLeerzeichen\fR und U+0009 \fBTabulatoren\fR als
Absatztrennern bestehen, akzeptieren, allerdings sollten Steuerdateien nur
Leerzeilen verwenden. Einige Steuerdateien erlauben nur einen Absatz, andere
erlauben mehrere. In letzterem Fall bezieht sich jeder Absatz normalerweise
auf ein anderes Paket. (Beispielsweise bezieht sich der erste Absatz in
Quellpaketen auf das Quellpaket und nachfolgende Abs\(:atze beziehen sich auf
die Bin\(:arpakete, die aus dieser Quelle erstellt werden.) Die Reihenfolge der
Abs\(:atze in Steuerdateien ist relevant.
.PP
Jeder Absatz besteht aus einer Reihe von Datenfeldern. Jedes Feld besteht
aus dem Feldnamen, gefolgt von einem Doppelpunkt (U+003A \(bq\fB:\fR\(cq) und den
Daten/Werten, die dem Feld zugeordnet sind. Der Feldname besteht aus
US-ASCII-Zeichen, au\(sser den Steuerzeichen, dem Leerzeichen und dem
Doppelpunkt (d.h. Zeichen in den Bereichen U+0021 \(bq\fB!\fR\(cq bis U+0039 \(bq\fB9\fR\(cq
und U+003B \(bq\fB;\fR\(cq bis U+007E \(bq\fB~\fR\(cq einschlie\(sslich). Feldnamen d\(:urfen nicht
mit dem Kommentarzeichen (U+0023 \(bq\fB#\fR\(cq) oder dem Bindestrich (U+002D
\(bq\fB\-\fR\(cq) beginnen.
.PP
Das Feld endet am Zeilenende oder am Ende der letzten Fortsetzungszeile
(siehe unten). Horizontaler Leerraum (U+0020 \fB\s-1LEERZEICHEN\s0\fR und U+0009
\&\fB\s-1TABULATOR\s0\fR) kann sofort nach oder vor dem Wert vorkommen und wird dort
ignoriert; als Konvention wird ein einzelnes Leerzeichen nach dem
Doppelpunkt gesetzt. Ein Feld k\(:onnte beispielsweise sein:
.Sp
.Vb 1
\& Package: dpkg
.Ve
.PP
Der Feldname lautet \fBPackage\fR und der Feldwert \fBdpkg\fR.
.PP
Leere Feldwerte sind nur in Quellpaket-Steuerdateien (\fIdebian/control\fR)
erlaubt. Solche Felder werden ignoriert.
.PP
In einem Absatz darf ein bestimmter Feldname nicht mehrfach vorkommen.
.PP
Es gibt drei Arten von Feldern:
.RS 4
.IP "\fBsimple\fR" 4
.IX Item "simple"
Ein Feld, einschlie\(sslich des Wertes, muss eine einzelne Zeile sein. Falten
(Umbrechen) des Feldes ist nicht erlaubt. Dies ist der Standardtyp, falls
die Definition des Feldes nicht einen anderen Typ spezifiziert.
.IP "\fBfolded\fR" 4
.IX Item "folded"
Der Wert des gefalteten Feldes ist eine logische Zeile, die sich \(:uber
mehrere Zeilen erstrecken kann. Die Zeilen nach der ersten werden
Fortsetzungszeilen genannt und m\(:ussen mit einem U+0020 \fB\s-1LEERZEICHEN\s0\fR oder
U+0009 \fB\s-1TABULATOR\s0\fR beginnen. Leerraum, darunter Zeilenumbr\(:uche, ist f\(:ur die
Feldwerte gefalteter Zeilen nicht signifikant.
.Sp
Diese Faltmethode ist \(:ahnlich \s-1RFC5322\s0 und erlaubt Steuerdateien, die nur
einen Absatz und keine mehrzeiligen Abs\(:atze, die von f\(:ur \s-1RFC5322\s0
geschriebenen Auswertprogrammen eingelesen werden m\(:ussen, enthalten.
.IP "\fBmultiline\fR" 4
.IX Item "multiline"
Der Wert eines mehrzeiligen Feldes darf mehrere Fortsetzungszeilen
enthalten. Die erste Zeile des Wertes, der Teil der auf der gleichen Zeile
wie der Feldname ist, hat oft eine spezielle Bedeutung oder k\(:onnte leer sein
m\(:ussen. Weitere Zeilen werden hinzugef\(:ugt und folgen der gleichen Syntax wie
die Fortsetzungszeilen von anderen gefalteten Feldern. Leerraum, inklusive
Zeilenumbr\(:uchen, ist im Wert von mehrzeiligen Feldern signifikant.
.RE
.RS 4
.Sp
Leerraum darf nicht innerhalb von Namen (von Paketen, Architekturen, Dateien
oder sonstigem) oder Versionsnummern oder zwischen den Zeichen einer
Mehrzeichenversionsbeziehung auftauchen.
.Sp
Die Existenz und der Zweck eines Feldes und die Syntax seines Wertes k\(:onnen
zwischen den Arten der Steuerdateien variieren.
.Sp
Die Gro\(ss\-/Kleinschreibung ist bei Feldnamen nicht relevant, aber
normalerweise wird die Gro\(ssschreibung eines Feldes in der nachfolgend
gezeigten gemischten Weise vorgenommen. Bei den Feldwerten ist die
Gro\(ss\-/Kleinschreibung relevant, au\(sser die Beschreibung sagt etwas anderes.
.Sp
Absatztrenner (leere Zeilen) und Zeilen, die nur aus U+0020 \fB\s-1LEERZEICHEN\s0\fR
und U+0009 \fB\s-1TABULAOREN\s0\fR bestehen, sind in Feldwerten oder zwischen Feldern
nicht erlaubt. Leere Zeilen und Feldwerte werden normalerweise maskiert,
indem sie durch ein U+0020 \fB\s-1LEERZEICHEN\s0\fR gefolgt von einem Satzpunkt
(U+002E \(bq\fB.\fR\(cq) dargestellt werden.
.Sp
Zeilen, die mit U+0023 \(bq\fB#\fR\(cq ohne einen vorangestellten Leerraum beginnen,
sind Kommentarzeilen, die nur in Quellpaketsteuerdateien (\fIdebian/control\fR)
und in \fBdeb-origin\fR(5)\-Dateien erlaubt sind. Diese Kommentarzeilen werden
ignoriert, selbst zwischen zwei Fortsetzungszeilen. Sie beenden keine
logischen Zeilen.
.Sp
Alle Steuerdateien m\(:ussen in \s-1UTF\-8\s0 kodiert sein.
.RE
.SH "SIEHE AUCH"
.IX Header "SIEHE AUCH"
\&\fB\s-1RFC822\s0\fR, \fB\s-1RFC5322\s0\fR.
.SH "\(:UBERSETZUNG"
.IX Header "\(:UBERSETZUNG"
Die deutsche \(:Ubersetzung wurde 2004, 2006\-2020 von Helge Kreutzmann
<debian@helgefjell.de>, 2007 von Florian Rehnisch <eixman@gmx.de> und
2008 von Sven Joachim <svenjoac@gmx.de>
angefertigt. Diese \(:Ubersetzung ist Freie Dokumentation; lesen Sie die
\&\s-1GNU\s0 General Public License Version 2 oder neuer f\(:ur die Kopierbedingungen.
Es gibt \s-1KEINE HAFTUNG.\s0
