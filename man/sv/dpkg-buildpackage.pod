
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NAMN

dpkg-buildpackage - bygg binär- eller källkodspaket från källkod

=head1 SYNOPS

B<dpkg-buildpackage> [I<flagga>...]

=head1 BESKRIVNING

B<dpkg-buildprogram> är ett program som automatiserar processen med att bygga ett Debianpaket. Det består av följande steg:

=over 

=item B<1.>

It runs the B<preinit> hook before reading any source file.  It prepares the build environment by setting various environment variables (see B<ENVIRONMENT>), runs the B<init> hook, and calls B<dpkg-source --before-build> (unless B<-T> or B<--target> has been used).

=item B<2.>

Byggberoenden och -konflikter kontrolleras att de uppfylls (såvida inte B<-d> eller B<--no-check-builddeps> anges).

=item B<3.>

Om ett eller flera specifika mål har valts med flaggan B<-T> eller B<--target> anropas de målen, varpå programmet avslutas. I annat fall körs kroken B<preclean> och anropas B<fakeroot debian/rules clean> för att städa byggträdet (såvida inte B<-nc> eller  B<--no-pre-clean> anges).

=item B<4.>

Kör kroken B<source> och anropar B<dpkg-source -b> för att skapa källkodspaketet (om ett B<source>-bygge (källkod) har ombetts via B<--build> eller liknande flaggor).

=item B<5.>

Kör kroken B<build> och anropar B<debian/rules> I<byggmål>, därefter körs kroken B<binary> följt av B<fakeroot debian/rules> I<binärmål> (såvida inte ett bygge av enbart källkod har valts med B<--build=source> eller liknande flaggor). Observera att I<byggmål> och I<binärmål> är ett av B<build> och B<binary> (förval, eller om ett B<any>- eller B<all>-bygge har valts med B<--build> eller motsvarande flaggor), eller B<build-arch> och B<binary-arch> (om ett B<any>- men inte ett B<all>-bygge har valts med B<--build> eller liknande flaggor), eller B<build-indep> och B<binary-indep> (om ett B<all>- men inte ett B<any>-bygge har valts med B<--build> eller liknande flaggor).

=item B<6.>

Kör kroken B<buildinfo> och anropar B<dpkg-genbuildinfo> för att skapa en B<.buildinfo>-fil. Många av flaggorna till B<dpkg-buildpackage> vidaresänds till B<dpkg-genchanges>.

=item B<7.>

It runs the B<changes> hook and calls B<dpkg-genchanges> to generate a B<.changes> file.  The name of the B<.changes> file will depend on the type of build and will be as specific as necessary but not more; the name will be:

=over 

=item I<source-name>B<_>I<binary-version>B<_>I<arch>B<.changes>

for a build that includes B<any>

=item I<source-name>B<_>I<binary-version>B<_>B<all.changes>

otherwise for a build that includes B<all>

=item I<source-name>B<_>I<source-version>B<_>B<source.changes>.

otherwise for a build that includes B<source>

=back

Many B<dpkg-buildpackage> options are forwarded to B<dpkg-genchanges>.

=item B<8.>

Kör kroken B<postclean> och, om B<-tc> eller B<--post-clean> anges, anropar B<fakeroot debian/rules clean> ytterligare en gång.

=item B<9.>

Anropar B<dpkg-source --after-build>.

=item B<10.>

Kör kroken B<check> och anropar en paketkontrollerare för B<.changes>-filen (om ett kommando har angivits med B<DEB_CHECK_COMMAND> eller med B<--check-command>).

=item B<11.>

Kör kroken B<sign> och signerar med OpenPGP-programmet (såvida det inte är ett UNRELEASED-bygge, eller om B<--no-sign> angavs) för att signera B<.dsc>-filen (om sådan finns, såvida inte B<-us> eller B<--unsigned-source> anges), B<.buildinfo>-filen (såvida inte B<-ui>, B<--unsigned-buildinfo>, B<-uc> eller B<--unsigned-changes> anges) och B<.changes>-filen (såvida inte B<-uc> eller B<--unsigned-changes> anges).

=item B<12.>

Kör kroken B<done>.

=back

=head1 FLAGGOR

Alla långa flaggor kan ges både på kommandoraden och i B<dpkg-buildpackage>:s system- och användarkonfigurationsfiler. En rad i konfigurationsfilen är antingen en flagga (precis samma som på kommandoraden, men utan inledande bindestreck) eller en kommentar (om den börjar med ett ”B<#>”).

=over 

=item B<--build=>I<typ>

Anger bygg-I<type> från en kommaavdelad lista med komponenter (sedan dpkg 1.18.5). Alla angivna komponenter kombineras för att välja den byggtypen som ska användas i den enda körningen, vilket leder till en enda byggkörning som skapar en F<.changes>-fil. Sänds vidare till B<dpkg-genchanges>.

Tillåtna värden är:

=over 

=item B<source>

Bygger källkodspaketet.

B<Note>: When using this value standalone and if what you want is simply to (re-)build the source package from a clean source tree, using B<dpkg-source> directly is always a better option as it does not require any build dependencies to be installed which are otherwise needed to be able to call the B<clean> target.

=item B<any>

Bygger arkitekturspecifika binärpaket.

=item B<all>

Bygger de arkitekturoberoende binärpaketen.

=item B<binary>

Bygger arkitekturspecifika och -oberoende binärpaket. Detta är ett alias till B<any,all>.

=item B<full>

Bygger allting. Detta är ett alias för B<source,any,all>, och är detsamma som standardläget om inga byggflaggor anges.

=back

=item B<-g>

Motsvarar B<--build=source,all> (sedan dpkg 1.17.11).

=item B<-G>

Motsvarar B<--build=source,any> (sedan dpkg 1.17.11).

=item B<-b>

Motsvarar B<--build=binary> eller B<--build=any,all>.

=item B<-B>

Motsvarar B<--build=any>.

=item B<-A>

Motsvarar B<--build=all>.

=item B<-S>

Motsvarar B<--build=source>.

=item B<-F>

Motsvarar B<--build=full>, B<--build=source,binary> eller B<--build=source,any,all> (sedan dpkg 1.15.8).

=item B<--target=>I<mål>[,...]

=item B<--target> I<mål>[,...]

=item B<-T>, B<--rules-target=>I<mål>[,...]

Anropar B<debian/rules> I<mål> en gång per angivet mål, efter att ha konfigurerat byggmiljön (förutom att anropa B<dpkg-source --before-build>), och avbryter byggprocessen efteråt (sedan dpkg 1.15.0, lång flagga sedan dpkg 1.18.8, stöd för flera mål sedan dpkg 1.18.16). Om B<--as-root> också anges körs kommandot som root (se B<--root-command>). Observera att kända mål som måste köras som root inte behöver flaggan (dvs. målen B<clean>, B<binary>, B<binary-arch> och B<binary-indep>).

=item B<--as-root>

Ger endast mening tillsammans med B<--target> (sedan dpkg 1.15.0). Kräver att målet körs med root-behörighet.

=item B<-si>

=item B<-sa>

=item B<-sd>

=item B<-v>I<version>

=item B<-C>I<ändringsbeskrivning>

=item B<-m>I<paketansvarige-adress>

=item B<-e>I<paketansvarige-adress>

Sänds vidare utan ändringar till B<dpkg-genchanges>. Se dess manualsida.

=item B<--build-by=>I<paketansvarige-adress>

=item  B<--source-by=>I<paketansvarige-adress> (sedan dpkg 1.21.10)

Sänds som B<-m> till B<dpkg-genchanges>. Se dess manualsida.

=item B<--release-by=>I<paketansvarige-adress>

=item B<--changed-by=>I<paketansvarige-adress> (sedan dpkg 1.21.10)

Sänds som B<-e> till B<dpkg-genchanges>. Se dess manualsida.

=item B<-a>, B<--host-arch> I<arkitektur>

Ange Debianarkitekturen vi bygger för (lång flagga sedan dpkg 1.17.17). Arkitekturen för maskinen vi bygger på bestäms automatiskt, och är även standard för värdmaskinen.

=item B<-t>, B<--host-type> I<gnu-system-typ>

Ange GNU-systemtyp vi bygger för (lång flagga sedan dpkg 1.17.17). Den kan användas i stället för B<--host-arch> eller som ett komplement för att överstyra standard-GNU-systemtypen för Debian-målarkitekturen.

=item B<--target-arch> I<arkitektur>

Ange Debianarkitekturen binärerna som byggs bygger för (sedan dpkg 1.17.17). Standardvärde är värdmaskinen.

=item B<--target-type> I<gnu-system-type>

Ange GNU-systemtyp vi binärerna vi som byggs bygger för (sedan dpkg 1.17.17). Den kan användas i stället för B<--target-arch> eller som ett komplement för att överstyra standard-GNU-systemtypen för Debian-målarkitekturen.

=item B<-P>, B<--build-profile=>I<profil>[B<,>...]

Ange profil(er) vi bygger, som en kommaavdelad lista (sedan dpkg 1.17.2, lång flagga sedan dpkg 1.18.8). Standardbeteendet är att inte bygga för någon specifik profil. Lägger även till dem (som en blankstegsavdelad lista) till miljövariabeln B<DEB_BUILD_PROFILES> vilket, till exempel, gör det möjligt för B<debian/rules>-filer att använda informationen för villkorliga byggen.

=item B<-j>, B<--jobs>[=I<jobb>|B<auto>]

Antalet jobb som tillåts att köras samtidigt (sedan dpkg 1.14.7, lång flagga sedan dpkg 1.18.8). Antal jobb motsvarande antalet tillgängliga processorer om B<auto> anges (sedan dpkg 1.17.10), eller ett obegränsat antal om I<jobb> inte anges. Förvalt beteende är B<auto> (sedan dpkg 1.18.11) i icke-tvingat läge (sedan dpkg 1.21.10), och som sådant är det alltid säkrare att använda med alla paket, däribland de som inte kan byggas parallellt på ett säkert sätt. Om antal jobb sätts till B<1> kommer seriell exekvering att återställas.

Lägger till B<parallel=>I<jobb> eller B<parallel> till miljövariabeln B<DEB_BUILD_OPTIONS>, vilket gör det möjligt för debian/rules-filer att använda informationen för egna ändamål om de önskar. Värdet för I<jobb> kommer att överstyra värdet B<parallel=>I<jobb> eller B<parallel> i miljövariabeln B<DEB_BUILD_OPTIONS>. Observera att B<auto>-värdet kommer ersättas av det faktiska antalet för närvarande aktiva processorer, och därför inte kommer sändas med till barnprocesser. Om antalet tillgängliga processorer inte kan tas fram kommer koden att falla tillbaka till seriell exekvering (sedan dpkg 1.18.15), även om detta bara borde ske på exotiska och icke stödda system.

=item B<-J>, B<--jobs-try>[=I<jobb>|B<auto>]

Den här flaggan (sedan dpkg 1.18.2, lång flagga sedan dpkg 1.18.8) motsvarar B<-j> ovan.

Eftersom beteendet för B<-j> ändrades i dpkg 1.21.10 till att vara valfritt kan du använda den här flaggan istället om du måste garantera semantiken över flera dpkg-utgivningsserier.

=item B<--jobs-force>[=I<jobs>|B<auto>]

Den här flaggan (sedan dpkg 1.12.10) motsvarar flaggan B<--jobs> med undantaget att det aktiverar tvingat parallellt läge, genom att lägga till B<make> B<-j>-flaggan med antalet beräknade parallella jobb i miljövariabeln B<MAKEFLAGS>.

Detta borde göra så att alla senare make-anrop ärver flaggan och därmed påtvinga parallelliseringsinställningen i paketeringen (och möjligen uppströmsbyggsystemet om det det använder L<make(1)>), oberoende av om det stöder parallella bygg, något som kan komma att orsaka byggfel.

B<Note>: Any Makefile that is not parallel-safe should be considered to be buggy.  These should either be made parallel-safe, or marked as not being safe with the L<make(1)> B<.NOTPARALLEL> target.

=item B<-D>, B<--check-builddeps>

Kontrollera  byggberoenden och -konflikter; avbryt om de inte uppfylls (lång flagga sedan dpkg 1.18.8). Detta är standardbeteendet.

=item B<-d>, B<--no-check-builddeps>

Kontrollera inte byggberoenden eller -konflikter (lång flagga sedan dpkg 1.18.8).

=item B<--ignore-builtin-builddeps>

Kontrollera inte inbyggda byggberoenden och -konflikter (sedan dpkg 1.18.2). Detta är de distributionsberoende byggberoendena som vanligtvis krävs i en byggmiljö, paketuppsättningen som kallas Build-Essential (”Bygg-Nödvändiga”).

=item B<--rules-requires-root>

Följ inte fältet B<Rules-Requires-Root>, fall tillbaka på dess gamla förval (sedan dpkg 1.19.1).

=item B<-nc>, B<--no-pre-clean>

Städa inte upp byggträdet före bygget (lång flagga sedan dpkg 1.18.8). Implicerar B<-b> om inget annat har valts bland B<-F>, B<-g>, B<-G>, B<-B>, B<-A> eller B<-S>. Implicerar B<-d> med B<-S> (sedan dpkg 1.18.0).

=item B<--pre-clean>

Städa källkodsträdet före bygget (sedan dpkg 1.18.8). Detta är standardbeteendet.

=item B<-tc>, B<--post-clean>

Städa källkodsträdet (använder I<få-root-kommando> B<debian/rules clean>) efter att paketet har byggts (lång flagga sedan dpkg 1.18.8).

=item B<--no-post-clean>

Städa inte upp byggträdet efter bygget (sedan dpkg 1.19.1). Detta är standardbeteendet.

=item B<--sanitize-env>

Sanera byggmiljön (sedan dpkg 1.20.0). Detta återställer eller tar bort miljövariabler, umask, och eventuella andra processattribut som annars kan påverka paketbygget ogynnsamt. Eftersom den officiella startpunkten för att bygga paket är B<debian/rules> kan inte paket vara beroende av att de här inställningarna är på plats, och bör därför fungera även när de inte är det. Vad som saneras är återförsäljarspecifikt.

=item B<-r>, B<--root-command=>I<gain-root-command>

När B<dpkg-buildpackages> behöver exekvera delar av byggprocessen som root sätter den kommandot som ska exekveras efter I<få-root-kommando> om ett sådant har angivits (lång flagga sedan dpkg 1.18.8). Om inte kommer B<fakeroot> att användas som standard, om kommandot existerar. I<få-root-kommando> måste börja med namnet på det faktiska kommandot som ska anropas samt de parametrar det ska anropas med. I<få-root-kommando> kan innehålla parametrar (de måste vara avdelade med blanksteg) men inga skalmetatecken. I<få-root-kommando> kan typiskt vara B<fakeroot>, B<sudo>, B<super> eller B<really>. B<su> är inte lämpligt eftersom det kräver flaggan B<-c> för att köra ett kommando och även då kan det bara starta användarens skal med B<-c> istället för att sända flaggor individuellt till kommandot som ska startas.

=item B<-R>, B<--rules-file=>I<rules-fil>

För att bygga ett Debianpaket körs normalt kommandot B<debian/rules> med flera olika standardparametrar (sedan dpkg 1.14.17, lång flagga sedan dpkg 1.18.8). Den här flaggan gör det möjligt att använda ett annat programanrop för att bygga paketet (det kan innehålla blankstegsavdelade parametrar). Den kan även användas för att exekvera standardregelfilen med ett annat make-program (till exempel genom att använda B</usr/local/bin/make -f debian/rules> som I<regelfil>).

=item B<--check-command=>I<kontrollkommando>

Kommando som kontrollerar själva B<.changes>-filen och byggda artifakter som refereras i filen (sedan dpkg 1.17.6). Kommandot ska ta sökvägen till B<.changes> som argument. Kommandot är normalt B<lintian>.

=item B<--check-option=>I<val>

Sänder flaggan I<val> till det I<kontrollkommando> som anges med B<DEB_CHECK_COMMAND> eller B<--check-command> (sedan dpkg 1.17.6). Kan användas flera gånger.

=item B<--hook->I<kroknamn>B<=>I<krokkommando>

Sätter den angivna skalkoden i I<krokkommando> som kroken I<kroknamn>, vilket körs vid de tidpunkter som anges i byggstegen (sedan dpkg 1.17.6). Kroken kommer alltid att exekveras även om de efterföljande funktionerna inte utförs (förutom kroken B<binary>). Alla krokar körs i den uppackade källkodskatalogen.

Some hooks can receive addition information through environment variables (since dpkg 1.22.0).  All hooks get the hook name in the B<DPKG_BUILDPACKAGE_HOOK_NAME> environment variable (since dpkg 1.22.0).

B<Note>: Hooks can affect the build process, and cause build failures if their commands fail, so watch out for unintended consequences.

För närvarande stöds följande I<kroknamn>:

=over 

=item B<preinit>

=item B<init>

=item B<preclean>

=item B<source>

Gets B<DPKG_BUILDPACKAGE_HOOK_SOURCE_OPTIONS> with the space-separated lists of options that will passed to the B<dpkg-source> call.

=item B<build>

Gets B<DPKG_BUILDPACKAGE_HOOK_BUILD_TARGET> with the name of the B<debian/rules> build target called, but only if called.

=item B<binary>

Gets B<DPKG_BUILDPACKAGE_HOOK_BINARY_TARGET> with the name of the B<debian/rules> binary target called, but only if called.

=item B<buildinfo>

Gets B<DPKG_BUILDPACKAGE_HOOK_BUILDINFO_OPTIONS> with the space-separated lists of options that will passed to the B<dpkg-genbuildinfo> call.

=item B<changes>

Gets B<DPKG_BUILDPACKAGE_HOOK_CHANGES_OPTIONS> with the space-separated lists of options that will passed to the B<dpkg-genchanges> call.

=item B<postclean>

=item B<check>

Gets B<DPKG_BUILDPACKAGE_HOOK_CHECK_OPTIONS> with the space-separated lists of options that will passed to the check command call.

=item B<sign>

=item B<done>

=back

I<krokkommando> stöder följande substitueringsformatsträng, som appliceras på den föra exekvering:

=over 

=item B<%%>

Ett ensamt %-tecken.

=item B<%a>

Ett booleskt värde (0 eller 1) som anger om följande funktion utförs.

=item B<%p>

Namnet på källkodspaketet.

=item B<%v>

Version för källkodspaketet.

=item B<%s>

Version för källkodspaketet (utan epoken).

=item B<%u>

Uppströmsversionen.

=back

=item B<--buildinfo-file=>I<filnamn>

Ange I<filnamn> att använda för den skapade B<.buildinfo>-filen (sedam dpkg 1.21.0).

=item B<--buildinfo-option=>I<val>

Sänder flaggan I<val> till B<dpkg-genbuildinfo> (sedan dpkg 1.18.11). Kan användas flera gånger.

=item B<--sign-backend=>I<signeringsfunktion>

Ange ett OpenPGP-funktionsgränssnitt att använda när I<sign-command> körs (sedan dpkg 1.21.10).

Förvalet är B<auto>, där det bästa för närvarande tillgängliga funktionen kommer användas. De specifika OpenPGP-funktioner som stöds är, med det bästa först:

=over 4

=item B<sop>

(any conforming Stateless OpenPGP implementation)

=item B<sq>

(from Sequoia-PGP)

=item B<gpg>

(from GnuPG)

=back

=item B<-p>, B<--sign-command=>I<signeringskommando>

When B<dpkg-buildpackage> needs to execute an OpenPGP backend command to sign a source control (B<.dsc>) file, a B<.buildinfo> file or a B<.changes> file it will run I<sign-command> (searching the B<PATH> if necessary) instead of the default or auto-detected backend command (long option since dpkg 1.18.8).  I<sign-command> will get all the backend specific arguments according to the B<--sign-backend> selected.  I<sign-command> should not contain spaces or any other shell metacharacters.

=item B<-k>, B<--sign-keyid=>I<nyckel-id>

=item B<--sign-key=>I<nyckel-id>

Ange en Open PGP-nyckel-id (antingen ett fingeravtryck eller ett användar-ID) för den hemliga nyckeln att använda vid signering av paket (B<--sign-key> sedan dpkg 1.18.8, B<--sign-keyid> sedan dpkg 1.21.10).

=item B<--sign-keyfile=>I<nyckelfil>

Ange en OpenPGP-I<nyckelfil> som innehåller den hemliga nyckeln att använda vid signering av paket (sedan dpkg 1.21-10).

B<Note>: For security reasons the I<key-file> is best kept locked with a password.

=item B<-us>, B<--unsigned-source>

Signera inte källkodspaketet (lång flagga sedan dpkg 1.18.8).

=item B<-ui>, B<--unsigned-buildinfo>

Signera inte B<.buildinfo>-filen (sedam dpkg 1.18.19).

=item B<-uc>, B<--unsigned-changes>

Signera inte B<.buildinfo>- och B<.changes>-filerna (lång flagga sedan dpkg 1.18.8).

=item B<--no-sign>

Signera inga filer, detta omfattar källkodspaketet, B<.buildinfo>-filen och B<.changes>-filen (sedan dpkg 1.18.20).

=item B<--force-sign>

Tvinga signering av de slutliga filerna (sedan dpkg 1.17.0), oberoende av B<-us>, B<--unsigned-source>, B<-ui>, B<--unsigned-buildinfo>, B<-uc>, B<--unsigned-changes> eller annan intern heuristik.

=item B<-sn>

=item B<-ss>

=item B<-sA>

=item B<-sk>

=item B<-su>

=item B<-sr>

=item B<-sK>

=item B<-sU>

=item B<-sR>

=item B<-i>, B<--diff-ignore>[=I<reg.uttr>]

=item B<-I>, B<--tar-ignore>[=I<mönster>]

=item B<-z>, B<--compression-level>=I<nivå>

=item B<-Z>, B<--compression>=I<komprimering>

Sänds vidare utan ändringar till B<dpkg-source>. Se dess manualsida.

=item B<--source-option=>I<val>

Sänd flaggan I<val> till B<dpkg-source> (sedan dpkg 1.15.6). Kan användas flera gånger.

=item B<--changes-file=>I<filnamn>

Använd I<filnamn> för den genererade B<.changes>-filen (sedan dpkg 1.21.0).

=item B<--changes-option=>I<val>

Sänder flaggan I<val> till B<dpkg-genchanges> (sedan dpkg 1.15.6). Kan användas flera gånger.

=item B<--admindir=>I<kat>

=item B<--admindir> I<kat>

Ändra platsen för B<dpkg>-databasen (sedan dpkg 1.14.0). Förvald plats är I<%ADMINDIR%>.

=item B<-?>, B<--help>

Visar hjälpskärm och avslutar.

=item B<--version>

Visar version och avslutar.

=back

=head1 MILJÖVARIABLER

=head2 Extern miljö

=over 

=item B<DEB_CHECK_COMMAND>

Om satt, används som kommandot för att kontrollera B<.changes>-filen (sedan dpkg 1.17.6). Överstyrs av flaggan B<--check-command>.

=item B<DEB_SIGN_KEYID>

Används för att signera filerna B<.changes>, B<.buildinfo> och B<.dsc>-filerna om satt (sedan dpkg 1.17.2). Överstyrs av flaggan B<--sign-key>.

=item B<DEB_SIGN_KEYFILE>

Används för att signera filerna B<.changes>, B<.buildinfo> och B<.dsc>-filerna om satt (sedan dpkg 1.21.10). Överstyrs av flaggan B<--sign-keyfile>.

=item B<DEB_BUILD_OPTIONS>

If set, it will contain a space-separated list of options that affect the behavior of some dpkg tools involved in package building, and might affect the package build process if the code in F<debian/rules> honors them.

The following are the options known and supported by dpkg tools, other options honored by F<debian/rules> might be defined by distribution specific policies.

=over 

=item B<parallel=>I<N>

The F<debian/rules> in the packaging might use this option to set up the build process to use I<N> parallel jobs.  It is overridden by the B<--jobs> and B<--jobs-force> options.

=item B<nocheck>

B<dpkg-buildpackage> will ignore the B<DEB_CHECK_COMMAND> variable.  The F<debian/rules> in the packaging is not expected to run test suites during the build.

=item B<noopt>

If F<debian/rules> calls B<dpkg-buildflags> to set up the build flags, those will be set to not enable any optimizations.

=item B<nostrip>

The F<debian/rules> in the packaging should ensure that objects do not get the debugging information stripped.  If F<debian/rules> includes the B<mk/buildtools.mk> make fragment the B<STRIP> make variable will respect this option.

=item B<terse>

B<dpkg-buildpackage> will append the B<--no-print-directory> L<make(1)> flag to the B<MAKEFLAGS> environment variable.  The F<debian/rules> in the packaging should reduce verbosity, while not being completely quiet.

=back

=item B<DEB_BUILD_PROFILES>

Om satt, används som aktiv(a) byggprofil(er) för paketet som byggs (sedan dpkg 1.17.2). Det är en blankstegsavdelad lista med profilnamn. Överstyrs av flaggan B<-P>.

=item B<DPKG_COLORS>

Väljer färgläge (sedan dpkg 1.18.5). För närvarande godtas följande värden: B<auto> (förval), B<always> och B<never>.

=item B<DPKG_NLS>

Om satt, används för att bestämma om lokalt språkstöd ska aktiveras, även känt som internationaliseringsstöd (eller i18n) (sedan dpkg 1.19.0). Tillåtna värden är: B<0> och B<1> (förval).

=back

=head2 Intern miljö

Även om B<dpkg-buildpackage> exporterar några variabler bör inte B<debian/rules> vara beroende av deras närvaro och bör istället använda respektive gränssnitt för att hämta de värden som behövs, eftersom filen är huvudstartpunkt för att bygga paket och det även bör stödas att köra den fristående.

=over 

=item B<DEB_BUILD_*>

=item B<DEB_HOST_*>

=item B<DEB_TARGET_*>

B<dpkg-architecture> anropas med flaggorna B<-a> och B<-t> vidaresända. Variabler som skrivs ut via dess B<-s>-flagga integreras i byggmiljön.

=item B<DEB_RULES_REQUIRES_ROOT>

Den här variabeln sätts till värdet som hämtas från fältet B<Rules-Requires-Root> eller från kommandoraden. När satt kommer det vara ett giltigt värde för fältet B<Rules-Requires-Root>. Det används för att meddela B<debian/rules> huruvida B<rootless-builds.txt>-specifikation stöds.

=item B<DEB_GAIN_ROOT_CMD>

Den här variabeln sätts till I<få-root-kommando> när fältet B<Rules-Requires-Root> är satt till ett värde annat än B<no> och B<binary-targets>.

=item B<SOURCE_DATE_EPOCH>

Den är variabeln sätts till Unix-tidsstämpeln sedan epoken för den senaste posten i I<debian/changelog>, om den inte redan definierats.

=back

=head1 FILER

=over 

=item B<%PKGCONFDIR%/buildpackage.conf>

Konfigurationsfil för hela systemet

=item I<$XDG_CONFIG_HOME/dpkg/buildflags.conf> eller 

=item I<$HOME/.config/dpkg/buildflags.conf>

Användarens konfigurationsfil.

=back

=head1 ANTECKNINGAR

=head2 Kompileringsflaggor exporteras inte längre.

Mellan dpkg 1.14.17 och 1.16.1 exporterade B<dpkg-buildpackage> kompilatorflaggor (B<CFLAGS>, B<CXXFLAGS>, B<CPPFLAGS> och B<LDFLAGS>) med värden enligt B<dpkg-buildflags>. Detta gäller inte längre.

=head2 Förvalda byggmål

B<dpkg-buildpackage> använder målen B<build-archi> och B<build-indep> från dpkg 1.16.2. Dessa mål krävs därmed, men för att undvika att existerande paket går sönder, och för att förenkla övergången, om källkodspaketet inte både bygger arkitektursoberoende och -beroende binärpaket (sedan dpkg 1.18.8) kommer den falla tillbaka till att använda målet B<build> om B<make -f debian/rules -gn> I<byggmål> returnerar statuskoden 2.

=head1 SECURITY

Building binary or source packages should only be performed over trusted source data.

=head1 PROGRAMFEL

Det borde vara möjligt att ange blanksteg och skalmetatecken och inledande argument för I<få-root-kommando> och I<signeringskommando>.

=head1 SE ÄVEN

I<%PKGDOCDIR%/spec/rootless-builds.txt>, B<dpkg-source>(1), B<dpkg-architecture>(1), B<dpkg-buildflags>(1), B<dpkg-genbuildinfo>(1), B<dpkg-genchanges>(1), B<fakeroot>(1), B<lintian>(1), L<https://datatracker.ietf.org/doc/draft-dkg-openpgp-stateless-cli/>, B<sq>(1), B<gpg>(1).


=head1 ÖVERSÄTTNING

Peter Krefting och Daniel Nylander.
