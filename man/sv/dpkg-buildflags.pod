
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NAMN

dpkg-buildflags - returnerar byggflaggor att använda för att bygga paket

=head1 SYNOPS

B<dpkg-buildflags> [I<flagga>...] I<kommando>

=head1 BESKRIVNING

B<dpkg-buildflags> är ett verktyg för att hämta kompileringsflaggor att använda för att bygga Debianpaket.

De förvalda flaggorna anges av leverantören, men de kan utökas/överstyras på flera sätt:

=over 

=item 1.

på hela systemet med B<%PKGCONFDIR%/buildflags.conf>;

=item 2.

för den nuvarande användaren med B<$XDG_CONFIG_HOME/dpkg/buildflags.conf> där B<$XDG_CONFIG_HOME> har standardvärdet B<$HOME/.config>;

=item 3.

temporärt av användaren med miljövariabler (se stycket B<MILJÖ>).

=item 4.

dynamiskt av paketansvariga med miljövariabler som sätts via B<debian/rules> (se stycket B<MILJÖ>).

=back

Konfigurationsfilerna kan innehålla fyra sorters direktiv:

=over 

=item B<SET> I<flagga> I<värde>

Överstyr flaggan I<flagga> till att ha värdet I<värde>.

=item B<STRIP> I<flagga> I<värde>

Strip from the flag named I<flag> all the build flags listed in I<value>. Since dpkg 1.16.1.

=item B<APPEND> I<flagga> I<värde>

Utöka flaggan I<flagga> genom att lägga till alternativen som anges i I<värde>. Ett blanksteg läggs till före värdet om flaggans nuvarande värde inte är tomt.

=item B<PREPEND> I<flagga> I<värde>

Extend the flag named I<flag> by prepending the options given in I<value>. A space is appended to the prepended value if the flag's current value is non-empty.  Since dpkg 1.16.1.

=back

Konfigurationsfilerna kan innehålla kommentarer på rader som börjar med ett nummertecken (#). Även tomma rader ignoreras.

This program was introduced in dpkg 1.15.7.

=head1 KOMMANDON

=over 

=item B<--dump>

Skriv alla kompileringsflaggor och deras värde på standard ut. En flagga skrivs per rad, avdelade från sitt värde med ett likamedtecken (”I<flagga>=I<värde>”). Detta är standardåtgärden.

=item B<--list>

Skriv ut listan över flaggor som stöds av den aktuella leverantören (en per rad). Se stycket B<FLAGGOR SOM STÖDS> för mer information om dem.

=item B<--status>

Display any information that can be useful to explain the behavior of B<dpkg-buildflags> (since dpkg 1.16.5): relevant environment variables, current vendor, state of all feature flags.  Also print the resulting compiler flags with their origin.

Detta är tänkt att köras från B<debian/rules> så att byggloggen innehåller ett tydligt spår över de använda byggflaggorna. Det kan vara användbart för att diagnostisera problem rörande dessa.

=item B<--export=>I<format>

Skriv kommandon som kan användas för att exportera alla kompileringsflaggor för något specifikt verktyg. Om I<format> inte anges antas B<sh>. Endast kompileringsflaggor som börjar med en stor bokstav tas med, andra antas att inte vara lämpliga för miljön. Format som stöds:

=over 

=item B<sh>

Skalkommandon för att sätta och exportera alla kompileringsflaggor i miljön. Flaggvärdena citeras så att utdata är redo att utvärderas av ett skal.

=item B<cmdline>

Argument att sända till byggprogrammets kommandorad för att använda alla kompileringsflaggor (sedan dpkg 1.17.0). Flaggornas värde citeras enligt skalsyntax.

=item B<configure>

Detta är ett gammalt alias för B<cmdline>.

=item B<make>

Make-direktiv för att sätta och exportera alla kompileringsflaggor i miljön. Utdata kan skrivas till ett makefil-fragment och utvärderas med ett B<include>-direktiv.

=back

=item B<--get> I<flagga>

Skriv ut värdet på flaggan på standard ut. Avslutar med 0 om flaggan är känd, om inte avslutar den med 1.

=item B<--origin> I<flagga>

Anger ursprunget till flaggan som returneras av B<--get>. Avslutar med 0 om flaggan är känd, om inte avslutar med 1. Ursprunget kan vara ett av följande värden:

=over 

=item B<vendor>

originalflagga satt av leverantören returneras;

=item B<system>

flaggan är satt/modifierad av systemkonfigurationen;

=item B<user>

flaggan är satt/modifierad av användarkonfigurationen;

=item B<env>

flaggan är satt/modifierad av en miljöspecifik konfiguration.

=back

=item B<--query>

Print any information that can be useful to explain the behavior of the program: current vendor, relevant environment variables, feature areas, state of all feature flags, whether a feature is handled as a builtin default by the compiler (since dpkg 1.21.14), and the compiler flags with their origin (since dpkg 1.19.0).

Till exempel:

 Vendor: Debian
 Environment:
  DEB_CFLAGS_SET=-O0 -Wall

 Area: qa
 Features:
  bug=no
  canary=no
 Builtins:

 Area: hardening
 Features:
  pie=no
 Builtins:
  pie=yes

 Area: reproducible
 Features:
  timeless=no
 Builtins:

 Flag: CFLAGS
 Value: -O0 -Wall
 Origin: env

 Flag: CPPFLAGS
 Value: -D_FORTIFY_SOURCE=2
 Origin: vendor

=item B<--query-features> I<område>

Skriv ut funktioner aktiverade för ett givet område (sedan dpkg 1.16.2). Om funktionen hanteras (även om bara av några arkitekturer) som ett inbyggt förval av kompilatorn visas fältet B<Bultin> (sedan dpkg 1.21.14). De enda för närvarande kända områdena på Debian och dess derivat är B<future>, B<qa>, B<reproducible>, B<sanitize> och B<hardening>, se avsnittet B<FUNKTIONSOMRÅDEN> för fler detaljer. Avslutar med 0 om området är känt, avslutar annars med 1.

Utdata är på RFC822-headerformat, med en sektion per funktion. Till exempel:

 Feature: pie
 Enabled: yes
 Builtin: yes

 Feature: stackprotector
 Enabled: yes

=item B<--help>

Visar hjälpskärm och avslutar.

=item B<--version>

Visar version och avslutar.

=back

=head1 FLAGGOR SOM STÖDS

=over 

=item B<ASFLAGS>

Flaggor för assemblern. Förvalt värde: tomt. Sedan dpkg 1.21.0.

=item B<CFLAGS>

Flaggor för C-kompilatorn. Standardvärdet som satts av leverantören innehåller B<-g> och den förvalda optimeringsnivån (vanligtvis B<-O2>, eller B<-O0> om miljövariabeln B<DEB_BUILD_OPTIONS> definierar I<noopt>).

=item B<CPPFLAGS>

Flaggor för C-förprocesseraren. Förvalt värde: tomt.

=item B<CXXFLAGS>

Flaggor för C++-kompilatorn. Samma som B<CFLAGS>.

=item B<OBJCFLAGS>

Options for the Objective C compiler. Same as B<CFLAGS>.  Since dpkg 1.17.7.

=item B<OBJCXXFLAGS>

Options for the Objective C++ compiler. Same as B<CXXFLAGS>.  Since dpkg 1.17.7.

=item B<GCJFLAGS>

Flaggor för GNU Java-kompilatorn (gcj). En delmängd av B<CFLAGS>.

=item B<DFLAGS>

Flaggor för D-kompilatorn (ldc eller gdc). Sedan dpkg 1.20.6.

=item B<FFLAGS>

Flaggor för Fortran 77-kompilatorn. En delmängd av B<CFLAGS>.

=item B<FCFLAGS>

Options for the Fortran 9x compiler. Same as B<FFLAGS>.  Since dpkg 1.17.7.

=item B<LDFLAGS>

Flaggor som sänds till kompilatorn vid länkning av binärer eller delade objekt (om länkaren anropas direkt måste B<-Wl> och B<,> tas bort från dessa flaggor). Standardvärde: tomt.

=back

Nya flaggor kan komma att läggas till i framtiden om behovet uppstår (till exempel för att stöda andra språk).

=head1 FUNKTIONSOMRÅDEN

Varje områdesfunktion kan aktiveras och inaktiveras i områdesvärdet i miljövariablerna B<DEB_BUILD_OPTIONS> och B<DEB_BUILD_MAINT_OPTIONS> modifierarna ”B<+>” och ”B<->”. Till exempel, för att aktivera B<hardening>-funktionen ”pie” och inaktivera funktionen ”fortify” genom att ange detta i B<debian/rules>:

    export DEB_BUILD_MAINT_OPTIONS=hardening=+pie,-fortify

Den speciella funktionen B<all> kan användas för att aktivera eller inaktivera alla områdesfunktioner samtidigt. Du kan till exempel inaktivera allt i området B<hardening> och endast aktivera ”format” och ”fortify” med:

    export DEB_BUILD_MAINT_OPTIONS=hardening=-all,+format,+fortify

=head2 abi

Several compile-time options (detailed below) can be used to enable features that can change the ABI of a package, but cannot be enabled by default due to backwards compatibility reasons unless coordinated or checked individually.

=over 

=item B<lfs>

This setting (since dpkg 1.22.0; disabled by default) enables Large File Support on 32-bit architectures where their ABI does not include LFS by default, by adding B<-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64> to B<CPPFLAGS>.

When this feature is enabled it will override the value from the same feature in the B<future> feature area.

=item B<time64>

This setting (since dpkg 1.22.0; disabled by default) enables 64-bit time_t support on 32-bit architectures where their ABI does not include it by default, by adding B<-D_TIME_BITS=64> to B<CPPFLAGS>.  This setting automatically enables the B<lfs> feature as it requires it.

=back

=head2 future

Flera kommandoradsflaggor (beskrivna nedan) kan användas för att aktivera funktioner som borde vara aktiverade som standard, men som inte kan vara det på grund av bakåtkompatibilitetsorsaker.

=over 

=item B<lfs>

This setting (since dpkg 1.19.0; disabled by default) is now an alias for the B<lfs> feature in the B<abi> area, use that instead.  The feature from the B<abi> area overrides this setting.

=back

=head2 qa

Flera kommandoradsflaggor (beskrivna nedan) kan användas för att göra det lättare att hitta problem i källkoden eller byggsystemet.

=over 

=item B<bug>

This setting (since dpkg 1.17.4; disabled by default) adds any warning option that reliably detects problematic source code.  The warnings are fatal.  The only currently supported flags are B<CFLAGS> and B<CXXFLAGS> with flags set to B<-Werror=array-bounds>, B<-Werror=clobbered>, B<-Werror=implicit-function-declaration> and B<-Werror=volatile-register-var>.

=item B<canary>

This setting (since dpkg 1.17.14; disabled by default) adds dummy canary options to the build flags, so that the build logs can be checked for how the build flags propagate and to allow finding any omission of normal build flag settings.  The only currently supported flags are B<CPPFLAGS>, B<CFLAGS>, B<OBJCFLAGS>, B<CXXFLAGS> and B<OBJCXXFLAGS> with flags set to B<-D__DEB_CANARY_>I<flag>_I<random-id>B<__>, and B<LDFLAGS> set to B<-Wl,-z,deb-canary->I<random-id>.

=back

=head2 optimize

Flera kommandoradsflaggor (beskrivna nedan) kan användas för att hjälpa till att optimera den skapade binären (sedan dpkg 1.21.0). B<Observera>: om B<all> aktiveras kan dessa flaggor leda till binärartifakter som inte kan reproduceras.

=over 

=item B<lto>

Inställningen (sedan dpkg 1.2.0; inaktiverad som förval) aktiverar Link Time Optimization (optimering vid länkning) genom att lägga till B<-flto=auto -ffat-lto-objects> till B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS>, B<FCFLAGS> och B<LDFLAGS>.

=back

=head2 sanitize

Du kan använda flera kompileringsflaggor (se detaljer nedan) för att sanera den färdiga binären mot minnesfördärvningsar, minnesläckor, användning efter frigivning, datakapplöpningsfel i trådar och fel i förbindels med odefinierat beteende. B<Observera>: dessa flaggor bör B<inte> användas för produktionsbygg eftersom de kan minska pålitligheten för korrekt kod, minska säkerheten eller till och med funktionsrikedomen.

=over 

=item B<address>

This setting (since dpkg 1.18.0; disabled by default) adds B<-fsanitize=address> to B<LDFLAGS> and B<-fsanitize=address -fno-omit-frame-pointer> to B<CFLAGS> and B<CXXFLAGS>.

=item B<thread>

This setting (since dpkg 1.18.0; disabled by default) adds B<-fsanitize=thread> to B<CFLAGS>, B<CXXFLAGS> and B<LDFLAGS>.

=item B<leak>

This setting (since dpkg 1.18.0; disabled by default) adds B<-fsanitize=leak> to B<LDFLAGS>. It gets automatically disabled if either the B<address> or the B<thread> features are enabled, as they imply it.

=item B<undefined>

This setting (since dpkg 1.18.0; disabled by default) adds B<-fsanitize=undefined> to B<CFLAGS>, B<CXXFLAGS> and B<LDFLAGS>.

=back

=head2 hardening

Du kan använda flera kompileringsflaggor (se detaljer nedan) för att härda den färdiga binären mot minnesfördärvningsangrepp, eller för att ge ytterligare varningsmeddelanden under kompileringen. Förutom det som anges nedan aktiveras dessa som standard för arkitekturer som stöder dem.

=over 

=item B<format>

This setting (since dpkg 1.16.1; enabled by default) adds B<-Wformat -Werror=format-security> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS> and B<OBJCXXFLAGS>.  This will warn about improper format string uses, and will fail when format functions are used in a way that represent possible security problems. At present, this warns about calls to B<printf> and B<scanf> functions where the format string is not a string literal and there are no format arguments, as in B<printf(foo);> instead of B<printf("%s", foo);> This may be a security hole if the format string came from untrusted input and contains ‘%n’.

=item B<fortify>

This setting (since dpkg 1.16.1; enabled by default) adds B<-D_FORTIFY_SOURCE=2> to B<CPPFLAGS>. During code generation the compiler knows a great deal of information about buffer sizes (where possible), and attempts to replace insecure unlimited length buffer function calls with length-limited ones. This is especially useful for old, crufty code. Additionally, format strings in writable memory that contain ‘%n’ are blocked. If an application depends on such a format string, it will need to be worked around.

Observera att för att den här flaggan ska ha någon funktion måste källkoden också kompileras med B<-O1> eller högre. Om miljövariabeln B<DEB_BUILD_OPTIONS> innehåller I<noopt> kommer stödet för B<fortify> att inaktiverats, på grund av nya varningar som ges av glibc 2.16 och senare.

=item B<stackprotector>

This setting (since dpkg 1.16.1; enabled by default if stackprotectorstrong is not in use) adds B<-fstack-protector --param=ssp-buffer-size=4> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS> and B<FCFLAGS>.  This adds safety checks against stack overwrites. This renders many potential code injection attacks into aborting situations. In the best case this turns code injection vulnerabilities into denial of service or into non-issues (depending on the application).

Den här funktionen kräver länkning mot glibc (eller ett annat bibliotek som tillhandahåller B<__stack_chk_fail>), så det måste inaktiveras när du bygger med B<-nostdlib> eller B<-ffreestanding> eller liknande.

=item B<stackprotectorstrong>

This setting (since dpkg 1.17.11; enabled by default) adds B<-fstack-protector-strong> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS> and B<FCFLAGS>.  This is a stronger variant of B<stackprotector>, but without significant performance penalties.

Om du inaktiverar B<stackprotector> inaktiveras även denna inställning.

Funktionen har samma krav som B<stackprotector>, och kräver dessutom gcc 4.9 eller senare.

=item B<stackclask>

This setting (since dpkg 1.22.0; enabled by default) adds B<-fstack-clash-protection> on B<amd64>, B<arm64>, B<armhf> and B<armel> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS> and B<FCFLAGS>.  This adds code to prevent stack clash style attacks.

=item B<branch>

This setting (since dpkg 1.22.0; enabled by default) adds B<-fcf-protection> on B<amd64> and B<-mbranch-protection=standard> on B<arm64> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS> and B<FCFLAGS>.  This adds branch protection to indirect calls, jumps and returns to check whether these are valid at run-time.

=item B<relro>

This setting (since dpkg 1.16.1; enabled by default) adds B<-Wl,-z,relro> to B<LDFLAGS>.  During program load, several ELF memory sections need to be written to by the linker. This flags the loader to turn these sections read-only before turning over control to the program. Most notably this prevents GOT overwrite attacks. If this option is disabled, B<bindnow> will become disabled as well.

=item B<bindnow>

This setting (since dpkg 1.16.1; disabled by default) adds B<-Wl,-z,now> to B<LDFLAGS>. During program load, all dynamic symbols are resolved, allowing for the entire PLT to be marked read-only (due to B<relro> above). The option cannot become enabled if B<relro> is not enabled.

=item B<pie>

This setting (since dpkg 1.16.1; with no global default since dpkg 1.18.23, as it is enabled by default now by gcc on the amd64, arm64, armel, armhf, hurd-i386, i386, kfreebsd-amd64, kfreebsd-i386, mips, mipsel, mips64el, powerpc, ppc64, ppc64el, riscv64, s390x, sparc and sparc64 Debian architectures) adds the required options to enable or disable PIE via gcc specs files, if needed, depending on whether gcc injects on that architecture the flags by itself or not.  When the setting is enabled and gcc injects the flags, it adds nothing.  When the setting is enabled and gcc does not inject the flags, it adds B<-fPIE> (via I<%PKGDATADIR%/pie-compiler.specs>) to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS> and B<FCFLAGS>, and B<-fPIE -pie> (via I<%PKGDATADIR%/pie-link.specs>) to B<LDFLAGS>.  When the setting is disabled and gcc injects the flags, it adds B<-fno-PIE> (via I<%PKGDATADIR%/no-pie-compile.specs>) to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS> and B<FCFLAGS>, and B<-fno-PIE -no-pie> (via I<%PKGDATADIR%/no-pie-link.specs>) to B<LDFLAGS>.

Positionsoberoende exekverbara program (PIE) behövs för att dra fördel av slumpmässig adressrymd (ASLR), vilket stöds av vissa versioner av kärnan. Medan ASLR redan kan användas för datautrymmen i stacken och heap:en (brk och mmap), måste kodområden först kompileras som positionsoberoende. Delade bibliotek gör redan detta (-fPIC), så de drar automatiskt fördel av ASLR medan binära .text-regioner måste byggas med PIE för att uppnå ASLR. När detta sker är ROP-angrepp (Return Oriented Programming) mycket svårare eftersom det inte finns några statiska platser att studsa från i ett minnesfördärvningsangrepp.

PIE är inte kompatibelt med B<-fPIC>, så allmän försiktighet måste tas vid bygge av delade objekt. Men eftersom PIE-flaggorna som skapas injiceras via gcc-specifikationsfiler bör det alltid vara säkert att ovillkorligen sätta dem oberoende av typen av objekt som kompileras eller länkas.

Statiska bibliotek kan användas av program eller andra delade bibliotek. Beroende på vilka flaggor som används för att kompilera objekten inuti ett statisk bibliotek kan dessa vara användas av olika uppsättningar objekt:

=over 

=item inget

Kan varken länkas till ett PIE-program eller ett delat bibliotek.

=item B<-fPIE>

Kan länkas till alla program, men inte ett delat bibliotek (rekommenderas).

=item B<-fPIC>

Kan länkas till alla program och delade bibliotek.

=back

If there is a need to set these flags manually, bypassing the gcc specs injection, there are several things to take into account. Unconditionally and explicitly passing B<-fPIE>, B<-fpie> or B<-pie> to a build-system using libtool is safe as these flags will get stripped when building shared libraries.  Otherwise on projects that build both programs and shared libraries you might need to make sure that when building the shared libraries B<-fPIC> is always passed last (so that it overrides any previous B<-PIE>) to compilation flags such as B<CFLAGS>, and B<-shared> is passed last (so that it overrides any previous B<-pie>) to linking flags such as B<LDFLAGS>. B<Note>: This should not be needed with the default gcc specs machinery.

Eftersom PIE i tillägg implementeras med ett generellt register kan vissa arkitekturer med få register (men inte längre i386 eftersom optimeringar implementerats i gcc E<gt>= 5) se prestandaförluster upp till 15% i väldigt textsegment-tunga programs körning; de flesta körningar ser mindre än 1%. Arkitekturer med många generella register (t.ex amd64) ser inte en lika stor värsta falls-förlust.

=back

=head2 reproducible

Kompileringsflaggorna som anges nedan kan användas för att göra det lättare att reproducera byggbarhet eller tillhandahålla ytterligare varningsflaggor under kompileringen. Förutom det som anges nedan aktiveras dessa som standard för arkitekturer som stöder dem.

=over 

=item B<timeless>

This setting (since dpkg 1.17.14; enabled by default) adds B<-Wdate-time> to B<CPPFLAGS>.  This will cause warnings when the B<__TIME__>, B<__DATE__> and B<__TIMESTAMP__> macros are used.

=item B<fixfilepath>

This setting (since dpkg 1.19.1; enabled by default) adds B<-ffile-prefix-map=>I<BUILDPATH>B<=.> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS> and B<FCFLAGS> where B<BUILDPATH> is set to the top-level directory of the package being built. This has the effect of removing the build path from any generated file.

Om både B<fixdebugpath> och B<fixfilepath> anges tar denna flagga företräde, eftersom den är en övermängd av den förstnämnda.

B<Note>: If the build process captures the build flags into the resulting built objects, that will make the package unreproducible.  And while disabling this option might make some of the objects reproducible again this would also require disabling B<fixdebugpath>, which might make any generated debug symbols objects unreproducible.  The ideal fix is to stop capturing build flags.

=item B<fixdebugpath>

This setting (since dpkg 1.18.5; enabled by default) adds B<-fdebug-prefix-map=>I<BUILDPATH>B<=.> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<GCJFLAGS>, B<FFLAGS> and B<FCFLAGS> where B<BUILDPATH> is set to the top-level directory of the package being built. This has the effect of removing the build path from any generated debug symbols.

B<Note>: This feature has similar reproducible properties as B<fixfilepath>.

=back

=head1 MILJÖVARIABLER

Det finns två uppsättningar miljövariabler som utför samma operationer, den första (DEB_I<flagga>_I<op>) bör aldrig användas inuti B<debian/rules>). Den är tänkt för användare som vill bygga om källkodspaketet med andra byggflaggor. Den andra uppsättningen (DEB_I<flagga>_MAINT_I<op>) bör endast användas i B<debian/rules> av paketansvariga för att ändra de slutgiltiga byggflaggorna.

=over 

=item B<DEB_>I<flagga>B<_SET>

=item B<DEB_>I<flag>B<_MAINT_SET> (since dpkg 1.16.1)

Denna variabel kan användas för att tvinga fram värdet som returneras för given I<flagga>.

=item B<DEB_>I<flag>B<_STRIP> (since dpkg 1.16.1)

=item B<DEB_>I<flag>B<_MAINT_STRIP> (since dpkg 1.16.1)

Denna variabel kan användas för att tillhandahålla en blankstegsavdelad lista med flaggor som kommer att tas bort från uppsättningen flaggor som ges för given I<flagga>.

=item B<DEB_>I<flagga>B<_APPEND>

=item B<DEB_>I<flag>B<_MAINT_APPEND> (since dpkg 1.16.1)

Denna variabel kan användas för att lägga till ytterligare flaggor till värdet som returneras för given I<flagga>.

=item B<DEB_>I<flag>B<_PREPEND> (since dpkg 1.16.1)

=item B<DEB_>I<flag>B<_MAINT_PREPEND> (since dpkg 1.16.1)

Denna variabel kan användas för att lägga till ytterligare flaggor först i värdet som returneras för given I<flagga>.

=item B<DEB_BUILD_OPTIONS>

=item B<DEB_BUILD_MAINT_OPTIONS> (since dpkg 1.16.1)

De här variablerna kan användas av en användare eller utvecklare för att slå av/på olika områdesfunktioner som påverkar byggflaggorna. Variabeln B<DEB_BUILD_MAINT_OPTIONS>-variabeln överstyr alla inställningar i funktionsområden i B<DEB_BUILD_OPTIONS>. Se avsnittet B<FUNKTIONSOMRÅDEN> för mer information.

=item B<DEB_VENDOR>

Inställningen anger den aktuella återförsäljaren. Om den inte är satt kommer återförsäljaren att identifieras genom att läsa B<%PKGCONFDIR%/origins/default>.

=item B<DEB_BUILD_PATH>

Den här variabeln anger byggsökvägen (sedan dpkg 1.18.8) att använda i funktioner såsom B<fixdebugpath> så att de kan styras av anroparen. Variabeln är för närvarande specifik för Debian och dess derivat.

=item B<DPKG_COLORS>

Väljer färgläge (sedan dpkg 1.18.5). För närvarande godtas följande värden: B<auto> (förval), B<always> och B<never>.

=item B<DPKG_NLS>

Om satt, används för att bestämma om lokalt språkstöd ska aktiveras, även känt som internationaliseringsstöd (eller i18n) (sedan dpkg 1.19.0). Tillåtna värden är: B<0> och B<1> (förval).

=back

=head1 FILER

=head2 Konfigurationsfiler

=over 

=item B<%PKGCONFDIR%/buildflags.conf>

Konfigurationsfil för hela systemet.

=item B<$XDG_CONFIG_HOME/dpkg/buildflags.conf> eller

=item B<$HOME/.config/dpkg-buildflags.conf>

Användarens konfigurationsfil.

=back

=head2 Paketeringsstöd

=over 

=item B<%PKGDATADIR%/buildflags.mk>

Makefile-klipp som läser in (och eventuellt exporterar) alla flaggor som stöd av B<dpkg-buildflags> till variabler (sedan dpkg 1.16.1).

=back

=head1 EXEMPEL

För att sända byggflaggor till en byggkommandorad i en makefil:

=over 

 $(MAKE) $(shell dpkg-buildflags --export=cmdline)

 ./configure $(shell dpkg-buildflags --export=cmdline)

=back

För att sätta byggflaggor i ett skalskript eller skalfragment kan B<eval> användas för att tolka utdata och exportera flaggorna i miljön:

=over 

 eval "$(dpkg-buildflags --export=sh)" && make

=back

eller för att sätta positionsparametrarna för att sända till ett kommando:

=over 

 eval "set -- $(dpkg-buildflags --export=cmdline)"
 for dir in a b c; do (cd $dir && ./configure "$@" && make); done

=back

=head2 Använda i debian/rules

Du bör anropa B<dpkg-buildflags> eller inkludera B<buildflags.mk> från filen B<debian/rules> för att hämta de byggflaggor det är nödvändigt att sända till byggsystemet. Observera att äldre versioner av B<dpkg-buildpackages> (före dpkg 1.16.1) exporterade dessa flaggor automatiskt. Du bör dock inte bero på detta, eftersom detta förhindrar körning av B<debian/rules> manuellt.

För paket med autoconf-liknande byggsystem kan du sända relevanta flaggor direkt till configure eller B<make>(1), som visas ovan.

I andra byggsystem, eller om du vill ha mer finkorning styrning av vilka flaggor som sänds vart, kan du använda B<--get>. Eller så kan du istället inkludera B<buildflags.mk>, som tar hand om anropet till B<dpkg-buildflags> och lagringen av byggflaggorna i make-variabler.

Om du vill exportera alla byggflaggor till miljön (där de kan fångas upp av ditt byggsystem):

=over 

 DPKG_EXPORT_BUILDFLAGS = 1
 include %PKGDATADIR%/buildflags.mk

=back

För extra styrning av vad som expoteras kan du manuellt exportera variablerna (eftersom inga av dem exporteras som standard):

=over 

 include %PKGDATADIR%/buildflags.mk
 export CPPFLAGS CFLAGS LDFLAGS

=back

Du kan naturligtvis dessutom manuellt sända flaggorna till kommandon:

=over 

 include %PKGDATADIR%/buildflags.mk
 build-arch:
 	$(CC) -o hello hello.c $(CPPFLAGS) $(CFLAGS) $(LDFLAGS)

=back


=head1 ÖVERSÄTTNING

Peter Krefting och Daniel Nylander.
