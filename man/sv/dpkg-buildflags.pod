
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NAMN

dpkg-buildflags - returnerar byggflaggor att använda för att bygga paket

=head1 SYNOPS

B<dpkg-buildflags> [I<flagga>...] I<kommando>

=head1 BESKRIVNING

B<dpkg-buildflags> är ett verktyg för att hämta kompileringsflaggor att använda för att bygga Debianpaket.

De förvalda flaggorna anges av leverantören, men de kan utökas/överstyras på flera sätt:

=over 

=item 1.

på hela systemet med B<%PKGCONFDIR%/buildflags.conf>;

=item 2.

för den nuvarande användaren med B<$XDG_CONFIG_HOME/dpkg/buildflags.conf> där B<$XDG_CONFIG_HOME> har standardvärdet B<$HOME/.config>;

=item 3.

temporarily by the user with environment variables (see section L</ENVIRONMENT>);

=item 4.

dynamically by the package maintainer with environment variables set via B<debian/rules> (see section L</ENVIRONMENT>).

=back

Konfigurationsfilerna kan innehålla fyra sorters direktiv:

=over 

=item B<SET> I<flagga> I<värde>

Överstyr flaggan I<flagga> till att ha värdet I<värde>.

=item B<STRIP> I<flagga> I<värde>

Ta bort alla flaggor som listas i I<värde> från flaggan som anges i I<flagga>. Sedan dpkg 1.16.1.

=item B<APPEND> I<flagga> I<värde>

Utöka flaggan I<flagga> genom att lägga till alternativen som anges i I<värde>. Ett blanksteg läggs till före värdet om flaggans nuvarande värde inte är tomt.

=item B<PREPEND> I<flagga> I<värde>

Utöka flaggan I<flagga> genom att lägga till alternativen som anges i I<värde> först. Ett blanksteg läggs till efter värdet om flaggans nuvarande värde inte är tomt. Sedan dpkg 1.16.1.

=back

Konfigurationsfilerna kan innehålla kommentarer på rader som börjar med ett nummertecken (#). Även tomma rader ignoreras.

Kommandot introducerades i dpkg 1.15.7..

=head1 KOMMANDON

=over 

=item B<--dump>

Skriv alla kompileringsflaggor och deras värde på standard ut. En flagga skrivs per rad, avdelade från sitt värde med ett likamedtecken (”I<flagga>=I<värde>”). Detta är standardåtgärden.

=item B<--list>

Print the list of flags supported by the current vendor (one per line). See the L</SUPPORTED FLAGS> section for more information about them.

=item B<--status>

Visa information som kan vara användbar för att förklara B<dpkg-buildflags> beteende (sedan dpkg 1.16.5): relevanta miljövariabler, aktuell återförsäljare, status för alla funktionsflaggor. Skriv även ut slutgiltiga kompilatorflaggor och deras källa.

Detta är tänkt att köras från B<debian/rules> så att byggloggen innehåller ett tydligt spår över de använda byggflaggorna. Det kan vara användbart för att diagnostisera problem rörande dessa.

=item B<--export=>I<format>

Skriv kommandon som kan användas för att exportera alla kompileringsflaggor för något specifikt verktyg. Om I<format> inte anges antas B<sh>. Endast kompileringsflaggor som börjar med en stor bokstav tas med, andra antas att inte vara lämpliga för miljön. Format som stöds:

=over 

=item B<sh>

Skalkommandon för att sätta och exportera alla kompileringsflaggor i miljön. Flaggvärdena citeras så att utdata är redo att utvärderas av ett skal.

=item B<cmdline>

Argument att sända till byggprogrammets kommandorad för att använda alla kompileringsflaggor (sedan dpkg 1.17.0). Flaggornas värde citeras enligt skalsyntax.

=item B<configure>

Detta är ett gammalt alias för B<cmdline>.

=item B<make>

Make-direktiv för att sätta och exportera alla kompileringsflaggor i miljön. Utdata kan skrivas till ett makefil-fragment och utvärderas med ett B<include>-direktiv.

=back

=item B<--get> I<flagga>

Skriv ut värdet på flaggan på standard ut. Avslutar med 0 om flaggan är känd, om inte avslutar den med 1.

=item B<--origin> I<flagga>

Anger ursprunget till flaggan som returneras av B<--get>. Avslutar med 0 om flaggan är känd, om inte avslutar med 1. Ursprunget kan vara ett av följande värden:

=over 

=item B<vendor>

originalflagga satt av leverantören returneras;

=item B<system>

flaggan är satt/modifierad av systemkonfigurationen;

=item B<user>

flaggan är satt/modifierad av användarkonfigurationen;

=item B<env>

flaggan är satt/modifierad av en miljöspecifik konfiguration.

=back

=item B<--query>

Srkiv ut information som kan vara användbar för att förklara programmets beteende: aktuell återförsäljare, relevanta miljövariabler, funktionsområden, status för alla funktionsflaggor, huruvida en funktion hanteras av ett inbyggt förval av kompilatorn (sedan dpkg 1.21.14) och kompilatorflaggorna med sina ursprung (sedan dpkg 1.19.0).

Till exempel:

 Vendor: Debian
 Environment:
  DEB_CFLAGS_SET=-O0 -Wall

 Area: qa
 Features:
  bug=no
  canary=no
 Builtins:

 Area: hardening
 Features:
  pie=no
 Builtins:
  pie=yes

 Area: reproducible
 Features:
  timeless=no
 Builtins:

 Flag: CFLAGS
 Value: -O0 -Wall
 Origin: env

 Flag: CPPFLAGS
 Value: -D_FORTIFY_SOURCE=2
 Origin: vendor

=item B<--query-features> I<område>

Skriv ut funktioner aktiverade för ett givet område (sedan dpkg 1.16.2). Om funktionen hanteras (även om bara av några arkitekturer) som ett inbyggt förval av kompilatorn visas fältet B<Bultin> (sedan dpkg 1.21.14). De enda för närvarande kända områdena på Debian och dess derivat är B<future>, B<qa>, B<reproducible>, B<sanitize> och B<hardening>, se avsnittet B<FUNKTIONSOMRÅDEN> för fler detaljer. Avslutar med 0 om området är känt, avslutar annars med 1.

Utdata är på RFC822-headerformat, med en sektion per funktion. Till exempel:

 Feature: pie
 Enabled: yes
 Builtin: yes

 Feature: stackprotector
 Enabled: yes

=item B<--help>

Visar hjälpskärm och avslutar.

=item B<--version>

Visar version och avslutar.

=back

=head1 FLAGGOR SOM STÖDS

=over 

=item B<ASFLAGS>

Options for the host assembler.  Default value: empty.  Since dpkg 1.21.0.

=item B<CFLAGS>

Options for the host C compiler.  The default value set by the vendor includes B<-g> and the default optimization level (B<-O2> usually, or B<-O0> if the B<DEB_BUILD_OPTIONS> environment variable defines I<noopt>).

=item B<CPPFLAGS>

Options for the host C preprocessor.  Default value: empty.

=item B<CXXFLAGS>

Options for the host C++ compiler.  Same as B<CFLAGS>.

=item B<OBJCFLAGS>

Options for the host Objective C compiler.  Same as B<CFLAGS>.  Since dpkg 1.17.7.

=item B<OBJCXXFLAGS>

Options for the host Objective C++ compiler.  Same as B<CXXFLAGS>.  Since dpkg 1.17.7.

=item B<DFLAGS>

Options for the host D compiler (ldc or gdc).  Since dpkg 1.20.6.

=item B<FFLAGS>

Options for the host Fortran 77 compiler.  A subset of B<CFLAGS>.

=item B<FCFLAGS>

Options for the host Fortran 9x compiler.  Same as B<FFLAGS>.  Since dpkg 1.17.7.

=item B<LDFLAGS>

Options passed to the host compiler when linking executables or shared objects (if the linker is called directly, then B<-Wl> and B<,> have to be stripped from these options). Default value: empty.

=item B<ASFLAGS_FOR_BUILD>

Options for the build assembler.  Default value: empty.  Since dpkg 1.22.1.

=item B<CFLAGS_FOR_BUILD>

Options for the build C compiler.  The default value set by the vendor includes B<-g> and the default optimization level (B<-O2> usually, or B<-O0> if the B<DEB_BUILD_OPTIONS> environment variable defines I<noopt>).  Since dpkg 1.22.1.

=item B<CPPFLAGS_FOR_BUILD>

Options for the build C preprocessor.  Default value: empty.  Since dpkg 1.22.1.

=item B<CXXFLAGS_FOR_BUILD>

Options for the build C++ compiler.  Same as B<CFLAGS_FOR_BUILD>.  Since dpkg 1.22.1.

=item B<OBJCFLAGS_FOR_BUILD>

Options for the build Objective C compiler.  Same as B<CFLAGS_FOR_BUILD>. Since dpkg 1.22.1.

=item B<OBJCXXFLAGS_FOR_BUILD>

Options for the build Objective C++ compiler.  Same as B<CXXFLAGS_FOR_BUILD>.  Since dpkg 1.22.1.

=item B<DFLAGS_FOR_BUILD>

Options for the build D compiler (ldc or gdc).  Since dpkg 1.22.1.

=item B<FFLAGS_FOR_BUILD>

Options for the build Fortran 77 compiler.  A subset of B<CFLAGS_FOR_BUILD>.  Since dpkg 1.22.1.

=item B<FCFLAGS_FOR_BUILD>

Options for the build Fortran 9x compiler.  Same as B<FFLAGS_FOR_BUILD>. Since dpkg 1.22.1.

=item B<LDFLAGS_FOR_BUILD>

Options passed to the build compiler when linking executables or shared objects (if the linker is called directly, then B<-Wl> and B<,> have to be stripped from these options).  Default value: empty.  Since dpkg 1.22.1.

=back

Nya flaggor kan komma att läggas till i framtiden om behovet uppstår (till exempel för att stöda andra språk).

=head1 FUNKTIONSOMRÅDEN

Varje områdesfunktion kan aktiveras och inaktiveras i områdesvärdet i miljövariablerna B<DEB_BUILD_OPTIONS> och B<DEB_BUILD_MAINT_OPTIONS> modifierarna ”B<+>” och ”B<->”. Till exempel, för att aktivera B<hardening>-funktionen ”pie” och inaktivera funktionen ”fortify” genom att ange detta i B<debian/rules>:

    export DEB_BUILD_MAINT_OPTIONS=hardening=+pie,-fortify

Den speciella funktionen B<all> kan användas för att aktivera eller inaktivera alla områdesfunktioner samtidigt. Du kan till exempel inaktivera allt i området B<hardening> och endast aktivera ”format” och ”fortify” med:

    export DEB_BUILD_MAINT_OPTIONS=hardening=-all,+format,+fortify

=head2 abi

Flera kommandoradsflaggor (beskrivna nedan) kan användas för att aktivera funktioner som kan ändra ABI:et för ett paket, men som inte kan aktiveras som standard på grund av bakåtkompatibilitetsorsaker såvida de inte samordnas eller kontrolleras var för sig.

=over 

=item B<lfs>

Den här inställningen (sedan dpkg 1.22.0; inaktiverad som förval) aktiverar stöd för stora filer på 32-bitars-arkitekturer där deras ABI inte som förval inkluderar LFS, genom att lägga till B<-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64> till B<CPPFLAGS>.

När funktionen är aktiverad kommer den överstyra värdet från samma funktion i funktionsområdet B<future>.

=item B<time64>

Den här inställningen (sedan dpkg 1.22.0; inaktiverad som förval) aktiverar stöd för 64-bitars time_t på 32-bitars-arkitekturer där deras ABI inte som förval inkluderar det, genom att lägga till B<-D_TIME_BITS=64> till B<CPPFLAGS>. Inställningen aktiverar automatiskt L<lfs>-funktionerna eftersom den behövs för att den ska fungera.

=back

=head2 future

Flera kommandoradsflaggor (beskrivna nedan) kan användas för att aktivera funktioner som borde vara aktiverade som standard, men som inte kan vara det på grund av bakåtkompatibilitetsorsaker.

=over 

=item B<lfs>

Den här inställningen (sedan dpkg 1.19.0; inaktiverad som förval) är nu ett alias för funktionen B<lfs> i B<abi>-området, använd den istället. Funktionen från B<abi>-området överstyr den här inställningen.

=back

=head2 qa

Flera kommandoradsflaggor (beskrivna nedan) kan användas för att göra det lättare att hitta problem i källkoden eller byggsystemet.

=over 

=item B<bug>

Inställningen (sedan dpkg 1.17.4; inaktiverad som förval) lägger till ytterligare varningar som pålitligt upptäcket problematisk källkod. Varningarna är ödesdigra. De enda flaggor som för närvarande stöds är B<CFLAGS> och B<CXXFLAGS> med flaggorna satt till B<-Werror=array-bounds>, B<-Werror=clobbered>, B<-Werror=implicit-function-declaration> och B<-Werror=volatile-register-var>.

=item B<canary>

Den här inställningen (sedan dpkg 1.17.14; inaktiverad som förval) lägger till overksamma tjallarflaggor till byggflaggorna, så att byggloggarna kan kontrolleras för att se hur byggflaggor vidarebefordras för att göra det enklare att hitta när vanliga byggflagor utesluts. De enda flaggor som stöds är för närvarande B<CPPFLAGS>, B<CFLAGS>, B<OBJCFLAGS>, B<CXXFLAGS> och B<OBJCXXFLAGS> med flaggorna satta till B<-D__DEB_CANARY_>I<flag>_I<slumpmässigt-id>B<__>, och B<LDFLAGS> satt till B<-Wl,-z,deb-canary->I<slumpmässigt-id>.

=back

=head2 optimize

Flera kommandoradsflaggor (beskrivna nedan) kan användas för att hjälpa till att optimera den skapade binären (sedan dpkg 1.21.0). B<Observera>: om B<all> aktiveras kan dessa flaggor leda till binärartifakter som inte kan reproduceras.

=over 

=item B<lto>

This setting (since dpkg 1.21.0; disabled by default) enables Link Time Optimization by adding B<-flto=auto -ffat-lto-objects> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS>, B<FCFLAGS> and B<LDFLAGS>.

=back

=head2 sanitize

Du kan använda flera kompileringsflaggor (se detaljer nedan) för att sanera den färdiga binären mot minnesfördärvningsar, minnesläckor, användning efter frigivning, datakapplöpningsfel i trådar och fel i förbindels med odefinierat beteende. B<Observera>: dessa flaggor bör B<inte> användas för produktionsbygg eftersom de kan minska pålitligheten för korrekt kod, minska säkerheten eller till och med funktionsrikedomen.

=over 

=item B<address>

Den här inställningen (sedan dpkg 1.18.0; inaktiverad som förval) lägger till B<-fsanitize=address> till B<LDFLAGS> och B<-fsanitize=address -fno-omit-frame-pointer> till B<CFLAGS> och B<CXXFLAGS>.

=item B<thread>

Den här inställningen (sedan dpkg 1.18.0; inaktiverad som förval) lägger till B<-fsanitize=thread> till B<CFLAGS>, B<CXXFLAGS> och B<LDFLAGS>.

=item B<leak>

Den här inställningen (sedan dpkg 1.18.0; inaktiverad som förval) lägger till B<-fsanitize=leak> till B<LDFLAGS>. Den inaktiveras automatiskt om antingen funktionen B<address> eller B<thread> aktiveras, eftersom de implicerar den.

=item B<undefined>

Den här inställningen (sedan dpkg 1.18.0; inaktiverad som förval) lägger till B<-fsanitize=undefined> till B<CFLAGS>, B<CXXFLAGS> och B<LDFLAGS>.

=back

=head2 hardening

Du kan använda flera kompileringsflaggor (se detaljer nedan) för att härda den färdiga binären mot minnesfördärvningsangrepp, eller för att ge ytterligare varningsmeddelanden under kompileringen. Förutom det som anges nedan aktiveras dessa som standard för arkitekturer som stöder dem.

=over 

=item B<format>

Inställningen (sedan dpkg 1.16.1; aktiverad som förval) lägger till B<-Wformat -Werror=format-security> till B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS> och B<OBJCXXFLAGS>. Detta kommer att varna om olämplig användning av formatsträngar, och att misslyckas när formatfunktionerna används på ett sätt som representerar möjliga säkerhetsproblem. För närvarande varnar detta om anrop till funktionerna B<printf> och B<scanf> där formatsträngen inte är en fast sträng och när det inte finns några formatargument, som i B<printf(foo);> istället för B<printf("%s", foo);> Detta kan vara ett säkerhetshål om formatsträngen kommer från en obetrodd källa och innehåller ”%n”.

=item B<fortify>

Inställningen (sedan dpkg 1.16.1; aktiverad som förval) lägger till B<-D_FORTIFY_SOURCE=2> till B<CPPFLAGS>. Kompilatorn har under kodgenereringen kännedom om en hel del information om buffertstorlekar (där tillämpligt) och försöker ersätta osäkra funktionsanrop med obegränsade buffertlängder med längdbegränsade dito. Det här är speciellt användbart för gammal, skräpig kod. Dessutom blockeras formatsträngar i skrivbart minne som innehåller ”%n”. Om ett program är beroende av en sådan formatsträng måste det gås runt i kod.

Observera att för att den här flaggan ska ha någon funktion måste källkoden också kompileras med B<-O1> eller högre. Om miljövariabeln B<DEB_BUILD_OPTIONS> innehåller I<noopt> kommer stödet för B<fortify> att inaktiverats, på grund av nya varningar som ges av glibc 2.16 och senare.

=item B<stackprotector>

This setting (since dpkg 1.16.1; enabled by default if stackprotectorstrong is not in use) adds B<-fstack-protector --param=ssp-buffer-size=4> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS> and B<FCFLAGS>.  This adds safety checks against stack overwrites. This renders many potential code injection attacks into aborting situations. In the best case this turns code injection vulnerabilities into denial of service or into non-issues (depending on the application).

Den här funktionen kräver länkning mot glibc (eller ett annat bibliotek som tillhandahåller B<__stack_chk_fail>), så det måste inaktiveras när du bygger med B<-nostdlib> eller B<-ffreestanding> eller liknande.

=item B<stackprotectorstrong>

This setting (since dpkg 1.17.11; enabled by default) adds B<-fstack-protector-strong> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS> and B<FCFLAGS>.  This is a stronger variant of B<stackprotector>, but without significant performance penalties.

Om du inaktiverar B<stackprotector> inaktiveras även denna inställning.

Funktionen har samma krav som B<stackprotector>, och kräver dessutom gcc 4.9 eller senare.

=item B<stackclash>

This setting (since dpkg 1.22.0; enabled by default) adds B<-fstack-clash-protection> on B<amd64>, B<arm64>, B<armhf> and B<armel> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS> and B<FCFLAGS>.  This adds code to prevent stack clash style attacks.

=item B<btacnh>

This setting (since dpkg 1.22.0; enabled by default) adds B<-fcf-protection> on B<amd64> and B<-mbranch-protection=standard> on B<arm64> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS> and B<FCFLAGS>.  This adds branch protection to indirect calls, jumps and returns to check whether these are valid at run-time.

=item B<relro>

Inställningen (sedan dpkg 1.16.1; aktiverad som förval) lägger till B<-Wl,-z,relro> till B<LDFLAGS>. Vid inläsning av programmet måste länkaren skriva till flera ELF-minnessektioner. Den här inställningen flaggar till inläsaren att dessa sektioner ska göras skrivskyddade innan programmet får kontroll. Detta skyddar huvudsaklingen mot GOT-överskrivningsangrepp. Om inställningen inaktiveras kommer även B<bindnow> att inaktiveras.

=item B<bindnow>

Inställningen (sedan dpkg 1.16.1; inaktiverad som förval) lägger till B<-Wl,-z,now> till B<LDFLAGS>. Vid inläsning av programmet löses alla dynamiska symboler, vilket gör att hela PLT kan markeras som skrivskyddad (på grund av B<relro> ovan). Inställningen kan inte aktiveras om B<relro> inte är aktiverad.

=item B<pie>

This setting (since dpkg 1.16.1; with no global default since dpkg 1.18.23, as it is enabled by default now by gcc on the amd64, arm64, armel, armhf, hurd-i386, i386, kfreebsd-amd64, kfreebsd-i386, mips, mipsel, mips64el, powerpc, ppc64, ppc64el, riscv64, s390x, sparc and sparc64 Debian architectures) adds the required options to enable or disable PIE via gcc specs files, if needed, depending on whether gcc injects on that architecture the flags by itself or not.  When the setting is enabled and gcc injects the flags, it adds nothing.  When the setting is enabled and gcc does not inject the flags, it adds B<-fPIE> (via I<%PKGDATADIR%/pie-compiler.specs>) to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS> and B<FCFLAGS>, and B<-fPIE -pie> (via I<%PKGDATADIR%/pie-link.specs>) to B<LDFLAGS>.  When the setting is disabled and gcc injects the flags, it adds B<-fno-PIE> (via I<%PKGDATADIR%/no-pie-compile.specs>) to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS> and B<FCFLAGS>, and B<-fno-PIE -no-pie> (via I<%PKGDATADIR%/no-pie-link.specs>) to B<LDFLAGS>.

Positionsoberoende exekverbara program (PIE) behövs för att dra fördel av slumpmässig adressrymd (ASLR), vilket stöds av vissa versioner av kärnan. Medan ASLR redan kan användas för datautrymmen i stacken och heap:en (brk och mmap), måste kodområden först kompileras som positionsoberoende. Delade bibliotek gör redan detta (-fPIC), så de drar automatiskt fördel av ASLR medan binära .text-regioner måste byggas med PIE för att uppnå ASLR. När detta sker är ROP-angrepp (Return Oriented Programming) mycket svårare eftersom det inte finns några statiska platser att studsa från i ett minnesfördärvningsangrepp.

PIE är inte kompatibelt med B<-fPIC>, så allmän försiktighet måste tas vid bygge av delade objekt. Men eftersom PIE-flaggorna som skapas injiceras via gcc-specifikationsfiler bör det alltid vara säkert att ovillkorligen sätta dem oberoende av typen av objekt som kompileras eller länkas.

Statiska bibliotek kan användas av program eller andra delade bibliotek. Beroende på vilka flaggor som används för att kompilera objekten inuti ett statisk bibliotek kan dessa vara användas av olika uppsättningar objekt:

=over 

=item inget

Kan varken länkas till ett PIE-program eller ett delat bibliotek.

=item B<-fPIE>

Kan länkas till alla program, men inte ett delat bibliotek (rekommenderas).

=item B<-fPIC>

Kan länkas till alla program och delade bibliotek.

=back

Om flaggorna behöver sättas manuellt och gcc:s spec-injektion förbigås, finns det flera saker man behöver tänka på. Att ovillkorligen och explicit sända B<-fPIE>, B<-fpie> eller B<-pie> till ett byggsystem som använder libtool är säkert eftersom flaggorna kommer skalas av när delade bibliotek byggs. På projekt som bygger både program och delade bibliotek kan du annars behöva se till att B<-fPIC> alltid sänds sist i kompileringsflaggor såsom B<CFLAGS> när delade bibliotek byggs (så att den överstyre en tidigare angiven B<-PIE>), och att B<-shared> sänds sist till länkflaggor såsom B<LDFLAGS> (så att den överstyr en tidigare angiven B<-pie>). B<Observera>: Detta behöver inte göras med standard-gcc-specifikationsmaskineriet.

Eftersom PIE i tillägg implementeras med ett generellt register kan vissa arkitekturer med få register (men inte längre i386 eftersom optimeringar implementerats i gcc E<gt>= 5) se prestandaförluster upp till 15% i väldigt textsegment-tunga programs körning; de flesta körningar ser mindre än 1%. Arkitekturer med många generella register (t.ex amd64) ser inte en lika stor värsta falls-förlust.

=back

=head2 reproducible

Kompileringsflaggorna som anges nedan kan användas för att göra det lättare att reproducera byggbarhet eller tillhandahålla ytterligare varningsflaggor under kompileringen. Förutom det som anges nedan aktiveras dessa som standard för arkitekturer som stöder dem.

=over 

=item B<timeless>

Inställningen (sedan dpkg 1.17.14; aktiverad som förval) lägger till B<-Wdate-time> till B<CPPFLAGS>. Detta ger varningar när makrona B<__TIME__>, B<__DATE__> eller B<__TIMESTAMP__> används.

=item B<fixfilepath>

This setting (since dpkg 1.19.1; enabled by default) adds B<-ffile-prefix-map=>I<BUILDPATH>B<=.> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS> and B<FCFLAGS> where B<BUILDPATH> is set to the top-level directory of the package being built.  This has the effect of removing the build path from any generated file.

Om både B<fixdebugpath> och B<fixfilepath> anges tar denna flagga företräde, eftersom den är en övermängd av den förstnämnda.

B<Observera>: Om byggprocessen fångar byggflaggorna i de slutliga byggobjekten kommer det att göra paketet oreproducerbart. Och även om några av objekten återigen kan göras reproducerbara genom att inaktivera den här flaggan igen kräver det samtidigt att B<fixdebugpath> inaktiveras, vilket kan göra de genererade felsökningssymbolobjekten oreproducerbara. Den bästa lösningen är att sluta fånga byggflaggor.

=item B<fixdebugpath>

This setting (since dpkg 1.18.5; enabled by default) adds B<-fdebug-prefix-map=>I<BUILDPATH>B<=.> to B<CFLAGS>, B<CXXFLAGS>, B<OBJCFLAGS>, B<OBJCXXFLAGS>, B<FFLAGS> and B<FCFLAGS> where B<BUILDPATH> is set to the top-level directory of the package being built.  This has the effect of removing the build path from any generated debug symbols.

B<Observera>: Funktionen har liknande reproduktionsegenskaper som B<fixfilepath>.

=back

=head1 MILJÖVARIABLER

Det finns två uppsättningar miljövariabler som utför samma operationer, den första (DEB_I<flagga>_I<op>) bör aldrig användas inuti B<debian/rules>). Den är tänkt för användare som vill bygga om källkodspaketet med andra byggflaggor. Den andra uppsättningen (DEB_I<flagga>_MAINT_I<op>) bör endast användas i B<debian/rules> av paketansvariga för att ändra de slutgiltiga byggflaggorna.

=over 

=item B<DEB_>I<flagga>B<_SET>

=item B<DEB_>I<flagga>B<_MAINT_SET> (Sedan dpkg 1.16.1)

Denna variabel kan användas för att tvinga fram värdet som returneras för given I<flagga>.

=item B<DEB_>I<flagga>B<_STRIP> (sedan dpkg 1.16.1)

=item B<DEB_>I<flagga>B<_MAINT_STRIP> (sedan dpkg 1.16.1)

Denna variabel kan användas för att tillhandahålla en blankstegsavdelad lista med flaggor som kommer att tas bort från uppsättningen flaggor som ges för given I<flagga>.

=item B<DEB_>I<flagga>B<_APPEND>

=item B<DEB_>I<flagga>B<_MAINT_APPEND> (sedan dpkg 1.16.1)

Denna variabel kan användas för att lägga till ytterligare flaggor till värdet som returneras för given I<flagga>.

=item B<DEB_>I<flagga>B<_PREPEND> (sedan dpkg 1.16.1)

=item B<DEB_>I<flagga>B<_MAINT_PREPEND> (sedan dpkg 1.16.1)

Denna variabel kan användas för att lägga till ytterligare flaggor först i värdet som returneras för given I<flagga>.

=item B<DEB_BUILD_OPTIONS>

=item B<DEB_BUILD_MAINT_OPTIONS> (sedan dpkg 1.16.1)

These variables can be used by a user or maintainer to disable/enable various area features that affect build flags.  The B<DEB_BUILD_MAINT_OPTIONS> variable overrides any setting in the B<DEB_BUILD_OPTIONS> feature areas.  See the L</FEATURE AREAS> section for details.

=item B<DEB_VENDOR>

Inställningen anger den aktuella återförsäljaren. Om den inte är satt kommer återförsäljaren att identifieras genom att läsa B<%PKGCONFDIR%/origins/default>.

=item B<DEB_BUILD_PATH>

Den här variabeln anger byggsökvägen (sedan dpkg 1.18.8) att använda i funktioner såsom B<fixdebugpath> så att de kan styras av anroparen. Variabeln är för närvarande specifik för Debian och dess derivat.

=item B<DPKG_COLORS>

Väljer färgläge (sedan dpkg 1.18.5). För närvarande godtas följande värden: B<auto> (förval), B<always> och B<never>.

=item B<DPKG_NLS>

Om satt, används för att bestämma om lokalt språkstöd ska aktiveras, även känt som internationaliseringsstöd (eller i18n) (sedan dpkg 1.19.0). Tillåtna värden är: B<0> och B<1> (förval).

=back

=head1 FILER

=head2 Konfigurationsfiler

=over 

=item B<%PKGCONFDIR%/buildflags.conf>

Konfigurationsfil för hela systemet.

=item B<$XDG_CONFIG_HOME/dpkg/buildflags.conf> eller

=item B<$HOME/.config/dpkg-buildflags.conf>

Användarens konfigurationsfil.

=back

=head2 Paketeringsstöd

=over 

=item B<%PKGDATADIR%/buildflags.mk>

Makefile-klipp som läser in (och eventuellt exporterar) alla flaggor som stöd av B<dpkg-buildflags> till variabler (sedan dpkg 1.16.1).

=back

=head1 EXEMPEL

För att sända byggflaggor till en byggkommandorad i en makefil:

=over 

 $(MAKE) $(shell dpkg-buildflags --export=cmdline)

 ./configure $(shell dpkg-buildflags --export=cmdline)

=back

För att sätta byggflaggor i ett skalskript eller skalfragment kan B<eval> användas för att tolka utdata och exportera flaggorna i miljön:

=over 

 eval "$(dpkg-buildflags --export=sh)" && make

=back

eller för att sätta positionsparametrarna för att sända till ett kommando:

=over 

 eval "set -- $(dpkg-buildflags --export=cmdline)"
 for dir in a b c; do (cd $dir && ./configure "$@" && make); done

=back

=head2 Använda i debian/rules

Du bör anropa B<dpkg-buildflags> eller inkludera B<buildflags.mk> från filen B<debian/rules> för att hämta de byggflaggor det är nödvändigt att sända till byggsystemet. Observera att äldre versioner av B<dpkg-buildpackages> (före dpkg 1.16.1) exporterade dessa flaggor automatiskt. Du bör dock inte bero på detta, eftersom detta förhindrar körning av B<debian/rules> manuellt.

For packages with autoconf-like build systems, you can pass the relevant options to configure or L<make(1)> directly, as shown above.

I andra byggsystem, eller om du vill ha mer finkorning styrning av vilka flaggor som sänds vart, kan du använda B<--get>. Eller så kan du istället inkludera B<buildflags.mk>, som tar hand om anropet till B<dpkg-buildflags> och lagringen av byggflaggorna i make-variabler.

Om du vill exportera alla byggflaggor till miljön (där de kan fångas upp av ditt byggsystem):

=over 

 DPKG_EXPORT_BUILDFLAGS = 1
 include %PKGDATADIR%/buildflags.mk

=back

För extra styrning av vad som expoteras kan du manuellt exportera variablerna (eftersom inga av dem exporteras som standard):

=over 

 include %PKGDATADIR%/buildflags.mk
 export CPPFLAGS CFLAGS LDFLAGS

=back

Du kan naturligtvis dessutom manuellt sända flaggorna till kommandon:

=over 

 include %PKGDATADIR%/buildflags.mk
 build-arch:
 	$(CC) -o hello hello.c $(CPPFLAGS) $(CFLAGS) $(LDFLAGS)

=back


=head1 ÖVERSÄTTNING

Peter Krefting och Daniel Nylander.
