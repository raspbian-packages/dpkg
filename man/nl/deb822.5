.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "deb822 5"
.TH deb822 5 "2020-08-02" "1.20.5" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAAM"
.IX Header "NAAM"
deb822 \- Debian RFC822\-indeling voor controledata
.SH "BESCHRIJVING"
.IX Header "BESCHRIJVING"
Het pakketbeheersysteem gebruikt gegevens die volgens een gangbare indeling
weergegeven worden, die \fIcontroledata\fR (control-data) genoemd worden en die
opgeslagen worden in \fIcontrolebestanden\fR
(control-bestanden). Controlebestanden worden gebruikt voor
broncodepakketten, voor binaire pakketten en voor de \fB.changes\fR\-bestanden
die de installatie van ge\(:uploade bestanden sturen (de interne databases van
\&\fBdpkg\fR hebben een soortgelijke indeling).
.SH "SYNTAXIS"
.IX Header "SYNTAXIS"
Een controlebestand bestaat uit \('e\('en of meer paragrafen die velden bevatten
(de paragrafen worden soms ook met de term stanzas aangeduid). De paragrafen
worden onderling gescheiden door een lege regel. Bij ontleders (parsers)
kunnen regels die enkel bestaan uit U+0020 \fB\s-1SPATIE\s0\fR en U+0009 \fB\s-1TAB\s0\fR,
gebruikt worden als scheidingsteken tussen paragrafen, maar in
controlebestanden moeten lege regels gebruikt worden. In sommige
controlebestanden is enkel \('e\('en paragraaf toegestaan, in andere meerdere. In
dat geval heeft elke paragraaf meestal betrekking op een ander pakket. (In
broncodepakketten bijvoorbeeld, heeft de eerste paragraaf betrekking op het
broncodepakket en de volgende op de binaire pakketten die uit de broncode
gegenereerd worden.) De volgorde van de paragrafen in controlebestanden is
betekenisvol.
.PP
Elke paragraaf bestaat uit een reeks gegevensvelden. Elk veld bestaat uit de
veldnaam, gevolgd door een dubbelepunt (U+003A \(oq\fB:\fR\(cq) en nadien de
data/waarde die bij dat veld hoort. De veldnaam wordt gevormd uit
US-ASCII-tekens met uitsluiting van controle-tekens, spatie en dubbelepunt
(d.w.z. tekens uit het bereik U+0021 \(oq\fB!\fR\(cq tot en met U+0039 \(oq\fB9\fR\(cq en uit
het bereik U+003B \(oq\fB;\fR\(cq tot en met U+007E \(oq\fB~\fR\(cq). Veldnamen mogen niet
beginnen met het commentaarteken (U+0023 \(oq\fB#\fR\(cq) en evenmin met het
verbindingsteken (U+002D \(oq\fB\-\fR\(cq).
.PP
Het veld eindigt op het einde van de regel of op het einde van de laatste
vervolgregel (zie later). Er mag horizontale witruimte (U+0020 \fB\s-1SPATIE\s0\fR en
U+0009 \fB\s-1TAB\s0\fR) voorkomen vlak voor en vlak na de waarde en daar wordt die
genegeerd. Het is gebruikelijk om na de dubbelepunt een enkele spatie te
plaatsen. Een voorbeeld van een veld zou kunnen zijn:
.Sp
.Vb 1
\& Package: dpkg
.Ve
.PP
de veldnaam is \fBPackage\fR en de waarde van het veld is \fBdpkg\fR.
.PP
Lege veldwaarden mogen enkel voorkomen in controlebestanden van
broncodepakketten (\fIdebian/control\fR). Dergelijke velden worden genegeerd.
.PP
In een paragraaf mag een specifieke veldnaam slechts eenmaal voorkomen.
.PP
Er bestaan drie types velden:
.RS 4
.IP "\fBsimple\fR" 4
.IX Item "simple"
(enkelvoudig) Het veld, met inbegrip van zijn waarde, moet op \('e\('en enkele
regel staan. Het uitvouwen van het veld is niet toegestaan. Dit is het
standaard veldtype als de defini\(:ering van het veld geen ander type vermeldt.
.IP "\fBfolded\fR" 4
.IX Item "folded"
(uitgevouwen) De waarde van een uitgevouwen veld is een logische regel die
verschillende regels mag beslaan. De regels na de eerste regel worden
vervolgregels genoemd en moeten beginnen met een U+0020 \fB\s-1SPATIE\s0\fR of een
U+0009 \fB\s-1TAB\s0\fR. Witruimte, met inbegrip van regeleindes, is in de veldwaarde
van uitgevouwen velden betekenisloos.
.Sp
Deze uitvouwmethode is gelijkaardig aan \s-1RFC5322,\s0 waardoor parsers die voor
\&\s-1RFC5322\s0 geschreven werden, ook in staat zijn controlebestanden te lezen die
slechts \('e\('en paragraaf en geen velden van het multiregel-type bevatten.
.IP "\fBmultiline\fR" 4
.IX Item "multiline"
(multiregel) De waarde van een multiregel-veld mag bestaan uit meerdere
vervolgregels. De eerste regel van de waarde, het deel dat op dezelfde regel
staat als de veldnaam, heeft vaak een bijzondere betekenis en kan ook leeg
zijn. De andere regels gebruiken dezelfde syntaxis als de vervolgregels van
uitgevouwen velden. Witruimte, met inbegrip van regeleindes, is in de waarde
van multiregel-velden betekenisvol.
.RE
.RS 4
.Sp
Er mag geen witruimte voorkomen in namen (van pakketten, architecturen,
bestanden of om het even wat), in versienummers of tussen de tekens van
versierelaties die uitgedrukt worden in meerdere tekens.
.Sp
De aanwezigheid en de functie van een veld en de syntaxis van zijn waarde
kunnen verschillen naargelang het type van controlebestand.
.Sp
Veldnamen zijn niet hoofdlettergevoelig, maar het is gebruikelijk om in
veldnamen hoofd\- en kleine letters samen te gebruiken, zoals hierna
ge\(:illustreerd wordt. Veldwaarden zijn wel hoofdlettergevoelig, tenzij het in
de beschrijving van het veld anders aangegeven wordt.
.Sp
Paragraafscheidingstekens (lege regels) en regels die enkel bestaan uit
U+0020 \fB\s-1SPATIE\s0\fR en U+0009 \fB\s-1TAB\s0\fR, mogen in veldwaarden en tussen velden
niet gebruikt worden. Lege regels in veldwaarden worden meestal gemaskeerd
door ze voor te stellen als een U+0020 \fB\s-1SPATIE\s0\fR gevolgd door een punt
(U+002E \(oq\fB.\fR\(cq).
.Sp
Regels die beginnen met U+0023 \(oq\fB#\fR\(cq zonder dat daar witruimte aan vooraf
gaat, zijn commentaarregels. Zij zijn enkel toegelaten in controlebestanden
van broncodepakketten (\fIdebian/control\fR) en in
\&\fBdeb-origin\fR(5)\-bestanden. Deze commentaarregels worden genegeerd, zelfs
tussen twee vervolgregels in. Ze sluiten geen logische regels af.
.Sp
Alle controlebestanden moeten in \s-1UTF\-8\s0 opgesteld worden.
.RE
.SH "ZIE OOK"
.IX Header "ZIE OOK"
\&\fB\s-1RFC822\s0\fR, \fB\s-1RFC5322\s0\fR.
