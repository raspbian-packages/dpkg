.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "deb 5"
.TH deb 5 "2020-08-02" "1.20.5" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAAM"
.IX Header "NAAM"
deb \- binair pakketformaat van Debian
.SH "OVERZICHT"
.IX Header "OVERZICHT"
\&\fIbestandsnaam\fR\fB.deb\fR
.SH "BESCHRIJVING"
.IX Header "BESCHRIJVING"
Het \fB.deb\fR\-formaat is de indeling van een binair pakketbestand in
Debian. Sinds dpkg 0.93.76 kan ermee gewerkt worden en standaard wordt ze
gegenereerd sinds dpkg 1.2.0 en 1.1.1elf (i386/ELF\-compilaties).
.PP
De hier beschreven indeling wordt gebruikt sinds Debian 0.93; de oude
indeling wordt gedetailleerd beschreven in \fBdeb-old\fR(5).
.SH "INDELING"
.IX Header "INDELING"
Het bestand is een \fBar\fR\-archief met een magische waarde van
\&\fB!<arch>\fR. Enkel de gewone \fBar\fR\-archiefindeling wordt ondersteund
zonder lange bestandsnaamextensies, maar met bestandsnamen met facultatief
een afsluitende slash, wat de lengte ervan beperkt tot 15 lettertekens (van
de 16 die toegelaten zijn). De grootte van bestanden is beperkt tot 10 \s-1ASCII\s0
decimalen, waardoor tot ongeveer 9536.74 MiB aan bestandselementen
toegelaten is.
.PP
De \fBtar\fR\-archieven die momenteel toegelaten zijn, zijn de indeling in oude
stijl (v7), de pre-POSIX ustar-indeling, een subset van de GNU-indeling (de
lange padnamen en lange koppelingsnamen in nieuwe stijl, die sinds dpkg
1.4.1.17 ondersteund worden; uitgebreide bestandsmetadata sinds 1.18.24) en
de \s-1POSIX\s0 ustar-indeling (lange namen, ondersteund sinds dpkg
1.15.0). Niet-herkende tar-typevlaggen worden als een fout beschouwd. Binnen
een tar-archief is de grootte van elk item beperkt tot 11 \s-1ASCII\s0 octale
cijfers, hetgeen tot maximaal 8 GiB aan tar-items mogelijk maakt. De
ondersteuning voor uitgebreide bestandsmetadata in de GNU-indeling maakt een
grootte mogelijk van 95 bits voor een tar-item, negatieve tijdstempels en
\&\s-1UID\-, GID\-\s0 en apparaatnummers van 63 bits.
.PP
Het eerste element wordt \fBdebian-binary\fR genoemd en bevat een aantal
regels, gescheiden door regeleinden. Momenteel, op het moment van het
schrijven van deze man-pagina, heeft dit slechts \('e\('en regel, het versienummer
van de indeling, \fB2.0\fR. Programma's die archieven lezen in de nieuwe
indeling, moeten erop voorbereid zijn dat het onderversienummer verhoogd
wordt en dat er nieuwe regels aanwezig kunnen zijn. En als dat het geval is,
moeten ze die negeren.
.PP
Indien het hoofdversienummer gewijzigd werd, werd een niet-compatibele
wijziging gemaakt en zou het programma moeten stoppen. Indien dit niet het
geval is, dan zou het programma in staat moeten zijn probleemloos voort te
gaan, tenzij het in het archief (behalve op het einde) een onverwacht
element tegenkomt, zoals hierna beschreven wordt.
.PP
Het tweede vereiste element wordt \fBcontrol.tar\fR genoemd. Het is een
tar-archief dat de controle-informatie van het pakket bevat, ofwel
niet-gecomprimeerd (ondersteund sinds dpkg 1.17.6) of gecomprimeerd met gzip
(met de extensie \fB.gz\fR) of met xz (met de extensie \fB.xz\fR, ondersteund
sinds 1.17.6), onder de vorm van een reeks gewone bestanden, waarvan het
bestand \fBcontrol\fR, dat de kern van de controle-informatie bevat, verplicht
deel uitmaakt. De bestanden \fBconffiles\fR, \fBtriggers\fR, \fBshlibs\fR en
\&\fBsymbols\fR bevatten facultatieve controle-informatie en de bestanden
\&\fBpreinst\fR, \fBpostinst\fR, \fBprerm\fR en \fBpostrm\fR zijn facultatieve scripts van
de pakketonderhouder. Het controle-tar-archief kan facultatief een
vermelding bevatten van \(oq\fB.\fR\(cq, de huidige map.
.PP
Het derde en laatste verplichte element wordt \fBdata.tar\fR genoemd. Het bevat
het bestandssysteem in de vorm van een tar-archief, dat ofwel
niet-gecomprimeerd is (ondersteund sinds dpkg 1.10.24) of gecomprimeerd met
gzip (met de extensie \fB.gz\fR), met xz (met de extensie \fB.xz\fR, ondersteund
sinds dpkg 1.15.6), met bzip2 (met de extensie \fB.bz2\fR, ondersteund sinds
dpkg 1.10.24) of met lzma (met de extensie \fB.lzma\fR, ondersteund sinds dpkg
1.13.25).
.PP
Deze elementen moeten exact in deze volgorde voorkomen. Huidige
implementaties moeten eventuele bijkomende elementen na \fBdata.tar\fR
negeren. Het kan zijn dat in de toekomst meer elementen gedefinieerd worden,
die (zo mogelijk) na deze drie geplaatst zullen worden. Eventuele bijkomende
elementen die ingevoegd zouden moeten worden na \fBdebian-binary\fR en voor
\&\fBcontrol.tar\fR of \fBdata.tar\fR en die door oudere programma's probleemloos
genegeerd zouden moeten worden, zullen namen krijgen die beginnen met een
laag liggend streepje, \(oq\fB_\fR\(cq.
.PP
Nieuwe elementen die niet probleemloos genegeerd zullen mogen worden, zullen
ingevoegd worden voor \fBdata.tar\fR en zullen namen hebben die met iets anders
dan een laag liggend streepje beginnen, of (wat waarschijnlijker is) zullen
tot gevolg hebben dat het hoofdversienummer verhoogd wordt.
.SH "MEDIATYPE"
.IX Header "MEDIATYPE"
.SS "Huidig"
.IX Subsection "Huidig"
application/vnd.debian.binary\-package
.SS "Verouderd"
.IX Subsection "Verouderd"
application/x\-debian\-package
.PP
application/x\-deb
.SH "ZIE OOK"
.IX Header "ZIE OOK"
\&\fBdeb-old\fR(5), \fBdpkg-deb\fR(1), \fBdeb-control\fR(5), \fBdeb-conffiles\fR(5),
\&\fBdeb-triggers\fR(5), \fBdeb-shlibs\fR(5), \fBdeb-symbols\fR(5), \fBdeb-preinst\fR(5),
\&\fBdeb-postinst\fR(5), \fBdeb-prerm\fR(5), \fBdeb-postrm\fR(5).
